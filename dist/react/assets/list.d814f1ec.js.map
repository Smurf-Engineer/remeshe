{"version":3,"file":"list.d814f1ec.js","sources":["../../../packages/remesh/src/modules/list.ts"],"sourcesContent":["import { Remesh, RemeshDomainContext, Capitalize } from '../index'\r\n\r\nexport type ListModuleOptions<T> = {\r\n  name: Capitalize\r\n  key: (item: T) => string\r\n  default?: T[]\r\n}\r\n\r\nexport const ListModule = <T>(domain: RemeshDomainContext, options: ListModuleOptions<T>) => {\r\n  const KeyListState = domain.state<string[]>({\r\n    name: `${options.name}.KeyListState`,\r\n    default: [],\r\n  })\r\n\r\n  const KeyListQuery = domain.query({\r\n    name: `${options.name}.KeyListQuery`,\r\n    impl: ({ get }) => {\r\n      return get(KeyListState())\r\n    },\r\n  })\r\n\r\n  const ItemState = domain.state<string, T>({\r\n    name: `${options.name}.ItemState`,\r\n  })\r\n\r\n  const ItemQuery = domain.query({\r\n    name: `${options.name}.ItemQuery`,\r\n    impl: ({ get }, key: string) => {\r\n      return get(ItemState(key))\r\n    },\r\n  })\r\n\r\n  const ItemListQuery = domain.query({\r\n    name: `${options.name}.ItemListQuery`,\r\n    impl: ({ get }) => {\r\n      const keyList = get(KeyListQuery())\r\n      return keyList.map((key) => get(ItemState(key)))\r\n    },\r\n  })\r\n\r\n  const SetListCommand = domain.command({\r\n    name: `${options.name}.SetListCommand`,\r\n    impl: (_, newList: T[]) => {\r\n      const keyList = newList.map(options.key)\r\n\r\n      return [newList.map((item, index) => ItemState(keyList[index]).new(item)), KeyListState().new(keyList)]\r\n    },\r\n  })\r\n\r\n  const AddItemCommand = domain.command({\r\n    name: `${options.name}.AddItemCommand`,\r\n    impl: ({ get }, newItem: T) => {\r\n      const keyList = get(KeyListState())\r\n      const list = get(ItemListQuery())\r\n      const newKey = options.key(newItem)\r\n\r\n      if (keyList.includes(newKey)) {\r\n        return null\r\n      }\r\n\r\n      return SetListCommand(list.concat(newItem))\r\n    },\r\n  })\r\n\r\n  const AddItemListCommand = domain.command({\r\n    name: `${options.name}.AddItemListCommand`,\r\n    impl: ({ get }, newItems: T[]) => {\r\n      const keyList = get(KeyListState())\r\n      const list = get(ItemListQuery())\r\n\r\n      const newList = [] as T[]\r\n\r\n      for (const newItem of newItems) {\r\n        const newItemKey = options.key(newItem)\r\n\r\n        if (keyList.includes(newItemKey)) {\r\n          continue\r\n        }\r\n\r\n        newList.push(newItem)\r\n      }\r\n\r\n      if (newList.length === 0) {\r\n        return null\r\n      }\r\n\r\n      return SetListCommand(list.concat(newList))\r\n    },\r\n  })\r\n\r\n  const DeleteItemCommand = domain.command({\r\n    name: `${options.name}.DeleteItemCommand`,\r\n    impl: ({ get }, targetKey: string) => {\r\n      const list = get(ItemListQuery())\r\n      const newList = list.filter((item) => options.key(item) !== targetKey)\r\n\r\n      return SetListCommand(newList)\r\n    },\r\n  })\r\n\r\n  const DeleteItemListCommand = domain.command({\r\n    name: `${options.name}.DeleteItemListCommand`,\r\n    impl: ({ get }, targetKeys: string[]) => {\r\n      const list = get(ItemListQuery())\r\n      const newList = list.filter((item) => !targetKeys.includes(options.key(item)))\r\n\r\n      return SetListCommand(newList)\r\n    },\r\n  })\r\n\r\n  const DeleteAllCommand = domain.command({\r\n    name: `${options.name}.DeleteAllCommand`,\r\n    impl: (_) => {\r\n      return SetListCommand([])\r\n    },\r\n  })\r\n\r\n  const UpdateItemCommand = domain.command({\r\n    name: `${options.name}.UpdateItemCommand`,\r\n    impl: ({ get }, newItem: T) => {\r\n      const key = options.key(newItem)\r\n      const keyList = get(KeyListState())\r\n\r\n      if (!keyList.includes(key)) {\r\n        return null\r\n      }\r\n\r\n      const list = get(ItemListQuery())\r\n      const newList = list.map((item) => {\r\n        if (options.key(item) === key) {\r\n          return newItem\r\n        }\r\n        return item\r\n      })\r\n\r\n      return SetListCommand(newList)\r\n    },\r\n  })\r\n\r\n  const UpdateItemListCommand = domain.command({\r\n    name: `${options.name}.UpdateItemListCommand`,\r\n    impl: ({ get }, newItems: T[]) => {\r\n      const keyList = get(KeyListState())\r\n      const list = get(ItemListQuery())\r\n\r\n      const updateItemKeys = newItems.map((item) => options.key(item))\r\n      const newList = [] as T[]\r\n\r\n      for (const [index, key] of keyList.entries()) {\r\n        const updateItemIndex = updateItemKeys.indexOf(key)\r\n\r\n        if (updateItemIndex !== -1) {\r\n          const newItem = newItems[updateItemIndex]\r\n          newList.push(newItem)\r\n        } else {\r\n          newList.push(list[index])\r\n        }\r\n      }\r\n\r\n      return SetListCommand(newList)\r\n    },\r\n  })\r\n\r\n  const InsertAtCommand = domain.command({\r\n    name: `${options.name}.InsertAtCommand`,\r\n    impl: ({ get }, { index, item }: { index: number; item: T }) => {\r\n      const keyList = get(KeyListState())\r\n\r\n      if (keyList.includes(options.key(item))) {\r\n        return null\r\n      }\r\n\r\n      const list = get(ItemListQuery())\r\n      const newList = list.slice(0, index).concat(item).concat(list.slice(index))\r\n\r\n      return SetListCommand(newList)\r\n    },\r\n  })\r\n\r\n  const InsertBeforeCommand = domain.command({\r\n    name: `${options.name}.InsertBeforeCommand`,\r\n    impl: ({ get }, { before, item }: { before: T; item: T }) => {\r\n      const keyList = get(KeyListState())\r\n      const itemKey = options.key(item)\r\n      const beforeKey = options.key(before)\r\n\r\n      if (keyList.includes(itemKey)) {\r\n        return null\r\n      }\r\n\r\n      const list = get(ItemListQuery())\r\n      const newList = [] as T[]\r\n\r\n      for (const current of list) {\r\n        const currentKey = options.key(current)\r\n\r\n        if (currentKey === beforeKey) {\r\n          newList.push(item)\r\n        }\r\n\r\n        newList.push(current)\r\n      }\r\n\r\n      return SetListCommand(newList)\r\n    },\r\n  })\r\n\r\n  const InsertAfterCommand = domain.command({\r\n    name: `${options.name}.InsertAfterCommand`,\r\n    impl: ({ get }, { after, item }: { after: T; item: T }) => {\r\n      const keyList = get(KeyListState())\r\n      const itemKey = options.key(item)\r\n      const afterKey = options.key(after)\r\n\r\n      if (keyList.includes(itemKey)) {\r\n        return null\r\n      }\r\n\r\n      const list = get(ItemListQuery())\r\n      const newList = [] as T[]\r\n\r\n      for (const current of list) {\r\n        const currentKey = options.key(current)\r\n\r\n        newList.push(current)\r\n\r\n        if (currentKey === afterKey) {\r\n          newList.push(item)\r\n        }\r\n      }\r\n\r\n      return SetListCommand(newList)\r\n    },\r\n  })\r\n\r\n  const ResetCommand = domain.command({\r\n    name: `${options.name}.ResetCommand`,\r\n    impl: () => {\r\n      return SetListCommand(options.default ?? [])\r\n    },\r\n  })\r\n\r\n  /**\r\n   * sync options.default to item list\r\n   */\r\n  domain.ignite(() => {\r\n    return SetListCommand(options.default ?? [])\r\n  })\r\n\r\n  return Remesh.module({\r\n    command: {\r\n      SetListCommand,\r\n      AddItemCommand,\r\n      AddItemListCommand,\r\n      DeleteItemCommand,\r\n      DeleteItemListCommand,\r\n      DeleteAllCommand,\r\n      UpdateItemCommand,\r\n      UpdateItemListCommand,\r\n      InsertAtCommand,\r\n      InsertBeforeCommand,\r\n      InsertAfterCommand,\r\n      ResetCommand,\r\n    },\r\n    query: {\r\n      KeyListQuery,\r\n      ItemQuery,\r\n      ItemListQuery,\r\n    },\r\n  })\r\n}\r\n"],"names":[],"mappings":"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"}