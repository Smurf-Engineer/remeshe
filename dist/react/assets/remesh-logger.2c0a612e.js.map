{"version":3,"file":"remesh-logger.2c0a612e.js","sources":["../../../node_modules/.pnpm/shallowequal@1.1.0/node_modules/shallowequal/index.js","../../../node_modules/.pnpm/is-plain-object@5.0.0/node_modules/is-plain-object/dist/is-plain-object.mjs","../../../packages/remesh/src/remesh.ts","../../../node_modules/.pnpm/tslib@2.3.1/node_modules/tslib/tslib.es6.js","../../../node_modules/.pnpm/rxjs@7.5.5/node_modules/rxjs/dist/esm5/internal/util/isFunction.js","../../../node_modules/.pnpm/rxjs@7.5.5/node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js","../../../node_modules/.pnpm/rxjs@7.5.5/node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js","../../../node_modules/.pnpm/rxjs@7.5.5/node_modules/rxjs/dist/esm5/internal/util/arrRemove.js","../../../node_modules/.pnpm/rxjs@7.5.5/node_modules/rxjs/dist/esm5/internal/Subscription.js","../../../node_modules/.pnpm/rxjs@7.5.5/node_modules/rxjs/dist/esm5/internal/config.js","../../../node_modules/.pnpm/rxjs@7.5.5/node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js","../../../node_modules/.pnpm/rxjs@7.5.5/node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js","../../../node_modules/.pnpm/rxjs@7.5.5/node_modules/rxjs/dist/esm5/internal/util/noop.js","../../../node_modules/.pnpm/rxjs@7.5.5/node_modules/rxjs/dist/esm5/internal/NotificationFactories.js","../../../node_modules/.pnpm/rxjs@7.5.5/node_modules/rxjs/dist/esm5/internal/util/errorContext.js","../../../node_modules/.pnpm/rxjs@7.5.5/node_modules/rxjs/dist/esm5/internal/Subscriber.js","../../../node_modules/.pnpm/rxjs@7.5.5/node_modules/rxjs/dist/esm5/internal/symbol/observable.js","../../../node_modules/.pnpm/rxjs@7.5.5/node_modules/rxjs/dist/esm5/internal/util/identity.js","../../../node_modules/.pnpm/rxjs@7.5.5/node_modules/rxjs/dist/esm5/internal/util/pipe.js","../../../node_modules/.pnpm/rxjs@7.5.5/node_modules/rxjs/dist/esm5/internal/Observable.js","../../../node_modules/.pnpm/rxjs@7.5.5/node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js","../../../node_modules/.pnpm/rxjs@7.5.5/node_modules/rxjs/dist/esm5/internal/Subject.js","../../../packages/remesh/src/inspector.ts","../../../packages/remesh/src/store.ts","../../../packages/remesh/src/index.ts","../../../node_modules/.pnpm/use-sync-external-store@1.0.0_react@18.1.0/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js","../../../node_modules/.pnpm/use-sync-external-store@1.0.0_react@18.1.0/node_modules/use-sync-external-store/shim/index.js","../../../packages/remesh-react/src/remesh-react.tsx","../../../packages/remesh-debugger-helper/src/remesh-debugger-helper.ts","../../../packages/remesh-redux-devtools/src/remesh-redux-devtools.ts","../../../packages/remesh-logger/src/remesh-logger.ts"],"sourcesContent":["//\n\nmodule.exports = function shallowEqual(objA, objB, compare, compareContext) {\n  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;\n\n  if (ret !== void 0) {\n    return !!ret;\n  }\n\n  if (objA === objB) {\n    return true;\n  }\n\n  if (typeof objA !== \"object\" || !objA || typeof objB !== \"object\" || !objB) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);\n\n  // Test for A's keys different from B.\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx];\n\n    if (!bHasOwnProperty(key)) {\n      return false;\n    }\n\n    var valueA = objA[key];\n    var valueB = objB[key];\n\n    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;\n\n    if (ret === false || (ret === void 0 && valueA !== valueB)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nfunction isObject(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isPlainObject(o) {\n  var ctor,prot;\n\n  if (isObject(o) === false) return false;\n\n  // If has modified constructor\n  ctor = o.constructor;\n  if (ctor === undefined) return true;\n\n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n}\n\nexport { isPlainObject };\n","import { Observable } from 'rxjs'\nimport shallowEqual from 'shallowequal'\nimport { isPlainObject } from 'is-plain-object'\n\nexport type SerializableType =\n  | void\n  | number\n  | string\n  | boolean\n  | null\n  | undefined\n  | SerializableType[]\n  | { toJSON(): string }\n  | { [key: string]: SerializableType }\n\nexport type Undefined2Void<T> = undefined extends T ? Exclude<T, undefined> | void : T\n\nexport const undefined2Void = <T>(value: T): Undefined2Void<T> => {\n  return value as Undefined2Void<T>\n}\n\nexport type ExtractFirstArg<T extends (...args: any) => any> = Undefined2Void<Parameters<T>[0]>\n\nexport type ExtractSecondArg<T extends (...args: any) => any> = Undefined2Void<Parameters<T>[1]>\n\nexport type GetterInput<T extends SerializableType, U> = RemeshStateItem<T, U> | RemeshQueryPayload<T, U>\n\nexport const RemeshValuePlaceholder = Symbol('RemeshValuePlaceholder')\n\nexport type RemeshValuePlaceholder = typeof RemeshValuePlaceholder\n\nexport type RemeshInjectedContext = {\n  get: <T extends SerializableType, U>(input: GetterInput<T, U>) => U\n  peek: <T extends SerializableType, U>(input: GetterInput<T, U>) => U | RemeshValuePlaceholder\n  fromEvent: <T, U>(Event: RemeshEvent<T, U>) => Observable<U>\n  fromQuery: <T extends SerializableType, U>(Query: RemeshQueryPayload<T, U>) => Observable<U>\n}\n\nexport type RemeshEventContext = {\n  get: RemeshInjectedContext['get']\n  peek: RemeshInjectedContext['peek']\n}\n\nexport type RemeshEvent<T, U = T> = {\n  type: 'RemeshEvent'\n  eventId: number\n  eventName: string\n  impl?: (context: RemeshEventContext, arg: T) => U\n  (arg: T): RemeshEventPayload<T, U>\n  owner: RemeshDomainPayload<any, any>\n  inspectable: boolean\n}\n\nexport type RemeshEventPayload<T, U = T> = {\n  type: 'RemeshEventPayload'\n  arg: T\n  Event: RemeshEvent<T, U>\n}\n\nexport type RemeshEventOptions<T, U> = {\n  name: string\n  inspectable?: boolean\n  impl: (context: RemeshEventContext, arg: T) => U\n}\n\nlet eventUid = 0\n\nexport function RemeshEvent<T extends RemeshEventOptions<any, any>>(\n  options: T,\n): RemeshEvent<ExtractSecondArg<T['impl']>, ReturnType<T['impl']>>\nexport function RemeshEvent<T = void>(options: { name: string }): RemeshEvent<T>\nexport function RemeshEvent(options: RemeshEventOptions<unknown, unknown> | { name: string }): RemeshEvent<any, any> {\n  const eventId = eventUid++\n\n  const Event = ((arg) => {\n    return {\n      type: 'RemeshEventPayload',\n      arg,\n      Event,\n    }\n  }) as RemeshEvent<any, any>\n\n  Event.type = 'RemeshEvent'\n  Event.eventId = eventId\n  Event.eventName = options.name\n  Event.owner = DefaultDomain()\n  Event.inspectable = 'inspectable' in options ? options.inspectable ?? true : true\n\n  if ('impl' in options) {\n    Event.impl = options.impl\n  }\n\n  return Event\n}\n\nexport type CompareFn<T> = (prev: T, curr: T) => boolean\n\nexport type RemeshStateChangedEventData<T> = {\n  previous: T\n  current: T\n}\n\nexport type RemeshState<T extends SerializableType, U> = {\n  type: 'RemeshState'\n  stateId: number\n  stateName: string\n  defer: boolean\n  impl: (arg: T) => U\n  (arg: T): RemeshStateItem<T, U>\n  owner: RemeshDomainPayload<any, any>\n  query: RemeshQuery<T, U>\n  compare: CompareFn<U>\n  inspectable: boolean\n}\n\nexport type RemeshStateItem<T extends SerializableType, U> = {\n  type: 'RemeshStateItem'\n  arg: T\n  State: RemeshState<T, U>\n  new: (newState: U) => RemeshStatePayload<T, U>\n}\n\nexport type RemeshDefaultStateOptions<T> = {\n  name: RemeshState<void, T>['stateName']\n  default: T\n  inspectable?: boolean\n  compare?: RemeshState<void, T>['compare']\n}\n\nexport const RemeshDefaultState = <T>(options: RemeshDefaultStateOptions<T>): RemeshState<void, T> => {\n  return RemeshState({\n    name: options.name,\n    impl: () => options.default,\n    inspectable: options.inspectable,\n    compare: options.compare,\n  })\n}\n\nexport type RemeshDeferStateOptions<T extends SerializableType, U> = {\n  name: RemeshState<T, U>['stateName']\n  inspectable?: boolean\n  compare?: RemeshState<T, U>['compare']\n}\n\nexport const RemeshDeferState = <T extends SerializableType, U>(options: RemeshDeferStateOptions<T, U>) => {\n  return RemeshState({\n    name: options.name,\n    defer: true,\n    impl: (_arg: T): U => {\n      throw new Error(`RemeshDeferState: use ${options.name} before setting state`)\n    },\n    inspectable: options.inspectable,\n    compare: options.compare,\n  })\n}\n\nexport type RemeshStatePayload<T extends SerializableType, U> = {\n  type: 'RemeshStateSetterPayload'\n  stateItem: RemeshStateItem<T, U>\n  newState: U\n}\n\nexport type RemeshStateOptions<T extends SerializableType, U> = {\n  name: string\n  defer?: boolean\n  impl: (arg?: T) => U\n  inspectable?: boolean\n  compare?: CompareFn<U>\n}\n\nlet stateUid = 0\n\nexport const defaultCompare = <T>(prev: T, curr: T) => {\n  if (isPlainObject(prev) && isPlainObject(curr)) {\n    return shallowEqual(prev, curr)\n  }\n\n  if (Array.isArray(prev) && Array.isArray(curr)) {\n    return shallowEqual(prev, curr)\n  }\n\n  return prev === curr\n}\n\nexport const RemeshState = <T extends RemeshStateOptions<any, any>>(\n  options: T,\n): RemeshState<ExtractFirstArg<T['impl']>, ReturnType<T['impl']>> => {\n  const stateId = stateUid++\n\n  type StateArg = ExtractFirstArg<T['impl']>\n  type StateReturn = ReturnType<T['impl']>\n  type StateItem = RemeshStateItem<StateArg, StateReturn>\n\n  let cacheForNullary = null as StateItem | null\n\n  const State = ((arg) => {\n    if (arg === undefined && cacheForNullary) {\n      return cacheForNullary\n    }\n\n    const stateItem: StateItem = {\n      type: 'RemeshStateItem',\n      arg,\n      State,\n      new: (newState) => {\n        return {\n          type: 'RemeshStateSetterPayload',\n          stateItem,\n          newState,\n        }\n      },\n    }\n\n    if (arg === undefined) {\n      cacheForNullary = stateItem\n    }\n\n    return stateItem\n  }) as RemeshState<StateArg, StateReturn>\n\n  State.type = 'RemeshState'\n  State.stateId = stateId\n  State.stateName = options.name\n  State.impl = options.impl\n  State.compare = options.compare ?? defaultCompare\n  State.owner = DefaultDomain()\n  State.inspectable = options.inspectable ?? true\n  State.defer = options.defer ?? false\n\n  State.query = RemeshQuery({\n    name: `${options.name}.Query`,\n    inspectable: false,\n    impl: ({ get }: RemeshQueryContext, arg: StateArg) => {\n      return get(State(arg))\n    },\n  })\n\n  return State\n}\n\nexport type RemeshSchedulerContext = {\n  get: RemeshInjectedContext['get']\n  peek: RemeshInjectedContext['peek']\n  fromEvent: RemeshInjectedContext['fromEvent']\n  fromQuery: RemeshInjectedContext['fromQuery']\n}\n\nexport type RemeshQueryContext = {\n  get: RemeshInjectedContext['get']\n  peek: RemeshInjectedContext['peek']\n}\n\nexport type RemeshQuery<T extends SerializableType, U> = {\n  type: 'RemeshQuery'\n  queryId: number\n  queryName: string\n  impl: (context: RemeshQueryContext, arg: T) => U\n  (arg: T): RemeshQueryPayload<T, U>\n  owner: RemeshDomainPayload<any, any>\n  compare: CompareFn<U>\n  inspectable: boolean\n}\n\nexport type RemeshQueryPayload<T extends SerializableType, U> = {\n  type: 'RemeshQueryPayload'\n  Query: RemeshQuery<T, U>\n  arg: T\n}\n\nexport type RemeshQueryOptions<T extends SerializableType, U> = {\n  name: string\n  inspectable?: boolean\n  impl: (context: RemeshQueryContext, arg?: T) => U\n  compare?: RemeshQuery<T, U>['compare']\n}\n\nlet queryUid = 0\nexport const RemeshQuery = <T extends RemeshQueryOptions<any, any>>(\n  options: T,\n): RemeshQuery<ExtractSecondArg<T['impl']>, ReturnType<T['impl']>> => {\n  const queryId = queryUid++\n\n  /**\n   * optimize for nullary query\n   */\n  let cacheForNullary: RemeshQueryPayload<ExtractSecondArg<T['impl']>, ReturnType<T['impl']>> | null = null\n\n  const Query = ((arg) => {\n    if (arg === undefined && cacheForNullary) {\n      return cacheForNullary\n    }\n\n    const payload: RemeshQueryPayload<ExtractSecondArg<T['impl']>, ReturnType<T['impl']>> = {\n      type: 'RemeshQueryPayload',\n      Query,\n      arg,\n    }\n\n    if (arg === undefined) {\n      cacheForNullary = payload\n    }\n\n    return payload\n  }) as RemeshQuery<ExtractSecondArg<T['impl']>, ReturnType<T['impl']>>\n\n  Query.type = 'RemeshQuery'\n  Query.queryId = queryId\n  Query.queryName = options.name\n  Query.impl = options.impl\n  Query.compare = options.compare ?? defaultCompare\n  Query.owner = DefaultDomain()\n  Query.inspectable = options.inspectable ?? true\n\n  return Query\n}\n\nexport type RemeshCommandContext = {\n  get: RemeshInjectedContext['get']\n  peek: RemeshInjectedContext['peek']\n}\n\nexport type RemeshCommandOutput =\n  | RemeshStatePayload<any, any>\n  | RemeshEventPayload<any, any>\n  | RemeshCommandPayload<any>\n  | RemeshCommand$Payload<any>\n  | RemeshCommandOutput[]\n  | null\n  | undefined\n  | void\n  | false\n\nexport type RemeshCommandPayload<T> = {\n  type: 'RemeshCommandPayload'\n  arg: T\n  Command: RemeshCommand<T>\n}\n\nexport type RemeshCommand<T = unknown> = {\n  type: 'RemeshCommand'\n  commandId: number\n  commandName: string\n  impl: (context: RemeshCommandContext, arg: T) => RemeshCommandOutput\n  (arg: T): RemeshCommandPayload<T>\n  owner: RemeshDomainPayload<any, any>\n  inspectable: boolean\n}\n\nexport type RemeshCommandOptions<T> = {\n  name: string\n  inspectable?: boolean\n  impl: (context: RemeshCommandContext, arg?: T) => RemeshCommandOutput\n}\n\nlet commandUid = 0\n\nexport const RemeshCommand = <T extends RemeshCommandOptions<any>>(\n  options: T,\n): RemeshCommand<ExtractSecondArg<T['impl']>> => {\n  const commandId = commandUid++\n\n  const Command = ((arg) => {\n    return {\n      type: 'RemeshCommandPayload',\n      arg,\n      Command,\n    }\n  }) as RemeshCommand<ExtractSecondArg<T['impl']>>\n\n  Command.type = 'RemeshCommand'\n  Command.commandId = commandId\n  Command.commandName = options.name\n  Command.impl = options.impl\n  Command.owner = DefaultDomain()\n  Command.inspectable = options.inspectable ?? true\n\n  return Command\n}\n\nexport type RemeshCommand$Context = {\n  get: RemeshInjectedContext['get']\n  peek: RemeshInjectedContext['peek']\n  fromEvent: RemeshInjectedContext['fromEvent']\n  fromQuery: RemeshInjectedContext['fromQuery']\n}\n\nexport type RemeshCommand$Payload<T> = {\n  type: 'RemeshCommand$Payload'\n  arg: T\n  Command$: RemeshCommand$<T>\n}\n\nexport type RemeshCommand$<T> = {\n  type: 'RemeshCommand$'\n  command$Id: number\n  command$Name: string\n  impl: (context: RemeshCommand$Context, arg$: Observable<T>) => Observable<RemeshCommandOutput>\n  (arg: T): RemeshCommand$Payload<T>\n  owner: RemeshDomainPayload<any, any>\n  inspectable: boolean\n}\n\nexport type RemeshCommand$Options<T> = {\n  name: string\n  inspectable?: boolean\n  impl: RemeshCommand$<T>['impl']\n}\nlet command$Uid = 0\n\nexport const RemeshCommand$ = <T = void>(options: RemeshCommand$Options<T>): RemeshCommand$<T> => {\n  const command$Id = command$Uid++\n\n  const Command$ = ((arg) => {\n    return {\n      type: 'RemeshCommand$Payload',\n      arg,\n      Command$,\n    }\n  }) as RemeshCommand$<T>\n\n  Command$.type = 'RemeshCommand$'\n  Command$.command$Id = command$Id\n  Command$.command$Name = options.name\n  Command$.impl = options.impl\n  Command$.owner = DefaultDomain()\n  Command$.inspectable = options.inspectable ?? true\n\n  return Command$\n}\n\nexport type RemeshExternPayload<T> = {\n  type: 'RemeshExternPayload'\n  Extern: RemeshExtern<T>\n  value: T\n}\n\nexport type RemeshExtern<T> = {\n  type: 'RemeshExtern'\n  externName: string\n  externId: number\n  default: T\n  impl(value: T): RemeshExternPayload<T>\n}\n\nexport type RemeshExternOptions<T> = {\n  name: RemeshExtern<T>['externName']\n  default: RemeshExtern<T>['default']\n}\n\nlet externUid = 0\nexport const RemeshExtern = <T = void>(options: RemeshExternOptions<T>): RemeshExtern<T> => {\n  const Extern: RemeshExtern<T> = {\n    type: 'RemeshExtern',\n    externName: options.name,\n    externId: externUid++,\n    default: options.default,\n    impl: (value) => {\n      return {\n        type: 'RemeshExternPayload',\n        Extern,\n        value,\n      }\n    },\n  }\n\n  return Extern\n}\n\nexport type RemeshDomainIgniteContext = {\n  get: RemeshInjectedContext['get']\n  peek: RemeshInjectedContext['peek']\n}\n\nexport type RemeshDomainIgniteFn = (context: RemeshDomainIgniteContext) => RemeshCommandOutput\n\nexport type RemeshDomainPreloadCommandOutput =\n  | RemeshStatePayload<any, any>\n  | RemeshCommandPayload<any>\n  | RemeshDomainPreloadCommandOutput[]\n  | null\n  | undefined\n  | void\n  | false\n\nexport type RemeshDomainPreloadOptions<T extends SerializableType> = {\n  key: string\n  query: (context: RemeshQueryContext) => Promise<T>\n  command: (context: RemeshCommandContext, data: T) => RemeshDomainPreloadCommandOutput\n}\n\nexport type RemeshDomainContext = {\n  // definitions\n  state<T>(options: RemeshDefaultStateOptions<T>): RemeshState<void, T>\n  state<T extends RemeshStateOptions<any, any>>(\n    options: T,\n  ): RemeshState<ExtractFirstArg<T['impl']>, ReturnType<T['impl']>>\n  state<T extends SerializableType, U>(options: RemeshDeferStateOptions<T, U>): RemeshState<Undefined2Void<T>, U>\n  event: typeof RemeshEvent\n  query: typeof RemeshQuery\n  command: typeof RemeshCommand\n  command$: typeof RemeshCommand$\n  ignite: (fn: RemeshDomainIgniteFn) => void\n  preload: <T extends SerializableType>(options: RemeshDomainPreloadOptions<T>) => void\n  // methods\n  getDomain: <T extends RemeshDomainDefinition, Arg extends SerializableType>(\n    domainPayload: RemeshDomainPayload<T, Arg>,\n  ) => T\n  getExtern: <T>(Extern: RemeshExtern<T>) => T\n}\n\nexport type RemeshDomainOutput = {\n  event: {\n    [key: string]: RemeshEvent<any, any>\n  }\n  query: {\n    [key: string]: RemeshQuery<any, any>\n  }\n  command: {\n    [key: string]: RemeshCommand<any> | RemeshCommand$<any>\n  }\n}\n\nexport type RemeshDomainDefinition = Partial<RemeshDomainOutput>\n\nexport type RemeshDomain<T extends RemeshDomainDefinition, Arg extends SerializableType> = {\n  type: 'RemeshDomain'\n  domainName: string\n  domainId: number\n  impl: (context: RemeshDomainContext, arg: Arg) => T\n  (arg: Arg): RemeshDomainPayload<T, Arg>\n  inspectable: boolean\n}\n\nexport type RemeshDomainPayload<T extends RemeshDomainDefinition, Arg extends SerializableType> = {\n  type: 'RemeshDomainPayload'\n  Domain: RemeshDomain<T, Arg>\n  arg: Arg\n}\n\nexport type RemeshDomainOptions<T extends RemeshDomainDefinition, Arg extends SerializableType> = {\n  name: string\n  inspectable?: boolean\n  impl: (context: RemeshDomainContext, arg?: Arg) => T\n}\n\nlet domainUid = 0\n\nexport const RemeshDomain = <T extends RemeshDomainOptions<any, any>>(\n  options: T,\n): RemeshDomain<ReturnType<T['impl']>, ExtractSecondArg<T['impl']>> => {\n  /**\n   * optimize for nullary domain\n   */\n  let cacheForNullary: RemeshDomainPayload<ReturnType<T['impl']>, ExtractSecondArg<T['impl']>> | null = null\n\n  const Domain: RemeshDomain<ReturnType<T['impl']>, ExtractSecondArg<T['impl']>> = ((arg) => {\n    if (arg === undefined && cacheForNullary) {\n      return cacheForNullary\n    }\n\n    const result: RemeshDomainPayload<ReturnType<T['impl']>, ExtractSecondArg<T['impl']>> = {\n      type: 'RemeshDomainPayload',\n      Domain,\n      arg,\n    }\n\n    if (arg === undefined) {\n      cacheForNullary = result\n    }\n\n    return result\n  }) as RemeshDomain<ReturnType<T['impl']>, ExtractSecondArg<T['impl']>>\n\n  Domain.type = 'RemeshDomain'\n  Domain.domainId = domainUid++\n  Domain.domainName = options.name\n  Domain.impl = options.impl\n  Domain.inspectable = options.inspectable ?? true\n\n  return Domain\n}\n\nexport const DefaultDomain: RemeshDomain<any, void> = RemeshDomain({\n  name: 'DefaultDomain',\n  impl: () => {\n    return {}\n  },\n})\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","export function isFunction(value) {\n    return typeof value === 'function';\n}\n//# sourceMappingURL=isFunction.js.map","export function createErrorClass(createImpl) {\n    var _super = function (instance) {\n        Error.call(instance);\n        instance.stack = new Error().stack;\n    };\n    var ctorFunc = createImpl(_super);\n    ctorFunc.prototype = Object.create(Error.prototype);\n    ctorFunc.prototype.constructor = ctorFunc;\n    return ctorFunc;\n}\n//# sourceMappingURL=createErrorClass.js.map","import { createErrorClass } from './createErrorClass';\nexport var UnsubscriptionError = createErrorClass(function (_super) {\n    return function UnsubscriptionErrorImpl(errors) {\n        _super(this);\n        this.message = errors\n            ? errors.length + \" errors occurred during unsubscription:\\n\" + errors.map(function (err, i) { return i + 1 + \") \" + err.toString(); }).join('\\n  ')\n            : '';\n        this.name = 'UnsubscriptionError';\n        this.errors = errors;\n    };\n});\n//# sourceMappingURL=UnsubscriptionError.js.map","export function arrRemove(arr, item) {\n    if (arr) {\n        var index = arr.indexOf(item);\n        0 <= index && arr.splice(index, 1);\n    }\n}\n//# sourceMappingURL=arrRemove.js.map","import { __read, __spreadArray, __values } from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { arrRemove } from './util/arrRemove';\nvar Subscription = (function () {\n    function Subscription(initialTeardown) {\n        this.initialTeardown = initialTeardown;\n        this.closed = false;\n        this._parentage = null;\n        this._finalizers = null;\n    }\n    Subscription.prototype.unsubscribe = function () {\n        var e_1, _a, e_2, _b;\n        var errors;\n        if (!this.closed) {\n            this.closed = true;\n            var _parentage = this._parentage;\n            if (_parentage) {\n                this._parentage = null;\n                if (Array.isArray(_parentage)) {\n                    try {\n                        for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {\n                            var parent_1 = _parentage_1_1.value;\n                            parent_1.remove(this);\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                }\n                else {\n                    _parentage.remove(this);\n                }\n            }\n            var initialFinalizer = this.initialTeardown;\n            if (isFunction(initialFinalizer)) {\n                try {\n                    initialFinalizer();\n                }\n                catch (e) {\n                    errors = e instanceof UnsubscriptionError ? e.errors : [e];\n                }\n            }\n            var _finalizers = this._finalizers;\n            if (_finalizers) {\n                this._finalizers = null;\n                try {\n                    for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {\n                        var finalizer = _finalizers_1_1.value;\n                        try {\n                            execFinalizer(finalizer);\n                        }\n                        catch (err) {\n                            errors = errors !== null && errors !== void 0 ? errors : [];\n                            if (err instanceof UnsubscriptionError) {\n                                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));\n                            }\n                            else {\n                                errors.push(err);\n                            }\n                        }\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n            }\n            if (errors) {\n                throw new UnsubscriptionError(errors);\n            }\n        }\n    };\n    Subscription.prototype.add = function (teardown) {\n        var _a;\n        if (teardown && teardown !== this) {\n            if (this.closed) {\n                execFinalizer(teardown);\n            }\n            else {\n                if (teardown instanceof Subscription) {\n                    if (teardown.closed || teardown._hasParent(this)) {\n                        return;\n                    }\n                    teardown._addParent(this);\n                }\n                (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);\n            }\n        }\n    };\n    Subscription.prototype._hasParent = function (parent) {\n        var _parentage = this._parentage;\n        return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _parentage = this._parentage;\n        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n    };\n    Subscription.prototype._removeParent = function (parent) {\n        var _parentage = this._parentage;\n        if (_parentage === parent) {\n            this._parentage = null;\n        }\n        else if (Array.isArray(_parentage)) {\n            arrRemove(_parentage, parent);\n        }\n    };\n    Subscription.prototype.remove = function (teardown) {\n        var _finalizers = this._finalizers;\n        _finalizers && arrRemove(_finalizers, teardown);\n        if (teardown instanceof Subscription) {\n            teardown._removeParent(this);\n        }\n    };\n    Subscription.EMPTY = (function () {\n        var empty = new Subscription();\n        empty.closed = true;\n        return empty;\n    })();\n    return Subscription;\n}());\nexport { Subscription };\nexport var EMPTY_SUBSCRIPTION = Subscription.EMPTY;\nexport function isSubscription(value) {\n    return (value instanceof Subscription ||\n        (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe)));\n}\nfunction execFinalizer(finalizer) {\n    if (isFunction(finalizer)) {\n        finalizer();\n    }\n    else {\n        finalizer.unsubscribe();\n    }\n}\n//# sourceMappingURL=Subscription.js.map","export var config = {\n    onUnhandledError: null,\n    onStoppedNotification: null,\n    Promise: undefined,\n    useDeprecatedSynchronousErrorHandling: false,\n    useDeprecatedNextContext: false,\n};\n//# sourceMappingURL=config.js.map","import { __read, __spreadArray } from \"tslib\";\nexport var timeoutProvider = {\n    setTimeout: function (handler, timeout) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        var delegate = timeoutProvider.delegate;\n        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {\n            return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));\n        }\n        return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));\n    },\n    clearTimeout: function (handle) {\n        var delegate = timeoutProvider.delegate;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);\n    },\n    delegate: undefined,\n};\n//# sourceMappingURL=timeoutProvider.js.map","import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\nexport function reportUnhandledError(err) {\n    timeoutProvider.setTimeout(function () {\n        var onUnhandledError = config.onUnhandledError;\n        if (onUnhandledError) {\n            onUnhandledError(err);\n        }\n        else {\n            throw err;\n        }\n    });\n}\n//# sourceMappingURL=reportUnhandledError.js.map","export function noop() { }\n//# sourceMappingURL=noop.js.map","export var COMPLETE_NOTIFICATION = (function () { return createNotification('C', undefined, undefined); })();\nexport function errorNotification(error) {\n    return createNotification('E', undefined, error);\n}\nexport function nextNotification(value) {\n    return createNotification('N', value, undefined);\n}\nexport function createNotification(kind, value, error) {\n    return {\n        kind: kind,\n        value: value,\n        error: error,\n    };\n}\n//# sourceMappingURL=NotificationFactories.js.map","import { config } from '../config';\nvar context = null;\nexport function errorContext(cb) {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n        var isRoot = !context;\n        if (isRoot) {\n            context = { errorThrown: false, error: null };\n        }\n        cb();\n        if (isRoot) {\n            var _a = context, errorThrown = _a.errorThrown, error = _a.error;\n            context = null;\n            if (errorThrown) {\n                throw error;\n            }\n        }\n    }\n    else {\n        cb();\n    }\n}\nexport function captureError(err) {\n    if (config.useDeprecatedSynchronousErrorHandling && context) {\n        context.errorThrown = true;\n        context.error = err;\n    }\n}\n//# sourceMappingURL=errorContext.js.map","import { __extends } from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    function Subscriber(destination) {\n        var _this = _super.call(this) || this;\n        _this.isStopped = false;\n        if (destination) {\n            _this.destination = destination;\n            if (isSubscription(destination)) {\n                destination.add(_this);\n            }\n        }\n        else {\n            _this.destination = EMPTY_OBSERVER;\n        }\n        return _this;\n    }\n    Subscriber.create = function (next, error, complete) {\n        return new SafeSubscriber(next, error, complete);\n    };\n    Subscriber.prototype.next = function (value) {\n        if (this.isStopped) {\n            handleStoppedNotification(nextNotification(value), this);\n        }\n        else {\n            this._next(value);\n        }\n    };\n    Subscriber.prototype.error = function (err) {\n        if (this.isStopped) {\n            handleStoppedNotification(errorNotification(err), this);\n        }\n        else {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    Subscriber.prototype.complete = function () {\n        if (this.isStopped) {\n            handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n        }\n        else {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.isStopped = true;\n            _super.prototype.unsubscribe.call(this);\n            this.destination = null;\n        }\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        try {\n            this.destination.error(err);\n        }\n        finally {\n            this.unsubscribe();\n        }\n    };\n    Subscriber.prototype._complete = function () {\n        try {\n            this.destination.complete();\n        }\n        finally {\n            this.unsubscribe();\n        }\n    };\n    return Subscriber;\n}(Subscription));\nexport { Subscriber };\nvar _bind = Function.prototype.bind;\nfunction bind(fn, thisArg) {\n    return _bind.call(fn, thisArg);\n}\nvar ConsumerObserver = (function () {\n    function ConsumerObserver(partialObserver) {\n        this.partialObserver = partialObserver;\n    }\n    ConsumerObserver.prototype.next = function (value) {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.next) {\n            try {\n                partialObserver.next(value);\n            }\n            catch (error) {\n                handleUnhandledError(error);\n            }\n        }\n    };\n    ConsumerObserver.prototype.error = function (err) {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.error) {\n            try {\n                partialObserver.error(err);\n            }\n            catch (error) {\n                handleUnhandledError(error);\n            }\n        }\n        else {\n            handleUnhandledError(err);\n        }\n    };\n    ConsumerObserver.prototype.complete = function () {\n        var partialObserver = this.partialObserver;\n        if (partialObserver.complete) {\n            try {\n                partialObserver.complete();\n            }\n            catch (error) {\n                handleUnhandledError(error);\n            }\n        }\n    };\n    return ConsumerObserver;\n}());\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(observerOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        var partialObserver;\n        if (isFunction(observerOrNext) || !observerOrNext) {\n            partialObserver = {\n                next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined,\n                error: error !== null && error !== void 0 ? error : undefined,\n                complete: complete !== null && complete !== void 0 ? complete : undefined,\n            };\n        }\n        else {\n            var context_1;\n            if (_this && config.useDeprecatedNextContext) {\n                context_1 = Object.create(observerOrNext);\n                context_1.unsubscribe = function () { return _this.unsubscribe(); };\n                partialObserver = {\n                    next: observerOrNext.next && bind(observerOrNext.next, context_1),\n                    error: observerOrNext.error && bind(observerOrNext.error, context_1),\n                    complete: observerOrNext.complete && bind(observerOrNext.complete, context_1),\n                };\n            }\n            else {\n                partialObserver = observerOrNext;\n            }\n        }\n        _this.destination = new ConsumerObserver(partialObserver);\n        return _this;\n    }\n    return SafeSubscriber;\n}(Subscriber));\nexport { SafeSubscriber };\nfunction handleUnhandledError(error) {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n        captureError(error);\n    }\n    else {\n        reportUnhandledError(error);\n    }\n}\nfunction defaultErrorHandler(err) {\n    throw err;\n}\nfunction handleStoppedNotification(notification, subscriber) {\n    var onStoppedNotification = config.onStoppedNotification;\n    onStoppedNotification && timeoutProvider.setTimeout(function () { return onStoppedNotification(notification, subscriber); });\n}\nexport var EMPTY_OBSERVER = {\n    closed: true,\n    next: noop,\n    error: defaultErrorHandler,\n    complete: noop,\n};\n//# sourceMappingURL=Subscriber.js.map","export var observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();\n//# sourceMappingURL=observable.js.map","export function identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map","import { identity } from './identity';\nexport function pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexport function pipeFromArray(fns) {\n    if (fns.length === 0) {\n        return identity;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map","import { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription } from './Subscription';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\nimport { errorContext } from './util/errorContext';\nvar Observable = (function () {\n    function Observable(subscribe) {\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var _this = this;\n        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n        errorContext(function () {\n            var _a = _this, operator = _a.operator, source = _a.source;\n            subscriber.add(operator\n                ?\n                    operator.call(subscriber, source)\n                : source\n                    ?\n                        _this._subscribe(subscriber)\n                    :\n                        _this._trySubscribe(subscriber));\n        });\n        return subscriber;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.error(err);\n        }\n    };\n    Observable.prototype.forEach = function (next, promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var subscriber = new SafeSubscriber({\n                next: function (value) {\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscriber.unsubscribe();\n                    }\n                },\n                error: reject,\n                complete: resolve,\n            });\n            _this.subscribe(subscriber);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        var _a;\n        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);\n    };\n    Observable.prototype[Symbol_observable] = function () {\n        return this;\n    };\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i] = arguments[_i];\n        }\n        return pipeFromArray(operations)(this);\n    };\n    Observable.prototype.toPromise = function (promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexport { Observable };\nfunction getPromiseCtor(promiseCtor) {\n    var _a;\n    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;\n}\nfunction isObserver(value) {\n    return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\nfunction isSubscriber(value) {\n    return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));\n}\n//# sourceMappingURL=Observable.js.map","import { createErrorClass } from './createErrorClass';\nexport var ObjectUnsubscribedError = createErrorClass(function (_super) {\n    return function ObjectUnsubscribedErrorImpl() {\n        _super(this);\n        this.name = 'ObjectUnsubscribedError';\n        this.message = 'object unsubscribed';\n    };\n});\n//# sourceMappingURL=ObjectUnsubscribedError.js.map","import { __extends, __values } from \"tslib\";\nimport { Observable } from './Observable';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\nvar Subject = (function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        var _this = _super.call(this) || this;\n        _this.closed = false;\n        _this.currentObservers = null;\n        _this.observers = [];\n        _this.isStopped = false;\n        _this.hasError = false;\n        _this.thrownError = null;\n        return _this;\n    }\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype._throwIfClosed = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n    };\n    Subject.prototype.next = function (value) {\n        var _this = this;\n        errorContext(function () {\n            var e_1, _a;\n            _this._throwIfClosed();\n            if (!_this.isStopped) {\n                if (!_this.currentObservers) {\n                    _this.currentObservers = Array.from(_this.observers);\n                }\n                try {\n                    for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {\n                        var observer = _c.value;\n                        observer.next(value);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n            }\n        });\n    };\n    Subject.prototype.error = function (err) {\n        var _this = this;\n        errorContext(function () {\n            _this._throwIfClosed();\n            if (!_this.isStopped) {\n                _this.hasError = _this.isStopped = true;\n                _this.thrownError = err;\n                var observers = _this.observers;\n                while (observers.length) {\n                    observers.shift().error(err);\n                }\n            }\n        });\n    };\n    Subject.prototype.complete = function () {\n        var _this = this;\n        errorContext(function () {\n            _this._throwIfClosed();\n            if (!_this.isStopped) {\n                _this.isStopped = true;\n                var observers = _this.observers;\n                while (observers.length) {\n                    observers.shift().complete();\n                }\n            }\n        });\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = this.closed = true;\n        this.observers = this.currentObservers = null;\n    };\n    Object.defineProperty(Subject.prototype, \"observed\", {\n        get: function () {\n            var _a;\n            return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Subject.prototype._trySubscribe = function (subscriber) {\n        this._throwIfClosed();\n        return _super.prototype._trySubscribe.call(this, subscriber);\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        this._throwIfClosed();\n        this._checkFinalizedStatuses(subscriber);\n        return this._innerSubscribe(subscriber);\n    };\n    Subject.prototype._innerSubscribe = function (subscriber) {\n        var _this = this;\n        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;\n        if (hasError || isStopped) {\n            return EMPTY_SUBSCRIPTION;\n        }\n        this.currentObservers = null;\n        observers.push(subscriber);\n        return new Subscription(function () {\n            _this.currentObservers = null;\n            arrRemove(observers, subscriber);\n        });\n    };\n    Subject.prototype._checkFinalizedStatuses = function (subscriber) {\n        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;\n        if (hasError) {\n            subscriber.error(thrownError);\n        }\n        else if (isStopped) {\n            subscriber.complete();\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable));\nexport { Subject };\nvar AnonymousSubject = (function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        var _this = _super.call(this) || this;\n        _this.destination = destination;\n        _this.source = source;\n        return _this;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var _a, _b;\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var _a, _b;\n        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n    };\n    return AnonymousSubject;\n}(Subject));\nexport { AnonymousSubject };\n//# sourceMappingURL=Subject.js.map","import {\n  RemeshDomain,\n  RemeshCommand$Payload,\n  RemeshCommandPayload,\n  RemeshEventPayload,\n  SerializableType,\n} from './remesh'\n\nimport type {\n  RemeshStoreOptions,\n  RemeshDomainStorage,\n  RemeshStateStorage,\n  RemeshQueryStorage,\n  RemeshStore,\n  RemeshStoreInspector,\n} from './store'\n\nexport type RemeshDomainStorageEventData<T, U extends SerializableType> = {\n  type: 'Domain::Created' | 'Domain::Discarded' | 'Domain::Reused'\n  storage: RemeshDomainStorage<T, U>\n}\n\nexport type RemeshStateStorageEventData<T extends SerializableType, U> = {\n  type: 'State::Created' | 'State::Updated' | 'State::Discarded' | 'State::Reused'\n  storage: RemeshStateStorage<T, U>\n}\n\nexport type RemeshQueryStorageEventData<T extends SerializableType, U> = {\n  type: 'Query::Created' | 'Query::Updated' | 'Query::Discarded' | 'Query::Reused'\n  storage: RemeshQueryStorage<T, U>\n}\n\nexport type RemeshEventEmittedEventData<T, U> = {\n  type: 'Event::Emitted'\n  payload: RemeshEventPayload<T, U>\n}\n\nexport type RemeshCommandReceivedEventData<T> = {\n  type: 'Command::Received'\n  payload: RemeshCommandPayload<T>\n}\n\nexport type RemeshCommand$ReceivedEventData<T> = {\n  type: 'Command$::Received'\n  payload: RemeshCommand$Payload<T>\n}\n\nexport const InspectorType = {\n  DomainCreated: 'Domain::Created',\n  DomainDiscarded: 'Domain::Discarded',\n  DomainReused: 'Domain::Reused',\n  StateCreated: 'State::Created',\n  StateUpdated: 'State::Updated',\n  StateDiscarded: 'State::Discarded',\n  StateReused: 'State::Reused',\n  QueryCreated: 'Query::Created',\n  QueryUpdated: 'Query::Updated',\n  QueryDiscarded: 'Query::Discarded',\n  QueryReused: 'Query::Reused',\n  EventEmitted: 'Event::Emitted',\n  CommandReceived: 'Command::Received',\n  Command$Received: 'Command$::Received',\n} as const\n\nexport const RemeshInspectorDomain = RemeshDomain({\n  name: 'RemeshInspector',\n  impl: (domain) => {\n    const RemeshDomainStorageEvent = domain.event<RemeshDomainStorageEventData<any, any>>({\n      name: 'RemeshDomainStorageEvent',\n    })\n\n    const RemeshStateStorageEvent = domain.event<RemeshStateStorageEventData<any, any>>({\n      name: 'RemeshStateStorageEvent',\n    })\n\n    const RemeshQueryStorageEvent = domain.event<RemeshQueryStorageEventData<any, any>>({\n      name: 'RemeshQueryStorageEvent',\n    })\n\n    const RemeshEventEmittedEvent = domain.event<RemeshEventEmittedEventData<any, any>>({\n      name: 'RemeshEventEmitted',\n    })\n\n    const RemeshCommandReceivedEvent = domain.event<RemeshCommandReceivedEventData<any>>({\n      name: 'RemeshCommandReceived',\n    })\n\n    const RemeshCommand$ReceivedEvent = domain.event<RemeshCommand$ReceivedEventData<any>>({\n      name: 'RemeshCommand$Received',\n    })\n\n    return {\n      event: {\n        RemeshDomainStorageEvent,\n        RemeshStateStorageEvent,\n        RemeshQueryStorageEvent,\n        RemeshEventEmittedEvent,\n        RemeshCommandReceivedEvent,\n        RemeshCommand$ReceivedEvent,\n      },\n    }\n  },\n})\n\nexport type InspectInput = {\n  inspectable: boolean\n  owner?: {\n    Domain: {\n      inspectable: boolean\n    }\n  }\n}\n\nexport const isInspectable = (input: InspectInput): boolean => {\n  if (input.owner) {\n    return input.owner.Domain.inspectable && input.inspectable\n  }\n  return input.inspectable\n}\n\nconst initInspectors = (options: RemeshStoreOptions) => {\n  return (options.inspectors ?? [])\n    .filter((inspector): inspector is RemeshStoreInspector => !!inspector)\n    .map((inspector) => {\n      const { inspectors, ...rest } = options\n      return inspector(rest)\n    })\n}\n\nexport const createInspectorManager = (options: RemeshStoreOptions) => {\n  let inspectors: RemeshStore[] | null = null\n\n  const getInspectors = (): RemeshStore[] => {\n    if (!inspectors) {\n      inspectors = initInspectors(options)\n    }\n\n    return inspectors\n  }\n\n  const destroyInspectors = () => {\n    if (inspectors) {\n      for (const inspector of inspectors) {\n        inspector.discard()\n      }\n\n      inspectors = null\n    }\n  }\n\n  const inspectDomainStorage = <T, U extends SerializableType>(\n    type: RemeshDomainStorageEventData<T, U>['type'],\n    domainStorage: RemeshDomainStorage<T, U>,\n  ) => {\n    if (isInspectable(domainStorage.Domain)) {\n      for (const inspector of getInspectors()) {\n        const inspectorDomain = inspector.getDomain(RemeshInspectorDomain())\n        const event = inspectorDomain.event.RemeshDomainStorageEvent({\n          type,\n          storage: domainStorage,\n        })\n        inspector.emitEvent(event)\n      }\n    }\n  }\n\n  const inspectStateStorage = <T extends SerializableType, U>(\n    type: RemeshStateStorageEventData<T, U>['type'],\n    stateStorage: RemeshStateStorage<T, U>,\n  ) => {\n    if (isInspectable(stateStorage.State)) {\n      for (const inspector of getInspectors()) {\n        const inspectorDomain = inspector.getDomain(RemeshInspectorDomain())\n        const event = inspectorDomain.event.RemeshStateStorageEvent({\n          type,\n          storage: stateStorage,\n        })\n        inspector.emitEvent(event)\n      }\n    }\n  }\n\n  const inspectQueryStorage = <T extends SerializableType, U>(\n    type: RemeshQueryStorageEventData<T, U>['type'],\n    queryStorage: RemeshQueryStorage<T, U>,\n  ) => {\n    if (isInspectable(queryStorage.Query)) {\n      for (const inspector of getInspectors()) {\n        const inspectorDomain = inspector.getDomain(RemeshInspectorDomain())\n        const event = inspectorDomain.event.RemeshQueryStorageEvent({\n          type,\n          storage: queryStorage,\n        })\n        inspector.emitEvent(event)\n      }\n    }\n  }\n\n  const inspectEventEmitted = <T, U>(\n    type: RemeshEventEmittedEventData<T, U>['type'],\n    eventPayload: RemeshEventPayload<T, U>,\n  ) => {\n    if (isInspectable(eventPayload.Event)) {\n      for (const inspector of getInspectors()) {\n        const inspectorDomain = inspector.getDomain(RemeshInspectorDomain())\n        const event = inspectorDomain.event.RemeshEventEmittedEvent({\n          type,\n          payload: eventPayload,\n        })\n        inspector.emitEvent(event)\n      }\n    }\n  }\n\n  const inspectCommandReceived = <T>(\n    type: RemeshCommandReceivedEventData<T>['type'],\n    commandPayload: RemeshCommandPayload<T>,\n  ) => {\n    if (isInspectable(commandPayload.Command)) {\n      for (const inspector of getInspectors()) {\n        const inspectorDomain = inspector.getDomain(RemeshInspectorDomain())\n        const event = inspectorDomain.event.RemeshCommandReceivedEvent({\n          type,\n          payload: commandPayload,\n        })\n        inspector.emitEvent(event)\n      }\n    }\n  }\n\n  const inspectCommand$Received = <T>(\n    type: RemeshCommand$ReceivedEventData<T>['type'],\n    command$Payload: RemeshCommand$Payload<T>,\n  ) => {\n    if (isInspectable(command$Payload.Command$)) {\n      for (const inspector of getInspectors()) {\n        const inspectorDomain = inspector.getDomain(RemeshInspectorDomain())\n        const event = inspectorDomain.event.RemeshCommand$ReceivedEvent({\n          type,\n          payload: command$Payload,\n        })\n        inspector.emitEvent(event)\n      }\n    }\n  }\n\n  return {\n    destroyInspectors,\n    inspectDomainStorage,\n    inspectStateStorage,\n    inspectQueryStorage,\n    inspectEventEmitted,\n    inspectCommandReceived,\n    inspectCommand$Received,\n  }\n}\n","import { Observable, Observer, Subject, Subscription } from 'rxjs'\r\n\r\nimport {\r\n  RemeshDomainIgniteFn,\r\n  RemeshCommand,\r\n  RemeshCommand$,\r\n  RemeshCommand$Context,\r\n  RemeshCommand$Payload,\r\n  RemeshCommandContext,\r\n  RemeshCommandOutput,\r\n  RemeshCommandPayload,\r\n  RemeshDefaultState,\r\n  RemeshDefaultStateOptions,\r\n  RemeshDeferState,\r\n  RemeshDeferStateOptions,\r\n  RemeshDomain,\r\n  RemeshDomainContext,\r\n  RemeshDomainDefinition,\r\n  RemeshDomainPayload,\r\n  RemeshEvent,\r\n  RemeshEventOptions,\r\n  RemeshEventPayload,\r\n  RemeshExtern,\r\n  RemeshExternPayload,\r\n  RemeshInjectedContext,\r\n  RemeshQuery,\r\n  RemeshQueryContext,\r\n  RemeshQueryPayload,\r\n  RemeshState,\r\n  RemeshStateItem,\r\n  RemeshStateOptions,\r\n  RemeshStatePayload,\r\n  RemeshValuePlaceholder,\r\n  SerializableType,\r\n  RemeshDomainPreloadOptions,\r\n} from './remesh'\r\n\r\nimport { createInspectorManager, InspectorType } from './inspector'\r\n\r\nexport type PreloadedState = Record<string, SerializableType>\r\n\r\nexport type RemeshStore = ReturnType<typeof RemeshStore>\r\n\r\nlet uid = 0\r\n\r\nexport type RemeshStateStorage<T extends SerializableType, U> = {\r\n  id: number\r\n  type: 'RemeshStateStorage'\r\n  State: RemeshState<T, U>\r\n  arg: T\r\n  key: string\r\n  currentState: U | RemeshValuePlaceholder\r\n  downstreamSet: Set<RemeshQueryStorage<any, any>>\r\n}\r\n\r\nexport type RemeshQueryStorage<T extends SerializableType, U> = {\r\n  id: number\r\n  type: 'RemeshQueryStorage'\r\n  Query: RemeshQuery<T, U>\r\n  arg: T\r\n  key: string\r\n  currentValue: U | RemeshValuePlaceholder\r\n  upstreamSet: Set<RemeshQueryStorage<any, any> | RemeshStateStorage<any, any>>\r\n  downstreamSet: Set<RemeshQueryStorage<any, any>>\r\n  subject: Subject<U>\r\n  observable: Observable<U>\r\n  refCount: number\r\n  status: 'default' | 'wip' | 'updated'\r\n  wipUpstreamSet: Set<RemeshQueryStorage<any, any> | RemeshStateStorage<any, any>>\r\n}\r\n\r\nexport type RemeshEventStorage<T = unknown, U = T> = {\r\n  id: number\r\n  type: 'RemeshEventStorage'\r\n  Event: RemeshEvent<T, U>\r\n  subject: Subject<U>\r\n  observable: Observable<U>\r\n  refCount: number\r\n}\r\n\r\nexport type RemeshCommand$Storage<T> = {\r\n  id: number\r\n  type: 'RemeshCommand$Storage'\r\n  Command$: RemeshCommand$<T>\r\n  subject: Subject<T>\r\n  observable: Observable<T>\r\n  subscription?: Subscription\r\n}\r\n\r\nexport type RemeshDomainStorage<T extends RemeshDomainDefinition, Arg extends SerializableType> = {\r\n  id: number\r\n  type: 'RemeshDomainStorage'\r\n  Domain: RemeshDomain<T, Arg>\r\n  arg: Arg\r\n  key: string\r\n  domain: T\r\n  domainContext: RemeshDomainContext\r\n  domainOutput?: BindingDomainOutput<T>\r\n  domainPayload: RemeshDomainPayload<T, Arg>\r\n  upstreamSet: Set<RemeshDomainStorage<any, any>>\r\n  downstreamSet: Set<RemeshDomainStorage<any, any>>\r\n  domainSubscriptionSet: Set<Subscription>\r\n  upstreamSubscriptionSet: Set<Subscription>\r\n  igniteFnSet: Set<RemeshDomainIgniteFn>\r\n  preloadOptionsList: RemeshDomainPreloadOptions<any>[]\r\n  preloadedPromise?: Promise<void>\r\n  preloadedState: PreloadedState\r\n  stateMap: Map<string, RemeshStateStorage<any, any>>\r\n  queryMap: Map<string, RemeshQueryStorage<any, any>>\r\n  eventMap: Map<RemeshEvent<any, any>, RemeshEventStorage<any, any>>\r\n  command$Map: Map<RemeshCommand$<any>, RemeshCommand$Storage<any>>\r\n  running: boolean\r\n}\r\n\r\nexport type RemeshExternStorage<T> = {\r\n  id: number\r\n  type: 'RemeshExternStorage'\r\n  Extern: RemeshExtern<T>\r\n  currentValue: T\r\n}\r\n\r\nexport type RemeshStoreInspector = typeof RemeshStore\r\n\r\nexport type RemeshStoreOptions = {\r\n  name?: string\r\n  externs?: RemeshExternPayload<any>[]\r\n  inspectors?: (RemeshStoreInspector | false | undefined | null)[]\r\n  preloadedState?: PreloadedState\r\n}\r\n\r\nexport type BindingCommand<T extends RemeshDomainDefinition['command']> = T extends {}\r\n  ? {\r\n      [key in keyof T]: (...args: Parameters<T[key]>) => void\r\n    }\r\n  : never\r\n\r\nexport type BindingDomainOutput<T extends RemeshDomainDefinition> = Omit<T, 'command'> & {\r\n  command: BindingCommand<T['command']>\r\n}\r\n\r\ntype PendingClearItem =\r\n  | RemeshStateStorage<any, any>\r\n  | RemeshDomainStorage<any, any>\r\n  | RemeshEventStorage<any, any>\r\n  | RemeshQueryStorage<any, any>\r\n\r\nexport const RemeshStore = (options?: RemeshStoreOptions) => {\r\n  const config = {\r\n    ...options,\r\n  }\r\n\r\n  const inspectorManager = createInspectorManager(config)\r\n\r\n  const pendingEmitSet = new Set<RemeshQueryStorage<any, any> | RemeshEventPayload<any, any>>()\r\n  /**\r\n   * Leaf means that the query storage has no downstream query storages\r\n   */\r\n  const pendingLeafSet = new Set<RemeshQueryStorage<any, any>>()\r\n  const pendingClearSet = new Set<PendingClearItem>()\r\n\r\n  const domainStorageMap = new Map<string, RemeshDomainStorage<any, any>>()\r\n\r\n  const externStorageWeakMap = new WeakMap<RemeshExtern<any>, RemeshExternStorage<any>>()\r\n\r\n  const getExternValue = <T>(Extern: RemeshExtern<T>): T => {\r\n    for (const payload of config.externs ?? []) {\r\n      if (payload.Extern === Extern) {\r\n        return payload.value\r\n      }\r\n    }\r\n    return Extern.default\r\n  }\r\n\r\n  const getExternStorage = <T>(Extern: RemeshExtern<T>): RemeshExternStorage<T> => {\r\n    const externStorage = externStorageWeakMap.get(Extern)\r\n\r\n    if (externStorage) {\r\n      return externStorage\r\n    }\r\n\r\n    const currentValue = getExternValue(Extern)\r\n\r\n    const currentExternStorage: RemeshExternStorage<T> = {\r\n      id: uid++,\r\n      type: 'RemeshExternStorage',\r\n      Extern,\r\n      currentValue,\r\n    }\r\n\r\n    externStorageWeakMap.set(Extern, currentExternStorage)\r\n\r\n    return currentExternStorage\r\n  }\r\n\r\n  const getExternCurrentValue = <T>(Extern: RemeshExtern<T>): T => {\r\n    return getExternStorage(Extern).currentValue\r\n  }\r\n\r\n  const storageKeyWeakMap = new WeakMap<\r\n    RemeshQueryPayload<any, any> | RemeshStateItem<any, any> | RemeshDomainPayload<any, any>,\r\n    string\r\n  >()\r\n\r\n  const getStateStorageKey = <T extends SerializableType, U>(stateItem: RemeshStateItem<T, U>): string => {\r\n    const key = storageKeyWeakMap.get(stateItem)\r\n\r\n    if (key) {\r\n      return key\r\n    }\r\n\r\n    const stateName = stateItem.State.stateName\r\n    const argString = JSON.stringify(stateItem.arg) ?? ''\r\n    const keyString = `State/${stateItem.State.stateId}/${stateName}:${argString}`\r\n\r\n    storageKeyWeakMap.set(stateItem, keyString)\r\n\r\n    return keyString\r\n  }\r\n\r\n  const getQueryStorageKey = <T extends SerializableType, U>(queryPayload: RemeshQueryPayload<T, U>): string => {\r\n    const key = storageKeyWeakMap.get(queryPayload)\r\n\r\n    if (key) {\r\n      return key\r\n    }\r\n\r\n    const queryName = queryPayload.Query.queryName\r\n    const argString = JSON.stringify(queryPayload.arg) ?? ''\r\n    const keyString = `Query/${queryPayload.Query.queryId}/${queryName}:${argString}`\r\n\r\n    storageKeyWeakMap.set(queryPayload, keyString)\r\n\r\n    return keyString\r\n  }\r\n\r\n  const getDomainStorageKey = <T extends RemeshDomainDefinition, Arg extends SerializableType>(\r\n    domainPayload: RemeshDomainPayload<T, Arg>,\r\n  ): string => {\r\n    const key = storageKeyWeakMap.get(domainPayload)\r\n\r\n    if (key) {\r\n      return key\r\n    }\r\n\r\n    const domainName = domainPayload.Domain.domainName\r\n    const argString = JSON.stringify(domainPayload.arg) ?? ''\r\n    const keyString = `Domain/${domainPayload.Domain.domainId}/${domainName}:${argString}`\r\n\r\n    storageKeyWeakMap.set(domainPayload, keyString)\r\n\r\n    return keyString\r\n  }\r\n\r\n  const getStorageKey = <T extends SerializableType, U>(\r\n    input: RemeshStateItem<T, U> | RemeshQueryPayload<T, U> | RemeshDomainPayload<U, T>,\r\n  ): string => {\r\n    if (input.type === 'RemeshStateItem') {\r\n      return getStateStorageKey(input)\r\n    } else if (input.type === 'RemeshQueryPayload') {\r\n      return getQueryStorageKey(input)\r\n    }\r\n    return getDomainStorageKey(input)\r\n  }\r\n\r\n  const getStateFromStorage = <T extends SerializableType, U>(storage: RemeshStateStorage<T, U>): U => {\r\n    if (storage.currentState === RemeshValuePlaceholder) {\r\n      throw new Error(`${storage.key} is not found`)\r\n    }\r\n    return storage.currentState\r\n  }\r\n\r\n  const stateStorageWeakMap = new WeakMap<RemeshStateItem<any, any>, RemeshStateStorage<any, any>>()\r\n\r\n  const getStateValue = <T extends SerializableType, U>(State: RemeshState<T, U>, arg: T) => {\r\n    return State.defer ? RemeshValuePlaceholder : State.impl(arg)\r\n  }\r\n\r\n  const createStateStorage = <T extends SerializableType, U>(\r\n    stateItem: RemeshStateItem<T, U>,\r\n  ): RemeshStateStorage<T, U> => {\r\n    const domainStorage = getDomainStorage(stateItem.State.owner)\r\n    const key = getStateStorageKey(stateItem)\r\n\r\n    const currentState = getStateValue(stateItem.State, stateItem.arg)\r\n\r\n    const newStateStorage: RemeshStateStorage<T, U> = {\r\n      id: uid++,\r\n      type: 'RemeshStateStorage',\r\n      State: stateItem.State,\r\n      arg: stateItem.arg,\r\n      key,\r\n      currentState,\r\n      downstreamSet: new Set(),\r\n    }\r\n\r\n    domainStorage.stateMap.set(key, newStateStorage)\r\n    stateStorageWeakMap.set(stateItem, newStateStorage)\r\n\r\n    inspectorManager.inspectStateStorage(InspectorType.StateCreated, newStateStorage)\r\n\r\n    return newStateStorage\r\n  }\r\n\r\n  const restoreStateStorage = <T extends SerializableType, U>(stateStorage: RemeshStateStorage<T, U>) => {\r\n    const domainStorage = getDomainStorage(stateStorage.State.owner)\r\n\r\n    if (domainStorage.stateMap.has(stateStorage.key)) {\r\n      return\r\n    }\r\n\r\n    stateStorage.currentState = getStateValue(stateStorage.State, stateStorage.arg)\r\n    domainStorage.stateMap.set(stateStorage.key, stateStorage)\r\n    inspectorManager.inspectStateStorage(InspectorType.StateReused, stateStorage)\r\n  }\r\n\r\n  const getStateStorage = <T extends SerializableType, U>(\r\n    stateItem: RemeshStateItem<T, U>,\r\n  ): RemeshStateStorage<T, U> => {\r\n    const domainStorage = getDomainStorage(stateItem.State.owner)\r\n    const key = getStateStorageKey(stateItem)\r\n    const stateStorage = domainStorage.stateMap.get(key)\r\n\r\n    if (stateStorage) {\r\n      return stateStorage as RemeshStateStorage<T, U>\r\n    }\r\n\r\n    const cachedStorage = stateStorageWeakMap.get(stateItem)\r\n\r\n    if (cachedStorage) {\r\n      restoreStateStorage(cachedStorage)\r\n      return cachedStorage\r\n    }\r\n\r\n    return createStateStorage(stateItem)\r\n  }\r\n\r\n  const eventStorageWeakMap = new WeakMap<RemeshEvent<any, any>, RemeshEventStorage<any, any>>()\r\n\r\n  const createEventStorage = <T, U = T>(Event: RemeshEvent<T, U>): RemeshEventStorage<T, U> => {\r\n    const domainStorage = getDomainStorage(Event.owner)\r\n\r\n    const subject = new Subject<U>()\r\n\r\n    const observable = new Observable<U>((subscriber) => {\r\n      const subscription = subject.subscribe(subscriber)\r\n      currentEventStorage.refCount += 1\r\n      return () => {\r\n        subscription.unsubscribe()\r\n        currentEventStorage.refCount -= 1\r\n        pendingClearSet.add(currentEventStorage)\r\n        clearPendingStorageSetIfNeeded()\r\n      }\r\n    })\r\n\r\n    const cachedStorage = eventStorageWeakMap.get(Event)\r\n\r\n    const currentEventStorage = Object.assign(cachedStorage ?? {}, {\r\n      type: 'RemeshEventStorage',\r\n      Event,\r\n      subject,\r\n      observable,\r\n      refCount: 0,\r\n    } as RemeshEventStorage<T, U>)\r\n\r\n    domainStorage.eventMap.set(Event, currentEventStorage)\r\n    eventStorageWeakMap.set(Event, currentEventStorage)\r\n\r\n    return currentEventStorage\r\n  }\r\n\r\n  const getMaybeEventStorage = <T, U = T>(Event: RemeshEvent<T, U>): RemeshEventStorage<T, U> | null => {\r\n    const domainStorage = getDomainStorage(Event.owner)\r\n    const eventStorage = domainStorage.eventMap.get(Event)\r\n\r\n    if (eventStorage) {\r\n      return eventStorage as RemeshEventStorage<T, U>\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  const getEventStorage = <T, U = T>(Event: RemeshEvent<T, U>): RemeshEventStorage<T, U> => {\r\n    const eventStorage = getMaybeEventStorage(Event)\r\n\r\n    if (eventStorage) {\r\n      return eventStorage\r\n    }\r\n\r\n    return createEventStorage(Event)\r\n  }\r\n\r\n  const queryStorageWeakMap = new WeakMap<RemeshQueryPayload<any, any>, RemeshQueryStorage<any, any>>()\r\n\r\n  const createQuery$ = <T extends SerializableType, U>(get: () => RemeshQueryStorage<T, U>) => {\r\n    const subject = new Subject<U>()\r\n\r\n    const observable = new Observable<U>((subscriber) => {\r\n      const subscription = subject.subscribe(subscriber)\r\n      const queryStorage = get()\r\n      queryStorage.refCount += 1\r\n\r\n      return () => {\r\n        subscription.unsubscribe()\r\n        queryStorage.refCount -= 1\r\n        pendingClearSet.add(queryStorage)\r\n        clearPendingStorageSetIfNeeded()\r\n      }\r\n    })\r\n\r\n    return {\r\n      subject,\r\n      observable,\r\n    }\r\n  }\r\n\r\n  const createQueryStorage = <T extends SerializableType, U>(\r\n    queryPayload: RemeshQueryPayload<T, U>,\r\n  ): RemeshQueryStorage<T, U> => {\r\n    const domainStorage = getDomainStorage(queryPayload.Query.owner)\r\n    const key = getQueryStorageKey(queryPayload)\r\n\r\n    const { subject, observable } = createQuery$(() => currentQueryStorage)\r\n    const upstreamSet: RemeshQueryStorage<T, U>['upstreamSet'] = new Set()\r\n\r\n    const currentQueryStorage: RemeshQueryStorage<T, U> = {\r\n      id: uid++,\r\n      type: 'RemeshQueryStorage',\r\n      Query: queryPayload.Query,\r\n      arg: queryPayload.arg,\r\n      currentValue: RemeshValuePlaceholder,\r\n      key,\r\n      upstreamSet,\r\n      downstreamSet: new Set(),\r\n      subject,\r\n      observable,\r\n      refCount: 0,\r\n      status: 'default',\r\n      wipUpstreamSet: new Set(),\r\n    }\r\n\r\n    const { Query } = queryPayload\r\n\r\n    const queryContext: RemeshQueryContext = {\r\n      get: (input) => {\r\n        if (currentQueryStorage.upstreamSet !== upstreamSet) {\r\n          return remeshInjectedContext.get(input)\r\n        }\r\n\r\n        if (input.type === 'RemeshStateItem') {\r\n          const upstreamStateStorage = getStateStorage(input)\r\n\r\n          currentQueryStorage.upstreamSet.add(upstreamStateStorage)\r\n          upstreamStateStorage.downstreamSet.add(currentQueryStorage)\r\n\r\n          return remeshInjectedContext.get(input)\r\n        }\r\n\r\n        if (input.type === 'RemeshQueryPayload') {\r\n          const upstreamQueryStorage = getQueryStorage(input)\r\n\r\n          currentQueryStorage.upstreamSet.add(upstreamQueryStorage)\r\n          upstreamQueryStorage.downstreamSet.add(currentQueryStorage)\r\n\r\n          return remeshInjectedContext.get(input)\r\n        }\r\n\r\n        return remeshInjectedContext.get(input)\r\n      },\r\n      peek: remeshInjectedContext.peek,\r\n    }\r\n\r\n    const currentValue = Query.impl(queryContext, queryPayload.arg)\r\n\r\n    currentQueryStorage.currentValue = currentValue\r\n\r\n    domainStorage.queryMap.set(key, currentQueryStorage)\r\n    queryStorageWeakMap.set(queryPayload, currentQueryStorage)\r\n\r\n    inspectorManager.inspectQueryStorage(InspectorType.QueryCreated, currentQueryStorage)\r\n\r\n    return currentQueryStorage\r\n  }\r\n\r\n  const restoreQueryStorage = <T extends SerializableType, U>(queryStorage: RemeshQueryStorage<T, U>) => {\r\n    const domainStorage = getDomainStorage(queryStorage.Query.owner)\r\n\r\n    if (domainStorage.queryMap.has(queryStorage.key)) {\r\n      return\r\n    }\r\n\r\n    const { subject, observable } = createQuery$(() => queryStorage)\r\n\r\n    queryStorage.status = 'default'\r\n    queryStorage.subject = subject\r\n    queryStorage.observable = observable\r\n    domainStorage.queryMap.set(queryStorage.key, queryStorage)\r\n\r\n    for (const upstream of queryStorage.upstreamSet) {\r\n      upstream.downstreamSet.add(queryStorage)\r\n      if (upstream.type === 'RemeshQueryStorage') {\r\n        restoreQueryStorage(upstream)\r\n      } else if (upstream.type === 'RemeshStateStorage') {\r\n        restoreStateStorage(upstream)\r\n      } else {\r\n        throw new Error(`Unknown upstream: ${upstream}`)\r\n      }\r\n    }\r\n\r\n    updateQueryStorage(queryStorage)\r\n    inspectorManager.inspectQueryStorage(InspectorType.QueryReused, queryStorage)\r\n  }\r\n\r\n  const getQueryStorage = <T extends SerializableType, U>(\r\n    queryPayload: RemeshQueryPayload<T, U>,\r\n  ): RemeshQueryStorage<T, U> => {\r\n    const domainStorage = getDomainStorage(queryPayload.Query.owner)\r\n    const key = getQueryStorageKey(queryPayload)\r\n    const queryStorage = domainStorage.queryMap.get(key)\r\n\r\n    if (queryStorage) {\r\n      return queryStorage\r\n    }\r\n\r\n    const cachedStorage = queryStorageWeakMap.get(queryPayload)\r\n\r\n    if (cachedStorage) {\r\n      restoreQueryStorage(cachedStorage)\r\n      return cachedStorage\r\n    }\r\n\r\n    return createQueryStorage(queryPayload)\r\n  }\r\n\r\n  const command$StorageWeakMap = new WeakMap<RemeshCommand$<any>, RemeshCommand$Storage<any>>()\r\n\r\n  const createCommand$Storage = <T>(Command$: RemeshCommand$<T>): RemeshCommand$Storage<T> => {\r\n    const domainStorage = getDomainStorage(Command$.owner)\r\n    const subject = new Subject<T>()\r\n    const observable = subject.asObservable()\r\n\r\n    const currentCommand$Storage: RemeshCommand$Storage<T> = {\r\n      id: uid++,\r\n      type: 'RemeshCommand$Storage',\r\n      Command$,\r\n      subject,\r\n      observable,\r\n    }\r\n\r\n    domainStorage.command$Map.set(Command$, currentCommand$Storage)\r\n    command$StorageWeakMap.set(Command$, currentCommand$Storage)\r\n\r\n    return currentCommand$Storage\r\n  }\r\n\r\n  const getCommand$Storage = <T>(Command$: RemeshCommand$<T>): RemeshCommand$Storage<T> => {\r\n    const domainStorage = getDomainStorage(Command$.owner)\r\n    const command$Storage = domainStorage.command$Map.get(Command$)\r\n\r\n    if (command$Storage) {\r\n      return command$Storage\r\n    }\r\n\r\n    const cachedStorage = command$StorageWeakMap.get(Command$)\r\n\r\n    if (cachedStorage) {\r\n      const subject = new Subject<T>()\r\n      const observable = subject.asObservable()\r\n\r\n      cachedStorage.subject = subject\r\n      cachedStorage.observable = observable\r\n      cachedStorage.subscription = undefined\r\n      domainStorage.command$Map.set(Command$, cachedStorage)\r\n\r\n      return cachedStorage\r\n    }\r\n\r\n    return createCommand$Storage(Command$)\r\n  }\r\n\r\n  const domainStorageWeakMap = new WeakMap<RemeshDomainPayload<any, any>, RemeshDomainStorage<any, any>>()\r\n\r\n  const createDomainStorage = <T extends RemeshDomainDefinition, Arg extends SerializableType>(\r\n    domainPayload: RemeshDomainPayload<T, Arg>,\r\n  ): RemeshDomainStorage<T, Arg> => {\r\n    const key = getDomainStorageKey(domainPayload)\r\n\r\n    const upstreamSet: RemeshDomainStorage<T, Arg>['upstreamSet'] = new Set()\r\n    const igniteFnSet: RemeshDomainStorage<T, Arg>['igniteFnSet'] = new Set()\r\n\r\n    const domainContext: RemeshDomainContext = {\r\n      state: (\r\n        options:\r\n          | RemeshStateOptions<any, unknown>\r\n          | RemeshDefaultStateOptions<unknown>\r\n          | RemeshDeferStateOptions<any, unknown>,\r\n      ): any => {\r\n        if ('default' in options) {\r\n          const DefaultState = RemeshDefaultState(options)\r\n          DefaultState.owner = domainPayload\r\n          DefaultState.query.owner = domainPayload\r\n          return DefaultState\r\n        }\r\n\r\n        if (!('impl' in options)) {\r\n          const DeferState = RemeshDeferState(options)\r\n          DeferState.owner = domainPayload\r\n          DeferState.query.owner = domainPayload\r\n          return DeferState\r\n        }\r\n\r\n        const State = RemeshState(options)\r\n        State.owner = domainPayload\r\n        State.query.owner = domainPayload\r\n        return State\r\n      },\r\n      query: (options) => {\r\n        const Query = RemeshQuery(options)\r\n        Query.owner = domainPayload\r\n        return Query\r\n      },\r\n      event: (options: { name: string } | RemeshEventOptions<any, any>) => {\r\n        const Event = RemeshEvent(options)\r\n        Event.owner = domainPayload\r\n        return Event as RemeshEvent<any, any>\r\n      },\r\n      command: (options) => {\r\n        const Command = RemeshCommand(options)\r\n        Command.owner = domainPayload\r\n        return Command\r\n      },\r\n      command$: (options) => {\r\n        const Command$ = RemeshCommand$(options)\r\n        Command$.owner = domainPayload\r\n        return Command$\r\n      },\r\n      ignite: (fn) => {\r\n        if (currentDomainStorage.running) {\r\n          ignite(fn)\r\n        } else {\r\n          igniteFnSet.add(fn)\r\n        }\r\n      },\r\n      preload: (preloadOptions) => {\r\n        if (!currentDomainStorage.running) {\r\n          currentDomainStorage.preloadOptionsList.push(preloadOptions)\r\n        }\r\n      },\r\n      getDomain: (UpstreamDomain) => {\r\n        const upstreamDomainStorage = getDomainStorage(UpstreamDomain)\r\n\r\n        upstreamSet.add(upstreamDomainStorage)\r\n        upstreamDomainStorage.downstreamSet.add(currentDomainStorage)\r\n\r\n        return upstreamDomainStorage.domain\r\n      },\r\n      getExtern: (Extern) => {\r\n        return getExternCurrentValue(Extern)\r\n      },\r\n    }\r\n\r\n    const currentDomainStorage: RemeshDomainStorage<T, Arg> = {\r\n      id: uid++,\r\n      type: 'RemeshDomainStorage',\r\n      Domain: domainPayload.Domain,\r\n      arg: domainPayload.arg,\r\n      get domain() {\r\n        return domain\r\n      },\r\n      domainContext,\r\n      domainPayload,\r\n      key,\r\n      igniteFnSet,\r\n      upstreamSet,\r\n      downstreamSet: new Set(),\r\n      upstreamSubscriptionSet: new Set(),\r\n      domainSubscriptionSet: new Set(),\r\n      stateMap: new Map(),\r\n      queryMap: new Map(),\r\n      eventMap: new Map(),\r\n      command$Map: new Map(),\r\n      preloadOptionsList: [],\r\n      preloadedState: {},\r\n      refCount: 0,\r\n      running: false,\r\n    }\r\n\r\n    const domain = domainPayload.Domain.impl(domainContext, domainPayload.arg)\r\n\r\n    domainStorageMap.set(key, currentDomainStorage)\r\n    domainStorageWeakMap.set(domainPayload, currentDomainStorage)\r\n\r\n    inspectorManager.inspectDomainStorage(InspectorType.DomainCreated, currentDomainStorage)\r\n\r\n    injectPreloadState(currentDomainStorage)\r\n\r\n    return currentDomainStorage\r\n  }\r\n\r\n  const injectPreloadState = <T extends RemeshDomainDefinition, Arg extends SerializableType>(\r\n    domainStorage: RemeshDomainStorage<T, Arg>,\r\n  ) => {\r\n    if (!options?.preloadedState) {\r\n      return\r\n    }\r\n\r\n    const commandContext = {\r\n      get: remeshInjectedContext.get,\r\n      peek: remeshInjectedContext.peek,\r\n    }\r\n\r\n    for (const preloadOptions of domainStorage.preloadOptionsList) {\r\n      if (Object.prototype.hasOwnProperty.call(options.preloadedState, preloadOptions.key)) {\r\n        const data = options.preloadedState[preloadOptions.key]\r\n        const commandOutput = preloadOptions.command(commandContext, data)\r\n        handleCommandOutput(commandOutput)\r\n      }\r\n    }\r\n  }\r\n\r\n  const getDomainStorage = <T extends RemeshDomainDefinition, Arg extends SerializableType>(\r\n    domainPayload: RemeshDomainPayload<T, Arg>,\r\n  ): RemeshDomainStorage<T, Arg> => {\r\n    const key = getDomainStorageKey(domainPayload)\r\n    const domainStorage = domainStorageMap.get(key)\r\n\r\n    if (domainStorage) {\r\n      return domainStorage\r\n    }\r\n\r\n    const cachedStorage = domainStorageWeakMap.get(domainPayload)\r\n\r\n    if (cachedStorage) {\r\n      cachedStorage.running = false\r\n      domainStorageMap.set(cachedStorage.key, cachedStorage)\r\n\r\n      for (const upstreamDomainStorage of cachedStorage.upstreamSet) {\r\n        upstreamDomainStorage.downstreamSet.add(cachedStorage)\r\n      }\r\n\r\n      inspectorManager.inspectDomainStorage(InspectorType.DomainReused, cachedStorage)\r\n      return cachedStorage\r\n    }\r\n\r\n    return createDomainStorage(domainPayload)\r\n  }\r\n\r\n  const clearQueryStorage = <T extends SerializableType, U>(queryStorage: RemeshQueryStorage<T, U>) => {\r\n    const domainStorage = getDomainStorage(queryStorage.Query.owner)\r\n\r\n    if (!domainStorage.queryMap.has(queryStorage.key)) {\r\n      return\r\n    }\r\n\r\n    domainStorage.queryMap.delete(queryStorage.key)\r\n\r\n    inspectorManager.inspectQueryStorage(InspectorType.QueryDiscarded, queryStorage)\r\n\r\n    for (const upstreamStorage of queryStorage.upstreamSet) {\r\n      upstreamStorage.downstreamSet.delete(queryStorage)\r\n\r\n      if (upstreamStorage.type === 'RemeshQueryStorage') {\r\n        clearQueryStorageIfNeeded(upstreamStorage)\r\n      } else if (upstreamStorage.type === 'RemeshStateStorage') {\r\n        clearStateStorageIfNeeded(upstreamStorage)\r\n      } else {\r\n        throw new Error(`Unknown upstream in clearQueryStorageIfNeeded(..): ${upstreamStorage}`)\r\n      }\r\n    }\r\n\r\n    queryStorage.subject.complete()\r\n  }\r\n\r\n  const clearQueryStorageIfNeeded = <T extends SerializableType, U>(queryStorage: RemeshQueryStorage<T, U>) => {\r\n    if (queryStorage.refCount !== 0) {\r\n      return\r\n    }\r\n\r\n    if (queryStorage.downstreamSet.size !== 0) {\r\n      return\r\n    }\r\n\r\n    clearQueryStorage(queryStorage)\r\n  }\r\n\r\n  const clearStateStorage = <T extends SerializableType, U>(stateStorage: RemeshStateStorage<T, U>) => {\r\n    const domainStorage = getDomainStorage(stateStorage.State.owner)\r\n\r\n    if (!domainStorage.stateMap.has(stateStorage.key)) {\r\n      return\r\n    }\r\n\r\n    inspectorManager.inspectStateStorage(InspectorType.StateDiscarded, stateStorage)\r\n    domainStorage.stateMap.delete(stateStorage.key)\r\n    stateStorage.downstreamSet.clear()\r\n  }\r\n\r\n  const clearStateStorageIfNeeded = <T extends SerializableType, U>(stateStorage: RemeshStateStorage<T, U>) => {\r\n    if (stateStorage.downstreamSet.size !== 0) {\r\n      return\r\n    }\r\n\r\n    clearStateStorage(stateStorage)\r\n  }\r\n\r\n  const clearEventStorage = <T, U>(eventStorage: RemeshEventStorage<T, U>) => {\r\n    const domainStorage = getDomainStorage(eventStorage.Event.owner)\r\n\r\n    eventStorage.subject.complete()\r\n    domainStorage.eventMap.delete(eventStorage.Event)\r\n  }\r\n\r\n  const clearEventStorageIfNeeded = <T, U>(eventStorage: RemeshEventStorage<T, U>) => {\r\n    if (eventStorage.refCount !== 0) {\r\n      return\r\n    }\r\n\r\n    clearEventStorage(eventStorage)\r\n  }\r\n\r\n  const clearCommand$Storage = <T>(command$Storage: RemeshCommand$Storage<T>) => {\r\n    const domainStorage = getDomainStorage(command$Storage.Command$.owner)\r\n\r\n    command$Storage.subject.complete()\r\n    command$Storage.subscription?.unsubscribe()\r\n    command$Storage.subscription = undefined\r\n\r\n    domainStorage.command$Map.delete(command$Storage.Command$)\r\n  }\r\n\r\n  const clearDomainStorage = <T extends RemeshDomainDefinition, Arg extends SerializableType>(\r\n    domainStorage: RemeshDomainStorage<T, Arg>,\r\n  ) => {\r\n    if (!domainStorage.running) {\r\n      return\r\n    }\r\n\r\n    domainStorage.running = false\r\n\r\n    inspectorManager.inspectDomainStorage(InspectorType.DomainDiscarded, domainStorage)\r\n\r\n    clearSubscriptionSet(domainStorage.domainSubscriptionSet)\r\n    clearSubscriptionSet(domainStorage.upstreamSubscriptionSet)\r\n\r\n    for (const eventStorage of domainStorage.eventMap.values()) {\r\n      clearEventStorage(eventStorage)\r\n    }\r\n\r\n    for (const queryStorage of domainStorage.queryMap.values()) {\r\n      clearQueryStorage(queryStorage)\r\n    }\r\n\r\n    for (const stateStorage of domainStorage.stateMap.values()) {\r\n      clearStateStorage(stateStorage)\r\n    }\r\n\r\n    for (const command$Storage of domainStorage.command$Map.values()) {\r\n      clearCommand$Storage(command$Storage)\r\n    }\r\n\r\n    domainStorage.upstreamSubscriptionSet.clear()\r\n    domainStorage.domainSubscriptionSet.clear()\r\n    domainStorage.downstreamSet.clear()\r\n    domainStorage.stateMap.clear()\r\n    domainStorage.queryMap.clear()\r\n    domainStorage.eventMap.clear()\r\n\r\n    domainStorageMap.delete(domainStorage.key)\r\n\r\n    for (const upstreamDomainStorage of domainStorage.upstreamSet) {\r\n      upstreamDomainStorage.downstreamSet.delete(domainStorage)\r\n      clearDomainStorageIfNeeded(upstreamDomainStorage)\r\n    }\r\n  }\r\n\r\n  const clearDomainStorageIfNeeded = <T extends RemeshDomainDefinition, Arg extends SerializableType>(\r\n    domainStorage: RemeshDomainStorage<T, Arg>,\r\n  ) => {\r\n    if (domainStorage.downstreamSet.size !== 0) {\r\n      return\r\n    }\r\n\r\n    if (domainStorage.domainSubscriptionSet.size !== 0) {\r\n      return\r\n    }\r\n\r\n    clearDomainStorage(domainStorage)\r\n  }\r\n\r\n  const getCurrentState = <T extends SerializableType, U>(stateItem: RemeshStateItem<T, U>): U => {\r\n    const stateStorage = getStateStorage(stateItem)\r\n\r\n    return getStateFromStorage(stateStorage)\r\n  }\r\n\r\n  const getCurrentQueryValue = <T extends SerializableType, U>(queryPayload: RemeshQueryPayload<T, U>): U => {\r\n    const queryStorage = getQueryStorage(queryPayload)\r\n    const currentValue = queryStorage.currentValue\r\n\r\n    if (currentValue === RemeshValuePlaceholder) {\r\n      throw new Error(`Query ${queryStorage.key} is not ready yet.`)\r\n    }\r\n\r\n    return currentValue\r\n  }\r\n\r\n  const remeshInjectedContext: RemeshInjectedContext = {\r\n    get: (input) => {\r\n      if (input.type === 'RemeshStateItem') {\r\n        return getCurrentState(input)\r\n      }\r\n\r\n      if (input.type === 'RemeshQueryPayload') {\r\n        return getCurrentQueryValue(input)\r\n      }\r\n\r\n      throw new Error(`Unexpected input in ctx.get(..): ${input}`)\r\n    },\r\n    peek: (input) => {\r\n      if (input.type === 'RemeshStateItem') {\r\n        const storage = getStateStorage(input)\r\n        return storage.currentState\r\n      }\r\n\r\n      if (input.type === 'RemeshQueryPayload') {\r\n        const storage = getQueryStorage(input)\r\n        return storage.currentValue\r\n      }\r\n\r\n      throw new Error(`Unexpected input in peek(..): ${input}`)\r\n    },\r\n    fromEvent: (Event) => {\r\n      const eventStorage = getEventStorage(Event)\r\n      return eventStorage.observable\r\n    },\r\n    fromQuery: (queryPayload) => {\r\n      const queryStorage = getQueryStorage(queryPayload)\r\n      return queryStorage.observable\r\n    },\r\n  }\r\n\r\n  const updateWipQueryStorage = <T extends SerializableType, U>(queryStorage: RemeshQueryStorage<T, U>) => {\r\n    if (queryStorage.wipUpstreamSet.size !== 0) {\r\n      let shouldUpdate = false\r\n\r\n      for (const upstream of queryStorage.wipUpstreamSet) {\r\n        if (upstream.type === 'RemeshStateStorage') {\r\n          shouldUpdate = true\r\n        } else if (upstream.type === 'RemeshQueryStorage') {\r\n          if (upstream.status === 'wip') {\r\n            updateWipQueryStorage(upstream)\r\n          }\r\n          if (upstream.status === 'updated') {\r\n            shouldUpdate = true\r\n          }\r\n        }\r\n      }\r\n\r\n      queryStorage.wipUpstreamSet.clear()\r\n\r\n      if (!shouldUpdate) {\r\n        queryStorage.status = 'default'\r\n        return\r\n      }\r\n    }\r\n\r\n    const isUpdated = updateQueryStorage(queryStorage)\r\n\r\n    if (isUpdated) {\r\n      queryStorage.status = 'updated'\r\n    } else {\r\n      queryStorage.status = 'default'\r\n    }\r\n  }\r\n\r\n  const updateQueryStorage = <T extends SerializableType, U>(queryStorage: RemeshQueryStorage<T, U>) => {\r\n    const { Query } = queryStorage\r\n\r\n    for (const upstream of queryStorage.upstreamSet) {\r\n      upstream.downstreamSet.delete(queryStorage)\r\n      if (upstream.downstreamSet.size === 0) {\r\n        pendingClearSet.add(upstream)\r\n      }\r\n    }\r\n\r\n    const upstreamSet: RemeshQueryStorage<T, U>['upstreamSet'] = new Set()\r\n\r\n    queryStorage.upstreamSet = upstreamSet\r\n\r\n    const queryContext: RemeshQueryContext = {\r\n      get: (input) => {\r\n        if (queryStorage.upstreamSet !== upstreamSet) {\r\n          return remeshInjectedContext.get(input)\r\n        }\r\n\r\n        if (input.type === 'RemeshStateItem') {\r\n          const upstreamStateStorage = getStateStorage(input)\r\n\r\n          queryStorage.upstreamSet.add(upstreamStateStorage)\r\n          upstreamStateStorage.downstreamSet.add(queryStorage)\r\n\r\n          return remeshInjectedContext.get(input)\r\n        }\r\n\r\n        if (input.type === 'RemeshQueryPayload') {\r\n          const upstreamQueryStorage = getQueryStorage(input)\r\n\r\n          queryStorage.upstreamSet.add(upstreamQueryStorage)\r\n          upstreamQueryStorage.downstreamSet.add(queryStorage)\r\n\r\n          return remeshInjectedContext.get(input)\r\n        }\r\n\r\n        return remeshInjectedContext.get(input)\r\n      },\r\n      peek: remeshInjectedContext.peek,\r\n    }\r\n\r\n    const newValue = Query.impl(queryContext, queryStorage.arg)\r\n\r\n    if (queryStorage.currentValue !== RemeshValuePlaceholder) {\r\n      const isEqual = Query.compare(queryStorage.currentValue, newValue)\r\n\r\n      if (isEqual) {\r\n        return false\r\n      }\r\n    }\r\n\r\n    queryStorage.currentValue = newValue\r\n    pendingEmitSet.add(queryStorage)\r\n\r\n    inspectorManager.inspectQueryStorage(InspectorType.QueryUpdated, queryStorage)\r\n\r\n    return true\r\n  }\r\n\r\n  const clearPendingStorageSetIfNeeded = () => {\r\n    if (pendingClearSet.size === 0) {\r\n      return\r\n    }\r\n\r\n    const storageList = [...pendingClearSet]\r\n\r\n    pendingClearSet.clear()\r\n\r\n    for (const storage of storageList) {\r\n      if (storage.type === 'RemeshDomainStorage') {\r\n        clearDomainStorageIfNeeded(storage)\r\n      } else if (storage.type === 'RemeshEventStorage') {\r\n        clearEventStorageIfNeeded(storage)\r\n      } else if (storage.type === 'RemeshQueryStorage') {\r\n        clearQueryStorageIfNeeded(storage)\r\n      } else if (storage.type === 'RemeshStateStorage') {\r\n        clearStateStorageIfNeeded(storage)\r\n      }\r\n    }\r\n\r\n    clearPendingStorageSetIfNeeded()\r\n  }\r\n\r\n  const clearPendingEmitSetIfNeeded = () => {\r\n    if (pendingEmitSet.size === 0) {\r\n      return\r\n    }\r\n\r\n    const list = [...pendingEmitSet]\r\n\r\n    pendingEmitSet.clear()\r\n\r\n    for (const item of list) {\r\n      if (item.type === 'RemeshEventPayload') {\r\n        emitEvent(item)\r\n      } else if (item.type === 'RemeshQueryStorage') {\r\n        if (!pendingEmitSet.has(item)) {\r\n          item.subject.next(item.currentValue)\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * recursively consuming dirty set unit it become empty.\r\n     */\r\n    clearPendingEmitSetIfNeeded()\r\n  }\r\n\r\n  const mark = <T extends SerializableType, U>(queryStorage: RemeshQueryStorage<T, U>) => {\r\n    queryStorage.status = 'wip'\r\n\r\n    if (queryStorage.downstreamSet.size > 0) {\r\n      for (const downstream of queryStorage.downstreamSet) {\r\n        if (!downstream.wipUpstreamSet.has(queryStorage)) {\r\n          downstream.wipUpstreamSet.add(queryStorage)\r\n          mark(downstream)\r\n        }\r\n      }\r\n    } else {\r\n      pendingLeafSet.add(queryStorage)\r\n    }\r\n  }\r\n\r\n  const clearPendingLeafSetIfNeeded = () => {\r\n    if (pendingLeafSet.size === 0) {\r\n      return\r\n    }\r\n\r\n    const queryStorageList = [...pendingLeafSet]\r\n\r\n    pendingLeafSet.clear()\r\n\r\n    for (const queryStorage of queryStorageList) {\r\n      updateWipQueryStorage(queryStorage)\r\n    }\r\n\r\n    /**\r\n     * recursively consuming dirty set unit it become empty.\r\n     */\r\n    clearPendingLeafSetIfNeeded()\r\n  }\r\n\r\n  const commit = () => {\r\n    clearPendingLeafSetIfNeeded()\r\n    clearPendingEmitSetIfNeeded()\r\n  }\r\n\r\n  const handleStatePayload = <T extends SerializableType, U>(statePayload: RemeshStatePayload<T, U>) => {\r\n    const stateStorage = getStateStorage(statePayload.stateItem)\r\n\r\n    if (stateStorage.currentState !== RemeshValuePlaceholder) {\r\n      const isEqual = statePayload.stateItem.State.compare(stateStorage.currentState, statePayload.newState)\r\n\r\n      if (isEqual) {\r\n        return\r\n      }\r\n    }\r\n\r\n    stateStorage.currentState = statePayload.newState\r\n\r\n    inspectorManager.inspectStateStorage(InspectorType.StateUpdated, stateStorage)\r\n\r\n    for (const downstream of stateStorage.downstreamSet) {\r\n      downstream.wipUpstreamSet.add(stateStorage)\r\n      mark(downstream)\r\n    }\r\n  }\r\n\r\n  const handleEventPayload = <T, U = T>(eventPayload: RemeshEventPayload<T, U>) => {\r\n    pendingEmitSet.add(eventPayload)\r\n  }\r\n\r\n  const emitEvent = <T, U = T>(eventPayload: RemeshEventPayload<T, U>) => {\r\n    const { Event, arg } = eventPayload\r\n    const eventStorage = getMaybeEventStorage(Event)\r\n\r\n    if (!eventStorage) {\r\n      return\r\n    }\r\n\r\n    inspectorManager.inspectEventEmitted(InspectorType.EventEmitted, eventPayload)\r\n\r\n    if (Event.impl) {\r\n      const eventContext = {\r\n        get: remeshInjectedContext.get,\r\n        peek: remeshInjectedContext.peek,\r\n      }\r\n      const data = Event.impl(eventContext, arg)\r\n      eventStorage.subject.next(data)\r\n    } else {\r\n      eventStorage.subject.next(arg as unknown as U)\r\n    }\r\n  }\r\n\r\n  const handleCommandPayload = <T>(commandPayload: RemeshCommandPayload<T>) => {\r\n    inspectorManager.inspectCommandReceived(InspectorType.CommandReceived, commandPayload)\r\n\r\n    const { Command, arg } = commandPayload\r\n    const commandContext: RemeshCommandContext = {\r\n      get: remeshInjectedContext.get,\r\n      peek: remeshInjectedContext.peek,\r\n    }\r\n\r\n    const commandOutput = Command.impl(commandContext, arg)\r\n    handleCommandOutput(commandOutput)\r\n  }\r\n\r\n  const handleSubscription = (subscriptionSet: Set<Subscription>, subscription: Subscription) => {\r\n    subscriptionSet.add(subscription)\r\n\r\n    subscription.add(() => {\r\n      subscriptionSet.delete(subscription)\r\n    })\r\n  }\r\n\r\n  const ignite = (fn: RemeshDomainIgniteFn) => {\r\n    const igniteContext = {\r\n      get: remeshInjectedContext.get,\r\n      peek: remeshInjectedContext.peek,\r\n    }\r\n    handleCommandOutput(fn(igniteContext))\r\n  }\r\n\r\n  const initCommand$IfNeeded = <T>(Command$: RemeshCommand$<T>) => {\r\n    const command$Storage = getCommand$Storage(Command$)\r\n\r\n    if (command$Storage.subscription) {\r\n      return\r\n    }\r\n\r\n    const command$Context: RemeshCommand$Context = {\r\n      get: remeshInjectedContext.get,\r\n      peek: remeshInjectedContext.peek,\r\n      fromEvent: remeshInjectedContext.fromEvent,\r\n      fromQuery: remeshInjectedContext.fromQuery,\r\n    }\r\n\r\n    const command$ = Command$.impl(command$Context, command$Storage.observable)\r\n\r\n    const subscription = command$.subscribe({\r\n      next: (commandOutput) => {\r\n        handleCommandOutput(commandOutput)\r\n        commit()\r\n      },\r\n      complete: () => {\r\n        clearCommand$Storage(command$Storage)\r\n      },\r\n    })\r\n\r\n    command$Storage.subscription = subscription\r\n  }\r\n\r\n  const handleCommandOutput = (commandOutput: RemeshCommandOutput) => {\r\n    if (!commandOutput) {\r\n      return\r\n    }\r\n\r\n    if (Array.isArray(commandOutput)) {\r\n      for (const item of commandOutput) {\r\n        handleCommandOutput(item)\r\n      }\r\n      return\r\n    }\r\n\r\n    if (commandOutput.type === 'RemeshCommandPayload') {\r\n      handleCommandPayload(commandOutput)\r\n      return\r\n    } else if (commandOutput.type === 'RemeshEventPayload') {\r\n      handleEventPayload(commandOutput)\r\n      return\r\n    } else if (commandOutput.type === 'RemeshStateSetterPayload') {\r\n      handleStatePayload(commandOutput)\r\n      return\r\n    } else if (commandOutput.type === 'RemeshCommand$Payload') {\r\n      handleCommand$Payload(commandOutput)\r\n      return\r\n    }\r\n\r\n    throw new Error(`Unknown command output of ${commandOutput}`)\r\n  }\r\n\r\n  const handleCommand$Payload = <T>(command$Payload: RemeshCommand$Payload<T>) => {\r\n    inspectorManager.inspectCommand$Received(InspectorType.Command$Received, command$Payload)\r\n\r\n    const { Command$, arg } = command$Payload\r\n    const command$Storage = getCommand$Storage(Command$)\r\n\r\n    initCommand$IfNeeded(Command$)\r\n    command$Storage.subject.next(arg)\r\n  }\r\n\r\n  const addDomainSubscription = (domainStorage: RemeshDomainStorage<any, any>, domainSubscription: Subscription) => {\r\n    handleSubscription(domainStorage.domainSubscriptionSet, domainSubscription)\r\n\r\n    domainSubscription.add(() => {\r\n      pendingClearSet.add(domainStorage)\r\n      clearPendingStorageSetIfNeeded()\r\n    })\r\n  }\r\n\r\n  const subscribeQuery = <T extends SerializableType, U>(\r\n    queryPayload: RemeshQueryPayload<T, U>,\r\n    subscriber: ((data: U) => unknown) | Partial<Observer<U>>,\r\n  ): Subscription => {\r\n    const queryStorage = getQueryStorage(queryPayload)\r\n    const subscription =\r\n      typeof subscriber === 'function'\r\n        ? queryStorage.observable.subscribe(subscriber)\r\n        : queryStorage.observable.subscribe(subscriber)\r\n\r\n    return subscription\r\n  }\r\n\r\n  const subscribeEvent = <T, U = T>(Event: RemeshEvent<T, U>, subscriber: (event: U) => unknown) => {\r\n    const eventStorage = getEventStorage(Event)\r\n    const subscription = eventStorage.observable.subscribe(subscriber)\r\n\r\n    return subscription\r\n  }\r\n\r\n  const getBindingCommand = <T extends RemeshDomainDefinition>(domain: T) => {\r\n    const command = {}\r\n\r\n    for (const key in domain.command) {\r\n      const Command = domain.command[key]\r\n      command[key] = (arg: any) => sendCommand(Command(arg))\r\n    }\r\n\r\n    return command as BindingCommand<T['command']>\r\n  }\r\n\r\n  const getDomain = <T extends RemeshDomainDefinition, Arg extends SerializableType>(\r\n    domainPayload: RemeshDomainPayload<T, Arg>,\r\n  ): BindingDomainOutput<T> => {\r\n    const domainStorage = getDomainStorage(domainPayload)\r\n\r\n    if (domainStorage.domainOutput) {\r\n      return domainStorage.domainOutput\r\n    }\r\n\r\n    const domain = domainStorage.domain\r\n    const command = getBindingCommand(domain)\r\n\r\n    const domainOutput = {\r\n      ...domain,\r\n      command,\r\n    }\r\n\r\n    domainStorage.domainOutput = domainOutput\r\n\r\n    return domainOutput\r\n  }\r\n\r\n  const igniteDomain = <T extends RemeshDomainDefinition, Arg extends SerializableType>(\r\n    domainStorage: RemeshDomainStorage<T, Arg>,\r\n  ) => {\r\n    for (const igniteFn of domainStorage.igniteFnSet) {\r\n      ignite(igniteFn)\r\n    }\r\n  }\r\n\r\n  const runDomainStorageIfNeeded = <T extends RemeshDomainDefinition, Arg extends SerializableType>(\r\n    domainStorage: RemeshDomainStorage<T, Arg>,\r\n  ) => {\r\n    if (domainStorage.running) {\r\n      return\r\n    }\r\n\r\n    domainStorage.running = true\r\n\r\n    for (const upstreamDomainStorage of domainStorage.upstreamSet) {\r\n      const upstreamDomainSubscription = subscribeDomain(upstreamDomainStorage.domainPayload)\r\n      handleSubscription(domainStorage.upstreamSubscriptionSet, upstreamDomainSubscription)\r\n    }\r\n\r\n    igniteDomain(domainStorage)\r\n  }\r\n\r\n  const subscribeDomain = <T extends RemeshDomainDefinition, Arg extends SerializableType>(\r\n    domainPayload: RemeshDomainPayload<T, Arg>,\r\n  ): Subscription => {\r\n    const domainStorage = getDomainStorage(domainPayload)\r\n    const domainSubscription = new Subscription()\r\n\r\n    addDomainSubscription(domainStorage, domainSubscription)\r\n    runDomainStorageIfNeeded(domainStorage)\r\n\r\n    return domainSubscription\r\n  }\r\n\r\n  const discard = () => {\r\n    inspectorManager.destroyInspectors()\r\n\r\n    for (const domainStorage of domainStorageMap.values()) {\r\n      clearDomainStorage(domainStorage)\r\n    }\r\n    domainStorageMap.clear()\r\n    pendingEmitSet.clear()\r\n  }\r\n\r\n  const sendCommand = <T>(input: RemeshCommandPayload<T> | RemeshCommand$Payload<T>) => {\r\n    if (input.type === 'RemeshCommandPayload') {\r\n      handleCommandPayload(input)\r\n      commit()\r\n    } else if (input.type === 'RemeshCommand$Payload') {\r\n      handleCommand$Payload(input)\r\n    }\r\n  }\r\n\r\n  const preload = <T extends RemeshDomainDefinition, Arg extends SerializableType>(\r\n    domainPayload: RemeshDomainPayload<T, Arg>,\r\n  ) => {\r\n    const domainStorage = getDomainStorage(domainPayload)\r\n\r\n    if (domainStorage.running) {\r\n      throw new Error(`Domain ${domainPayload.Domain.domainName} was ignited before preloading`)\r\n    }\r\n\r\n    if (domainStorage.preloadedPromise) {\r\n      return domainStorage.preloadedPromise\r\n    }\r\n\r\n    const preloadedPromise = preloadDomain(domainPayload)\r\n\r\n    domainStorage.preloadedPromise = preloadedPromise\r\n\r\n    return preloadedPromise\r\n  }\r\n\r\n  const preloadDomain = async <T extends RemeshDomainDefinition, Arg extends SerializableType>(\r\n    domainPayload: RemeshDomainPayload<T, Arg>,\r\n  ) => {\r\n    const domainStorage = getDomainStorage(domainPayload)\r\n\r\n    await Promise.all(\r\n      Array.from(domainStorage.upstreamSet).map((upstreamDomainStorage) => {\r\n        return preload(upstreamDomainStorage.domainPayload)\r\n      }),\r\n    )\r\n\r\n    await Promise.all(\r\n      domainStorage.preloadOptionsList.map(async (preloadOptions) => {\r\n        const queryContext = {\r\n          get: remeshInjectedContext['get'],\r\n          peek: remeshInjectedContext['peek'],\r\n        }\r\n\r\n        const data = await preloadOptions.query(queryContext)\r\n\r\n        if (Object.prototype.hasOwnProperty.call(domainStorage.preloadedState, preloadOptions.key)) {\r\n          throw new Error(`Duplicate key ${preloadOptions.key}`)\r\n        }\r\n\r\n        domainStorage.preloadedState[preloadOptions.key] = data\r\n\r\n        const commandContext = {\r\n          ...queryContext,\r\n        }\r\n\r\n        const commandOutput = preloadOptions.command(commandContext, data)\r\n\r\n        handleCommandOutput(commandOutput)\r\n      }),\r\n    )\r\n  }\r\n\r\n  const getPreloadedState = () => {\r\n    const preloadedState = {} as PreloadedState\r\n\r\n    for (const domainStorage of domainStorageMap.values()) {\r\n      Object.assign(preloadedState, domainStorage.preloadedState)\r\n    }\r\n\r\n    return preloadedState\r\n  }\r\n\r\n  const getDomainPreloadedState = <T extends RemeshDomainDefinition, Arg extends SerializableType>(\r\n    domainPayload: RemeshDomainPayload<T, Arg>,\r\n  ): PreloadedState => {\r\n    const domainStorage = getDomainStorage(domainPayload)\r\n\r\n    return domainStorage.preloadedState\r\n  }\r\n\r\n  return {\r\n    name: config.name,\r\n    getDomain,\r\n    query: getCurrentQueryValue,\r\n    emitEvent,\r\n    sendCommand,\r\n    discard,\r\n    preload,\r\n    getPreloadedState,\r\n    getDomainPreloadedState,\r\n    subscribeQuery,\r\n    subscribeEvent,\r\n    subscribeDomain,\r\n    getKey: getStorageKey,\r\n  }\r\n}\r\n\r\nconst clearSubscriptionSet = (subscriptionSet: Set<Subscription>) => {\r\n  for (const subscription of subscriptionSet) {\r\n    subscription.unsubscribe()\r\n  }\r\n}\r\n","import {\n  RemeshDomain,\n  RemeshExtern,\n  RemeshState,\n  RemeshQuery,\n  RemeshCommand,\n  RemeshCommand$,\n} from './remesh'\n\nimport { RemeshStore } from './store'\n\nexport * from './remesh'\nexport * from './store'\nexport * from './inspector'\n\nexport const Remesh = {\n  domain: RemeshDomain,\n  extern: RemeshExtern,\n  store: RemeshStore,\n  state: RemeshState,\n  query: RemeshQuery,\n  command: RemeshCommand,\n  command$: RemeshCommand$,\n}\n","/**\n * @license React\n * use-sync-external-store-shim.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var e=require(\"react\");function h(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var k=\"function\"===typeof Object.is?Object.is:h,l=e.useState,m=e.useEffect,n=e.useLayoutEffect,p=e.useDebugValue;function q(a,b){var d=b(),f=l({inst:{value:d,getSnapshot:b}}),c=f[0].inst,g=f[1];n(function(){c.value=d;c.getSnapshot=b;r(c)&&g({inst:c})},[a,d,b]);m(function(){r(c)&&g({inst:c});return a(function(){r(c)&&g({inst:c})})},[a]);p(d);return d}\nfunction r(a){var b=a.getSnapshot;a=a.value;try{var d=b();return!k(a,d)}catch(f){return!0}}function t(a,b){return b()}var u=\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement?t:q;exports.useSyncExternalStore=void 0!==e.useSyncExternalStore?e.useSyncExternalStore:u;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim.production.min.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim.development.js');\n}\n","import React, { useEffect, useRef, useContext, createContext, ReactNode, useCallback, useMemo } from 'react'\n\nimport { useSyncExternalStore } from 'use-sync-external-store/shim'\n\nimport {\n  RemeshDomainDefinition,\n  RemeshQueryPayload,\n  RemeshEvent,\n  RemeshDomainPayload,\n  RemeshStore,\n  SerializableType,\n  RemeshStoreOptions,\n} from 'remesh'\n\nimport { AsyncData } from 'remesh/modules/async'\n\nexport type RemeshReactContext = {\n  remeshStore: RemeshStore\n}\n\nexport const RemeshReactContext = createContext<RemeshReactContext | null>(null)\n\nexport const useRemeshReactContext = () => {\n  const context = useContext(RemeshReactContext)\n\n  if (context === null) {\n    throw new Error(`You may forget to add <RemeshRoot />`)\n  }\n\n  return context\n}\n\nexport const useRemeshStore = (): RemeshStore => {\n  const context = useRemeshReactContext()\n  return context.remeshStore\n}\n\nexport type RemeshRootProps =\n  | {\n      children: ReactNode\n      store?: RemeshStore\n    }\n  | {\n      children: ReactNode\n      store?: never\n      options: RemeshStoreOptions\n    }\n\nexport const RemeshRoot = (props: RemeshRootProps) => {\n  const storeRef = useRef<RemeshStore | undefined>(props.store)\n\n  if (!storeRef.current) {\n    storeRef.current = RemeshStore('options' in props ? props.options : {})\n  }\n\n  const store = storeRef.current\n\n  const contextValue: RemeshReactContext = useMemo(() => {\n    return {\n      remeshStore: store,\n    }\n  }, [store])\n\n  return <RemeshReactContext.Provider value={contextValue}>{props.children}</RemeshReactContext.Provider>\n}\n\nexport const useRemeshQuery = function <T extends SerializableType, U>(queryPayload: RemeshQueryPayload<T, U>): U {\n  /**\n   * initial domain if needed\n   */\n  useRemeshDomain(queryPayload.Query.owner)\n\n  const store = useRemeshStore()\n\n  const triggerRef = useRef<(() => void) | null>(null)\n\n  const subscribe = useCallback((triggerUpdate: () => void) => {\n    triggerRef.current = triggerUpdate\n    return () => {\n      triggerRef.current = null\n    }\n  }, [])\n\n  const getSnapshot = useCallback(() => {\n    const snapshot = store.query(queryPayload)\n    return snapshot\n  }, [store, queryPayload])\n\n  const state = useSyncExternalStore(subscribe, getSnapshot, getSnapshot)\n\n  const subscriptionRef = useRef<{ unsubscribe: () => void } | null>(null)\n\n  const queryKey = store.getKey(queryPayload)\n\n  useEffect(() => {\n    return () => {\n      subscriptionRef.current?.unsubscribe()\n      subscriptionRef.current = null\n    }\n  }, [store, queryKey])\n\n  useEffect(() => {\n    if (subscriptionRef.current !== null) {\n      return\n    }\n    subscriptionRef.current = store.subscribeQuery(queryPayload, () => {\n      triggerRef.current?.()\n    })\n  }, [store, queryPayload])\n\n  return state\n}\n\nexport const useRemeshSuspense = function <T extends SerializableType, U>(\n  queryPayload: RemeshQueryPayload<T, AsyncData<U>>,\n) {\n  const state = useRemeshQuery(queryPayload)\n\n  if (state.type === 'loading') {\n    throw state.promise\n  }\n\n  if (state.type === 'failed') {\n    throw state.error\n  }\n\n  if (state.type === 'success') {\n    return state.value\n  }\n}\n\nexport const useRemeshEvent = function <T, U = T>(Event: RemeshEvent<T, U>, callback: (data: U) => unknown) {\n  const store = useRemeshStore()\n  const callbackRef = useRef(callback)\n\n  useEffect(() => {\n    callbackRef.current = callback\n  })\n\n  useEffect(() => {\n    const subscription = store.subscribeEvent(Event, (data) => {\n      callbackRef.current(data)\n    })\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [Event, store])\n}\n\nexport const useRemeshEmit = function () {\n  const store = useRemeshStore()\n\n  return store.emitEvent\n}\n\nexport const useRemeshDomain = function <T extends RemeshDomainDefinition, Arg extends SerializableType>(\n  domainPayload: RemeshDomainPayload<T, Arg>,\n) {\n  const store = useRemeshStore()\n  const subscriptionRef = useRef<{ unsubscribe: () => void } | null>(null)\n  const domain = store.getDomain(domainPayload)\n  const domainKey = store.getKey(domainPayload)\n\n  useEffect(() => {\n    return () => {\n      subscriptionRef.current?.unsubscribe()\n      subscriptionRef.current = null\n    }\n  }, [store, domainKey])\n\n  useEffect(() => {\n    if (subscriptionRef.current !== null) {\n      return\n    }\n    subscriptionRef.current = store.subscribeDomain(domainPayload)\n  }, [store, domainPayload])\n\n  return domain\n}\n","export const formatTime = (time: Date) => {\n  const hours = time.getHours().toString().padStart(2, '0')\n  const minutes = time.getMinutes().toString().padStart(2, '0')\n  const seconds = time.getSeconds().toString().padStart(2, '0')\n  const milliseconds = time.getMilliseconds().toString().padStart(3, '0')\n\n  return `${hours}:${minutes}:${seconds}.${milliseconds}`\n}\n\nexport const formatNow = () => {\n  const time = new Date()\n\n  return formatTime(time)\n}\n\nexport type RemeshDebugSource = 'state' | 'query' | 'domain' | 'event' | 'command' | 'command$'\n\nexport type RemeshDebugOptions = {\n  include?: RemeshDebugSource[]\n  exclude?: RemeshDebugSource[]\n}\n\nexport const RemeshDebuggerHelper = (options?: RemeshDebugOptions) => {\n  const config = {\n    include: ['state', 'domain', 'event', 'command', 'command$'],\n    ...options,\n  }\n\n  const onActive = (source: RemeshDebugSource, fn: () => unknown) => {\n    if (config.exclude?.includes(source)) {\n      return\n    }\n\n    if (config.include) {\n      if (config.include.includes(source)) {\n        fn()\n      }\n    } else {\n      fn()\n    }\n  }\n\n  return {\n    onActive,\n  }\n}\n","import {\n  Remesh,\n  RemeshDomainDefinition,\n  RemeshDomainPayload,\n  RemeshInspectorDomain,\n  RemeshStoreOptions,\n  SerializableType,\n} from 'remesh'\nimport { RemeshDebuggerHelper, RemeshDebugOptions } from 'remesh-debugger-helper'\n\nimport type { Config as _Config } from '@redux-devtools/extension'\nimport type { Action } from 'redux'\n\nconst getReduxDevtools = () => {\n  if (typeof window !== 'undefined') {\n    return window.__REDUX_DEVTOOLS_EXTENSION__\n  }\n}\n\nexport type RemeshReduxDevtoolsOptions = RemeshDebugOptions\n\nexport const RemeshReduxDevtools = (options?: RemeshReduxDevtoolsOptions) => {\n  const reduxDevtools = getReduxDevtools()\n\n  if (!reduxDevtools) {\n    return\n  }\n\n  return (storeOptions?: RemeshStoreOptions) => {\n    const helper = RemeshDebuggerHelper(options)\n\n    const devtools = reduxDevtools.connect({\n      name: storeOptions?.name,\n      features: {\n        pause: false, // start/pause recording of dispatched actions\n        lock: false, // lock/unlock dispatching actions and side effects\n        persist: false, // persist states on page reloading\n        export: false, // export history of actions in a file\n        import: false, // import history of actions from a file\n        jump: false, // jump back and forth (time traveling)\n        skip: false, // skip (cancel) actions\n        reorder: false, // drag and drop actions in the history list\n        dispatch: false, // dispatch custom actions or action creators\n        test: false, // generate tests for the selected actions\n      },\n    })\n\n    const send = (_type: string, action: Action<unknown>) => {\n      devtools.send(action, null)\n    }\n\n    const store = Remesh.store({\n      name: `RemeshReduxDevtools(${storeOptions?.name ?? ''})`,\n    })\n\n    const inspectorDomain = store.getDomain(RemeshInspectorDomain())\n\n    const getOwnerInfo = <T extends RemeshDomainDefinition, U extends SerializableType>(\n      owner: RemeshDomainPayload<T, U>,\n    ) => {\n      const ownerInfo = {\n        domainId: owner.Domain.domainId,\n        domainName: owner.Domain.domainName,\n      }\n\n      if (owner.arg !== undefined) {\n        return {\n          ...ownerInfo,\n          domainArg: owner.arg,\n        }\n      }\n\n      return ownerInfo\n    }\n\n    helper.onActive('domain', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshDomainStorageEvent, (event) => {\n        const Domain = event.storage.Domain\n        const info = {\n          type: `${event.type}::${Domain.domainName}`,\n          domainId: Domain.domainId,\n          domainName: Domain.domainName,\n        }\n\n        if (event.storage.arg !== undefined) {\n          send(info.type, {\n            ...info,\n            domainArg: event.storage.arg,\n          })\n        } else {\n          send(info.type, info)\n        }\n      })\n    })\n\n    helper.onActive('state', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshStateStorageEvent, (event) => {\n        const State = event.storage.State\n        const info = {\n          type: `${event.type}::${State.stateName}`,\n          owner: getOwnerInfo(State.owner),\n          stateId: State.stateId,\n          stateName: State.stateName,\n          stateValue: event.storage.currentState,\n        }\n\n        if (event.storage.arg !== undefined) {\n          send(info.type, {\n            ...info,\n            stateArg: event.storage.arg,\n          })\n        } else {\n          send(info.type, info)\n        }\n      })\n    })\n\n    helper.onActive('query', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshQueryStorageEvent, (event) => {\n        const Query = event.storage.Query\n        const info = {\n          type: `${event.type}::${Query.queryName}`,\n          owner: getOwnerInfo(Query.owner),\n          queryId: Query.queryId,\n          queryName: Query.queryName,\n        }\n\n        if (event.storage.arg !== undefined) {\n          send(info.type, {\n            ...info,\n            queryArg: event.storage.arg,\n          })\n        } else {\n          send(info.type, info)\n        }\n      })\n    })\n\n    helper.onActive('command', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshCommandReceivedEvent, (event) => {\n        const Command = event.payload.Command\n        const info = {\n          type: `${event.type}::${Command.commandName}`,\n          owner: getOwnerInfo(Command.owner),\n          commandId: Command.commandId,\n          commandName: Command.commandName,\n        }\n\n        if (event.payload.arg !== undefined) {\n          send(info.type, {\n            ...info,\n            commandArg: event.payload.arg,\n          })\n        } else {\n          send(info.type, info)\n        }\n      })\n    })\n\n    helper.onActive('command$', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshCommand$ReceivedEvent, (event) => {\n        const Command$ = event.payload.Command$\n        const info = {\n          type: `${event.type}::${Command$.command$Name}`,\n          owner: getOwnerInfo(Command$.owner),\n          command$Id: Command$.command$Id,\n          command$Name: Command$.command$Name,\n        }\n\n        if (event.payload.arg !== undefined) {\n          send(info.type, {\n            ...info,\n            command$Arg: event.payload.arg,\n          })\n        } else {\n          send(info.type, info)\n        }\n      })\n    })\n\n    helper.onActive('event', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshEventEmittedEvent, (event) => {\n        const Event = event.payload.Event\n\n        const info = {\n          type: `${event.type}::${Event.eventName}`,\n          owner: getOwnerInfo(Event.owner),\n          eventId: Event.eventId,\n          eventName: Event.eventName,\n        }\n\n        if (event.payload.arg !== undefined) {\n          send(info.type, {\n            ...info,\n            eventArg: event.payload.arg,\n          })\n        } else {\n          send(info.type, info)\n        }\n      })\n    })\n\n    return store\n  }\n}\n","import { Remesh, RemeshDomainPayload, RemeshInspectorDomain, RemeshStoreInspector, SerializableType } from 'remesh'\n\nimport { RemeshDebugOptions, RemeshDebuggerHelper, formatNow } from 'remesh-debugger-helper'\n\nexport type RemeshLoggerOptions = RemeshDebugOptions & {\n  collapsed?: boolean\n}\n\nexport const RemeshLogger = (options?: RemeshLoggerOptions): RemeshStoreInspector => {\n  return (storeOptions) => {\n    const config = {\n      collapsed: true,\n      ...options,\n    }\n\n    const helper = RemeshDebuggerHelper(config)\n\n    const log = (type: string, info: object) => {\n      if (config.collapsed) {\n        const parts = type.split('::')\n        console.groupCollapsed(\n          `%c${parts[0]}%c::%c${parts[1]}%c::%c${parts[2]}%c @ ${formatNow()}`,\n          'color:#03A9F4; font-weight: bold',\n          'color:#9E9E9E; font-weight: bold',\n          'color:#4CAF50; font-weight: bold',\n          'color:#9E9E9E; font-weight: bold',\n          'color:#AA07DE; font-weight: bold',\n          `color:#9E9E9E; font-weight: lighter`,\n        )\n      }\n\n      console.log(info)\n\n      if (config.collapsed) {\n        console.groupEnd()\n      }\n    }\n\n    const store = Remesh.store({\n      ...storeOptions,\n      name: `RemeshLogger(${storeOptions?.name ?? ''})`,\n    })\n\n    const inspectorDomain = store.getDomain(RemeshInspectorDomain())\n\n    const getOwnerInfo = <T, U extends SerializableType>(owner: RemeshDomainPayload<T, U>) => {\n      const ownerInfo = {\n        domainId: owner.Domain.domainId,\n        domainName: owner.Domain.domainName,\n      }\n\n      if (owner.arg !== undefined) {\n        return {\n          ...ownerInfo,\n          domainArg: owner.arg,\n        }\n      }\n\n      return ownerInfo\n    }\n\n    helper.onActive('domain', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshDomainStorageEvent, (event) => {\n        const Domain = event.storage.Domain\n        const info = {\n          type: `${event.type}::${Domain.domainName}`,\n          domainId: Domain.domainId,\n          domainName: Domain.domainName,\n        }\n\n        if (event.storage.arg !== undefined) {\n          log(info.type, {\n            ...info,\n            domainArg: event.storage.arg,\n          })\n        } else {\n          log(info.type, info)\n        }\n      })\n    })\n\n    helper.onActive('state', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshStateStorageEvent, (event) => {\n        const State = event.storage.State\n        const info = {\n          type: `${event.type}::${State.stateName}`,\n          owner: getOwnerInfo(State.owner),\n          stateId: State.stateId,\n          stateName: State.stateName,\n          stateValue: event.storage.currentState,\n        }\n\n        if (event.storage.arg !== undefined) {\n          log(info.type, {\n            ...info,\n            stateArg: event.storage.arg,\n          })\n        } else {\n          log(info.type, info)\n        }\n      })\n    })\n\n    helper.onActive('query', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshQueryStorageEvent, (event) => {\n        const Query = event.storage.Query\n        const info = {\n          type: `${event.type}::${Query.queryName}`,\n          owner: getOwnerInfo(Query.owner),\n          queryId: Query.queryId,\n          queryName: Query.queryName,\n          queryValue: event.storage.currentValue,\n        }\n\n        if (event.storage.arg !== undefined) {\n          log(info.type, {\n            ...info,\n            queryArg: event.storage.arg,\n          })\n        } else {\n          log(info.type, info)\n        }\n      })\n    })\n\n    helper.onActive('command', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshCommandReceivedEvent, (event) => {\n        const Command = event.payload.Command\n        const info = {\n          type: `${event.type}::${Command.commandName}`,\n          owner: getOwnerInfo(Command.owner),\n          commandId: Command.commandId,\n          commandName: Command.commandName,\n        }\n\n        if (event.payload.arg !== undefined) {\n          log(info.type, {\n            ...info,\n            commandArg: event.payload.arg,\n          })\n        } else {\n          log(info.type, info)\n        }\n      })\n    })\n\n    helper.onActive('command$', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshCommand$ReceivedEvent, (event) => {\n        const Command$ = event.payload.Command$\n        const info = {\n          type: `${event.type}::${Command$.command$Name}`,\n          owner: getOwnerInfo(Command$.owner),\n          command$Id: Command$.command$Id,\n          command$Name: Command$.command$Name,\n        }\n\n        if (event.payload.arg !== undefined) {\n          log(info.type, {\n            ...info,\n            command$Arg: event.payload.arg,\n          })\n        } else {\n          log(info.type, info)\n        }\n      })\n    })\n\n    helper.onActive('event', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshEventEmittedEvent, (event) => {\n        const Event = event.payload.Event\n\n        const info = {\n          type: `${event.type}::${Event.eventName}`,\n          owner: getOwnerInfo(Event.owner),\n          eventId: Event.eventId,\n          eventName: Event.eventName,\n        }\n\n        if (event.payload.arg !== undefined) {\n          log(info.type, {\n            ...info,\n            eventArg: event.payload.arg,\n          })\n        } else {\n          log(info.type, info)\n        }\n      })\n    })\n\n    return store\n  }\n}\n"],"names":["shallowEqual","Symbol_observable","require$$0","shimModule","RemeshReactContext","createContext","useRemeshReactContext","context","useContext","Error","useRemeshStore","remeshStore","RemeshRoot","props","storeRef","useRef","store","current","RemeshStore","options","contextValue","useMemo","_jsx","children","useRemeshQuery","queryPayload","Query","owner","triggerRef","subscribe","useCallback","triggerUpdate","getSnapshot","query","state","useSyncExternalStore","subscriptionRef","queryKey","getKey","useEffect","unsubscribe","subscribeQuery","useRemeshEvent","Event","callback","callbackRef","subscription","subscribeEvent","data","useRemeshDomain","domainPayload","domain","getDomain","domainKey","subscribeDomain"],"mappings":"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"}