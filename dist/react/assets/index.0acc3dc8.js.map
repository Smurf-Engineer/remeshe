{"version":3,"file":"index.0acc3dc8.js","sources":["../../../projects/react-demos/src/tree/components/ExpandIcon.tsx","../../../projects/react-demos/src/tree/components/CollapseIcon.tsx","../../../packages/remesh/src/modules/tree.ts","../../../projects/react-demos/src/tree/apis/loadNodes.ts","../../../projects/react-demos/src/tree/domains/TreeDomain.ts","../../../projects/react-demos/src/tree/components/TreeNode.tsx","../../../projects/react-demos/src/tree/TreeApp.tsx","../../../projects/react-demos/src/tree/index.tsx"],"sourcesContent":["import * as React from 'react'\n\nexport type ExpandIconProps = React.ComponentPropsWithoutRef<'svg'>\n\nexport function ExpandIcon(props: ExpandIconProps) {\n  return (\n    <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" {...props}>\n      <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\" />\n    </svg>\n  )\n}\n","import * as React from 'react'\n\nexport type CollapseIconProps = React.ComponentPropsWithoutRef<'svg'>\n\nexport function CollapseIcon(props: CollapseIconProps) {\n  return (\n    <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" {...props}>\n      <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\" />\n    </svg>\n  )\n}\n","import { Remesh, SerializableObject, DomainConceptName, RemeshDomainContext } from '../'\n\nexport type TreeModuleOptions<T extends SerializableObject> = {\n  name: DomainConceptName<'TreeModule'>\n  getKey: (node: T) => string\n  getChildren: (node: T) => T[] | null\n  setChildren: (node: T, children: T[]) => T\n  default?: T\n}\n\nexport const findTreeNode = <T extends SerializableObject>(\n  root: T,\n  options: TreeModuleOptions<T>,\n  id: string,\n): T | null => {\n  if (options.getKey(root) === id) {\n    return root\n  }\n\n  const children = options.getChildren(root)\n\n  if (!children) {\n    return null\n  }\n\n  for (const child of children) {\n    const found = findTreeNode(child, options, id)\n    if (found) {\n      return found\n    }\n  }\n\n  return null\n}\n\nexport const setTreeNode = <T extends SerializableObject>(current: T, options: TreeModuleOptions<T>, node: T): T => {\n  if (options.getKey(current) === node.id) {\n    return node\n  }\n\n  let hasChanged = false\n\n  const children = options.getChildren(current)\n\n  if (!children) {\n    return current\n  }\n\n  const newChildren = children.map((child) => {\n    const newChild = setTreeNode(child, options, node)\n    if (newChild !== child) {\n      hasChanged = true\n    }\n    return newChild\n  })\n\n  if (hasChanged) {\n    return options.setChildren(current, newChildren)\n  }\n\n  return current\n}\n\nexport const removeTreeNode = <T extends SerializableObject>(\n  current: T,\n  options: TreeModuleOptions<T>,\n  keys: string[],\n): T | null => {\n  if (keys.includes(options.getKey(current))) {\n    return null\n  }\n\n  let hasChanged = false\n\n  const children = options.getChildren(current)\n\n  if (!children) {\n    return current\n  }\n\n  const newChildren = [] as T[]\n\n  for (const child of children) {\n    const newChild = removeTreeNode(child, options, keys)\n    if (newChild) {\n      newChildren.push(newChild)\n    } else {\n      hasChanged = true\n    }\n  }\n\n  if (hasChanged) {\n    return options.setChildren(current, newChildren)\n  }\n\n  return current\n}\n\nexport const TreeModule = <T extends SerializableObject>(\n  domain: RemeshDomainContext,\n  options: TreeModuleOptions<T>,\n) => {\n  const TreeState = domain.state<T | null>({\n    name: 'TreeState',\n    default: options.default ?? null,\n  })\n\n  const TreeRootQuery = domain.query({\n    name: 'TreeRootQuery',\n    impl: ({ get }) => {\n      return get(TreeState())\n    },\n  })\n\n  const TreeNodeQuery = domain.query({\n    name: 'TreeNodeQuery',\n    impl: ({ get }, key: string) => {\n      const root = get(TreeRootQuery())\n\n      if (!root) {\n        return null\n      }\n\n      return findTreeNode(root, options, key)\n    },\n  })\n\n  const SetTreeRootCommand = domain.command({\n    name: 'SetTreeRootCommand',\n    impl: ({}, root: T) => {\n      return [TreeState().new(root)]\n    },\n  })\n\n  const SetTreeNodeCommand = domain.command({\n    name: 'SetTreeNodeCommand',\n    impl: ({ get }, newNode: T) => {\n      const root = get(TreeRootQuery())\n\n      if (!root) {\n        return null\n      }\n\n      const newRoot = setTreeNode(root, options, newNode)\n      return TreeState().new(newRoot)\n    },\n  })\n\n  type SetChildrenFailedEventData = {\n    key: string\n    message: string\n  }\n\n  const SetChildrenFailedEvent = domain.event<SetChildrenFailedEventData>({\n    name: 'SetChildrenFailedEvent',\n  })\n\n  type SetChildrenCommandOptions = {\n    key: string\n    children: T[]\n  }\n\n  const SetChildrenCommand = domain.command({\n    name: 'SetChildrenCommand',\n    impl: ({ get }, { key, children }: SetChildrenCommandOptions) => {\n      const current = get(TreeNodeQuery(key))\n\n      if (!current) {\n        return SetChildrenFailedEvent({ key, message: 'Node not found' })\n      }\n\n      const newNode = options.setChildren(current, children)\n\n      return SetTreeNodeCommand(newNode)\n    },\n  })\n\n  const AddChildrenCommand = domain.command({\n    name: 'AddChildrenCommand',\n    impl: ({ get }, { key, children }: SetChildrenCommandOptions) => {\n      const current = get(TreeNodeQuery(key))\n\n      if (!current) {\n        return SetChildrenFailedEvent({ key, message: 'Node not found' })\n      }\n\n      const newNode = options.setChildren(current, [...(options.getChildren(current) ?? []), ...children])\n\n      return SetTreeNodeCommand(newNode)\n    },\n  })\n\n  type RemoveTreeNodeFailedEventData = {\n    keys: string[]\n    message: string\n  }\n\n  const RemoveTreeNodeFailedEvent = domain.event<RemoveTreeNodeFailedEventData>({\n    name: 'RemoveTreeNodeFailedEvent',\n  })\n\n  const RemoveTreeNodeCommand = domain.command({\n    name: 'RemoveTreeNodeCommand',\n    impl: ({ get }, keys: string[]) => {\n      const root = get(TreeRootQuery())\n\n      if (!root) {\n        return RemoveTreeNodeFailedEvent({ keys, message: 'Root not found' })\n      }\n\n      const newRoot = removeTreeNode(root, options, keys)\n\n      if (!newRoot) {\n        return RemoveTreeNodeFailedEvent({ keys, message: `Can't remove root node` })\n      }\n\n      return TreeState().new(newRoot)\n    },\n  })\n\n  return Remesh.module({\n    query: {\n      TreeRootQuery,\n      TreeNodeQuery,\n    },\n    command: {\n      SetTreeRootCommand,\n      SetTreeNodeCommand,\n      RemoveTreeNodeCommand,\n      SetChildrenCommand,\n      AddChildrenCommand,\n    },\n    event: {\n      SetChildrenFailedEvent,\n      RemoveTreeNodeFailedEvent,\n    },\n  })\n}\n","import { TreeData } from '../types'\n\nconst getChildId = (parentId: string, index: number): string =>\n  `${parentId !== 'root' ? `${parentId}-` : ''}${index + 1}`\n\nconst generateNodes = (parentId: string): TreeData[] => {\n  let count = Math.floor(Math.random() * (4 + 1))\n\n  if (parentId === 'root') {\n    count = 4\n  }\n\n  const nodes = [...Array(count)].map(\n    (_, index): TreeData => ({\n      id: getChildId(parentId, index),\n      name: `Child - ${getChildId(parentId, index)}`,\n      children: [],\n    }),\n  )\n\n  return nodes\n}\n\nexport function loadNodes(parentId: string) {\n  return new Promise<TreeData[]>((resolve, reject) => {\n    const timeout = Math.floor(Math.random() * 3000)\n    setTimeout(() => {\n      if (timeout % 4 === 0) {\n        reject(new Error('Failed to load nodes'))\n      } else {\n        resolve(generateNodes(parentId))\n      }\n    }, timeout)\n  })\n}\n","import { Remesh } from 'remesh'\n\nimport { ListModule } from 'remesh/modules/list'\nimport { AsyncModule } from 'remesh/modules/async'\nimport { TreeModule } from 'remesh/modules/tree'\n\nimport { TreeData } from '../types'\nimport { loadNodes } from '../apis/loadNodes'\n\nexport type TreeStatus =\n  | {\n      type: 'loading'\n      id: string\n    }\n  | {\n      type: 'error'\n      id: string\n    }\n\nexport const TreeDomain = Remesh.domain({\n  name: 'TreeDomain',\n  impl: (domain) => {\n    const defaultTreeData: TreeData = {\n      id: 'root',\n      name: 'Root',\n      children: [],\n    }\n\n    const MyTreeModule = TreeModule<TreeData>(domain, {\n      name: 'MyTreeModule',\n      getKey: (node) => node.id,\n      getChildren: (node) => node.children ?? null,\n      setChildren: (node, children) => ({ ...node, children }),\n      default: defaultTreeData,\n    })\n\n    const TreeStatusListModule = ListModule<TreeStatus>(domain, {\n      name: 'TreeStatusListModule',\n      key: (treeStatus) => treeStatus.id.toString(),\n    })\n\n    const TreeAsyncModule = AsyncModule(domain, {\n      name: 'TreeAsyncModule',\n      mode: 'merge',\n      load: ({}, targetId: string) => {\n        return loadNodes(targetId)\n      },\n      onLoading: ({}, targetId) => {\n        return TreeStatusListModule.command.AddItemCommand({\n          type: 'loading',\n          id: targetId,\n        })\n      },\n      onSuccess: ({}, children, targetId) => {\n        return [\n          TreeStatusListModule.command.DeleteItemCommand(targetId),\n          MyTreeModule.command.AddChildrenCommand({\n            key: targetId,\n            children,\n          }),\n        ]\n      },\n      onFailed: ({}, _error, targetId) => {\n        return TreeStatusListModule.command.AddItemCommand({\n          type: 'error',\n          id: targetId,\n        })\n      },\n    })\n\n    const TreeStatusQuery = domain.query({\n      name: 'TreeStatusQuery',\n      impl: ({ get }, targetId: string) => {\n        const statusList = get(TreeStatusListModule.query.ItemListQuery())\n        return statusList.find((status) => status.id === targetId)\n      },\n    })\n\n    return {\n      query: {\n        TreeStatusQuery,\n        TreeRootQuery: MyTreeModule.query.TreeRootQuery,\n        TreeNodeQuery: MyTreeModule.query.TreeNodeQuery,\n      },\n      command: {\n        SetTreeRootCommand: MyTreeModule.command.SetTreeRootCommand,\n        SetTreeNodeCommand: MyTreeModule.command.SetTreeNodeCommand,\n        RemoveTreeNodeCommand: MyTreeModule.command.RemoveTreeNodeCommand,\n        SetChildrenCommand: MyTreeModule.command.SetChildrenCommand,\n        AddChildrenCommand: MyTreeModule.command.AddChildrenCommand,\n        LoadNodesCommand: TreeAsyncModule.command.LoadCommand,\n      },\n      event: {\n        SetChildrenFailedEvent: MyTreeModule.event.SetChildrenFailedEvent,\n        RemoveTreeNodeFailedEvent: MyTreeModule.event.RemoveTreeNodeFailedEvent,\n      },\n    }\n  },\n})\n","import { useState } from 'react'\n\nimport { useRemeshDomain, useRemeshQuery, useRemeshSend } from 'remesh-react'\n\nimport { ExpandIcon } from './ExpandIcon'\nimport { CollapseIcon } from './CollapseIcon'\n\nimport { TreeDomain } from '../domains/TreeDomain'\n\nexport type TreeIconProps = {\n  expanded: boolean\n}\n\nexport const TreeIcon = (props: TreeIconProps) => {\n  if (props.expanded) {\n    return <ExpandIcon />\n  } else {\n    return <CollapseIcon />\n  }\n}\n\nexport type TreeNodeProps = {\n  id: string\n}\n\nexport const TreeNode = (props: TreeNodeProps) => {\n  const send = useRemeshSend()\n  const treeDomain = useRemeshDomain(TreeDomain())\n  const treeData = useRemeshQuery(treeDomain.query.TreeNodeQuery(props.id))\n  const treeStatus = useRemeshQuery(treeDomain.query.TreeStatusQuery(props.id))\n\n  const [expanded, setExpanded] = useState(true)\n\n  if (!treeData) {\n    return null\n  }\n\n  if (treeStatus && treeStatus.type === 'loading') {\n    return <div className=\"title\">Loading...</div>\n  }\n\n  if (treeStatus && treeStatus.type === 'error') {\n    const handleRetry = () => {\n      send(treeDomain.command.LoadNodesCommand(props.id))\n    }\n    return (\n      <div className=\"title\" onClick={handleRetry}>\n        Failed to load more nodes, click to retry\n      </div>\n    )\n  }\n\n  const hasChildren = !!treeData.children && treeData.children.length > 0\n\n  const handleExpand = () => {\n    if (hasChildren) {\n      setExpanded(!expanded)\n    } else {\n      send(treeDomain.command.LoadNodesCommand(props.id))\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"title\" onClick={handleExpand}>\n        <span className=\"toggle\">{hasChildren && <TreeIcon expanded={expanded} />}</span>\n        {treeData.name}\n      </div>\n      <div className=\"sub-nodes\">\n        {expanded &&\n          !!treeData.children &&\n          treeData.children.map((subnode) => {\n            return <TreeNode key={subnode.id} id={subnode.id} />\n          })}\n      </div>\n    </div>\n  )\n}\n","import './style.css'\n\nimport { TreeNode } from './components/TreeNode'\n\nimport { useEffect } from 'react'\n\nimport { useRemeshDomain, useRemeshSend } from 'remesh-react'\n\nimport { TreeDomain } from './domains/TreeDomain'\n\nexport function TreeApp() {\n  const send = useRemeshSend()\n  const treeDomain = useRemeshDomain(TreeDomain())\n\n  useEffect(() => {\n    send(treeDomain.command.LoadNodesCommand('root'))\n  }, [])\n\n  return (\n    <div>\n      <h1>Async Tree View</h1>\n      <TreeNode id=\"root\" />\n    </div>\n  )\n}\n","import React, { StrictMode } from 'react'\nimport * as ReactDOMClient from 'react-dom/client'\n\nimport { Remesh } from 'remesh'\nimport { HashRouter, Routes, Route } from 'react-router-dom'\n\nimport { RemeshRoot } from 'remesh-react'\nimport { RemeshReduxDevtools } from 'remesh-redux-devtools'\nimport { RemeshLogger } from 'remesh-logger'\n\nimport { TreeApp } from './TreeApp'\n\nconst container = document.getElementById('root')\n\nif (container) {\n  const root = ReactDOMClient.createRoot(container)\n  const store = Remesh.store({\n    inspectors: [RemeshReduxDevtools(), RemeshLogger()],\n  })\n\n  root.render(\n    <StrictMode>\n      <RemeshRoot store={store}>\n        <TreeApp />\n      </RemeshRoot>\n    </StrictMode>,\n  )\n}\n"],"names":["ExpandIcon","props","CollapseIcon","findTreeNode","root","options","id","children","child","found","setTreeNode","current","node","hasChanged","newChildren","newChild","removeTreeNode","keys","TreeModule","domain","TreeState","_a","TreeRootQuery","get","TreeNodeQuery","key","SetTreeRootCommand","SetTreeNodeCommand","newNode","newRoot","SetChildrenFailedEvent","SetChildrenCommand","AddChildrenCommand","RemoveTreeNodeFailedEvent","RemoveTreeNodeCommand","Remesh","getChildId","parentId","index","generateNodes","count","_","loadNodes","resolve","reject","timeout","TreeDomain","MyTreeModule","TreeStatusListModule","ListModule","treeStatus","TreeAsyncModule","AsyncModule","targetId","_error","status","TreeIcon","expanded","_jsx","TreeNode","send","useRemeshSend","treeDomain","useRemeshDomain","treeData","useRemeshQuery","query","TreeStatusQuery","setExpanded","useState","type","command","LoadNodesCommand","hasChildren","length","_jsxs","name","map","subnode","TreeApp","useEffect","container","document","getElementById","ReactDOMClient","store","inspectors","RemeshReduxDevtools","RemeshLogger","render","StrictMode","RemeshRoot"],"mappings":"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"}