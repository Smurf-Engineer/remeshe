{"version":3,"file":"index.2980f590.js","sources":["../../../projects/domains/src/todo-mvc/uuid.ts","../../../projects/domains/src/todo-mvc/todo-repo.ts","../../../projects/domains/src/todo-mvc/index.ts","../../../projects/react-demos/src/todo-mvc/hooks.ts","../../../projects/react-demos/src/todo-mvc/TodoItem.tsx","../../../projects/react-demos/src/todo-mvc/TodoList.tsx","../../../projects/react-demos/src/todo-mvc/todoRepo.ts","../../../projects/react-demos/src/todo-mvc/index.tsx"],"sourcesContent":["export const uuid = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8\n    return v.toString(16)\n  })\n","import { Remesh } from 'remesh'\nimport type { Todo } from '.'\n\ntype TodoRepo = {\n  getTodoList: () => Promise<Todo[]>\n  addTodo: (todo: Todo) => void\n  removeTodoByIds: (ids: Todo['id'][]) => void\n  updateTodo: (updateTodo: Todo) => void\n  toggleCompletedByIds: (ids: Todo['id'][], completed: boolean) => void\n}\n\nexport const TodoRepoExtern = Remesh.extern<TodoRepo>({\n  name: 'TodoRepoExtern',\n  default: {\n    async getTodoList() {\n      throw new Error('Not implemented')\n    },\n    async addTodo() {\n      throw new Error('Not implemented')\n    },\n    async removeTodoByIds() {\n      throw new Error('Not implemented')\n    },\n    async updateTodo() {\n      throw new Error('Not implemented')\n    },\n\n    async toggleCompletedByIds() {\n      throw new Error('Not implemented')\n    },\n  },\n})\n","import { Remesh } from 'remesh'\r\nimport { from, map, merge, tap } from 'rxjs'\r\nimport { uuid } from './uuid'\r\nimport { TodoRepoExtern } from './todo-repo'\r\n\r\nexport type Todo = {\r\n  id: string\r\n  name: string\r\n  completed: boolean\r\n}\r\n\r\nexport const TodoDomain = Remesh.domain({\r\n  name: 'TodoDomain',\r\n  impl: (domain) => {\r\n    const repo = domain.getExtern(TodoRepoExtern)\r\n\r\n    const TodoListState = domain.state<Todo[]>({\r\n      name: 'TodoListState',\r\n      default: [],\r\n    })\r\n\r\n    const TodoListQuery = domain.query({\r\n      name: 'TodoListQuery',\r\n      impl({ get }, status?: 'completed' | 'active') {\r\n        const todoList = get(TodoListState())\r\n        if (status === 'active') {\r\n          return todoList.filter((todo) => !todo.completed)\r\n        } else if (status === 'completed') {\r\n          return todoList.filter((todo) => todo.completed)\r\n        } else {\r\n          return todoList\r\n        }\r\n      },\r\n    })\r\n\r\n    const HasCompletedQuery = domain.query({\r\n      name: 'HasCompletedQuery',\r\n      impl({ get }) {\r\n        return get(TodoListQuery('completed')).length > 0\r\n      },\r\n    })\r\n\r\n    const ActiveTodoCountQuery = domain.query({\r\n      name: 'ActiveTodoCountQuery',\r\n      impl({ get }) {\r\n        return get(TodoListQuery('active')).length\r\n      },\r\n    })\r\n\r\n    const AllCompletedQuery = domain.query({\r\n      name: 'AllCompletedQuery',\r\n      impl({ get }) {\r\n        return get(ActiveTodoCountQuery()) === 0 && get(TodoListQuery()).length > 0\r\n      },\r\n    })\r\n\r\n    const TodoAddedEvent = domain.event<Todo>({\r\n      name: 'TodoAddedEvent',\r\n    })\r\n\r\n    const SetTodoListCommand = domain.command({\r\n      name: 'SetTodoListCommand',\r\n      impl(_, todoList: Todo[]) {\r\n        return TodoListState().new(todoList)\r\n      },\r\n    })\r\n\r\n    const AddTodoFailedEvent = domain.event<string>({\r\n      name: 'AddTodoFailedEvent',\r\n    })\r\n\r\n    const AddTodoCommand = domain.command({\r\n      name: 'AddTodoCommand',\r\n      impl({ get }, todoName: string) {\r\n        if (todoName.trim() === '') {\r\n          return [AddTodoFailedEvent('Cannot be empty, please enter the TODO name')]\r\n        }\r\n\r\n        const todoList = get(TodoListState())\r\n        const newTodo = {\r\n          id: uuid(),\r\n          name: todoName,\r\n          completed: false,\r\n        }\r\n\r\n        return [TodoListState().new([newTodo, ...todoList]), TodoAddedEvent(newTodo)]\r\n      },\r\n    })\r\n\r\n    const RemoveTodoEvent = domain.event<Todo['id'][]>({\r\n      name: 'RemoveTodoEvent',\r\n    })\r\n\r\n    const RemoveTodoCommand = domain.command({\r\n      name: 'RemoveTodoCommand',\r\n      impl({ get }, id: Todo['id']) {\r\n        const todoList = get(TodoListState())\r\n        const newTodoList = todoList.filter((todo) => todo.id !== id)\r\n\r\n        return [TodoListState().new(newTodoList), RemoveTodoEvent([id])]\r\n      },\r\n    })\r\n\r\n    const TodoUpdatedEvent = domain.event<Todo>({\r\n      name: 'TodoUpdatedEvent',\r\n    })\r\n\r\n    const UpdateTodoCommand = domain.command({\r\n      name: 'UpdateTodoCommand',\r\n      impl({ get }, payload: { id: Todo['id'] } & Partial<Todo>) {\r\n        const todoList = get(TodoListState())\r\n\r\n        if (payload.name && payload.name.trim() === '') {\r\n          return RemoveTodoCommand(payload.id)\r\n        }\r\n\r\n        const newTodoList = todoList.map((todo) => {\r\n          if (todo.id === payload.id) {\r\n            return {\r\n              ...todo,\r\n              ...payload,\r\n              id: todo.id,\r\n            }\r\n          } else {\r\n            return todo\r\n          }\r\n        })\r\n\r\n        const targetTodo = newTodoList.find((todo) => todo.id === payload.id)\r\n\r\n        if (!targetTodo) {\r\n          return null\r\n        }\r\n\r\n        return [TodoListState().new(newTodoList), TodoUpdatedEvent(targetTodo)]\r\n      },\r\n    })\r\n\r\n    const TodoCompletedChangedEvent = domain.event<{ ids: Todo['id'][]; completed: boolean }>({\r\n      name: 'TodoCompletedChangedEvent',\r\n    })\r\n\r\n    const ToggleTodoCompletedCommand = domain.command({\r\n      name: 'ToggleTodoCompletedCommand',\r\n      impl({ get }, targetTodoId: Todo['id']) {\r\n        const todoList = get(TodoListState())\r\n\r\n        const newTodoList = todoList.map((todo) => {\r\n          if (todo.id === targetTodoId) {\r\n            return {\r\n              ...todo,\r\n              completed: !todo.completed,\r\n            }\r\n          }\r\n          return todo\r\n        })\r\n\r\n        const targetTodo = newTodoList.find((todo) => todo.id === targetTodoId)\r\n\r\n        if (!targetTodo) {\r\n          return null\r\n        }\r\n\r\n        const eventData = {\r\n          ids: [targetTodoId],\r\n          completed: targetTodo?.completed,\r\n        }\r\n\r\n        return [TodoListState().new(newTodoList), TodoCompletedChangedEvent(eventData)]\r\n      },\r\n    })\r\n\r\n    const ToggleAllTodoCompletedCommand = domain.command({\r\n      name: 'ToggleAllTodoCompletedCommand',\r\n      impl({ get }, completed: boolean) {\r\n        const todoList = get(TodoListState())\r\n\r\n        if (todoList.length === 0) {\r\n          return null\r\n        }\r\n\r\n        const newTodoList = todoList.map((todo) => {\r\n          return { ...todo, completed }\r\n        })\r\n\r\n        return [\r\n          TodoListState().new(newTodoList),\r\n          TodoCompletedChangedEvent({\r\n            ids: newTodoList.map((todo) => todo.id),\r\n            completed,\r\n          }),\r\n        ]\r\n      },\r\n    })\r\n\r\n    const ClearCompletedCommand = domain.command({\r\n      name: 'ClearCompletedCommand',\r\n      impl({ get }) {\r\n        const todoList = get(TodoListState())\r\n        const newTodoList = todoList.filter((todo) => !todo.completed)\r\n        const removedTodoIdList = todoList.filter((todo) => todo.completed).map((todo) => todo.id)\r\n\r\n        return [TodoListState().new(newTodoList), RemoveTodoEvent(removedTodoIdList)]\r\n      },\r\n    })\r\n\r\n    const FromRepoToStateCommand = domain.command$({\r\n      name: 'FromRepoToStateCommand',\r\n      impl() {\r\n        return from(repo.getTodoList()).pipe(map((todos) => SetTodoListCommand(todos)))\r\n      },\r\n    })\r\n\r\n    const FromStateToRepoCommand = domain.command$({\r\n      name: 'FromStateToRepoCommand',\r\n      impl: ({ fromEvent }) => {\r\n        const addTodo$ = fromEvent(TodoAddedEvent).pipe(tap((todo) => repo.addTodo(todo)))\r\n\r\n        const removeTodo$ = fromEvent(RemoveTodoEvent).pipe(tap((ids) => repo.removeTodoByIds(ids)))\r\n\r\n        const updateTodo$ = fromEvent(TodoUpdatedEvent).pipe(tap((todo) => repo.updateTodo(todo)))\r\n\r\n        const toggleTodoCompleted$ = fromEvent(TodoCompletedChangedEvent).pipe(\r\n          tap((eventData) => repo.toggleCompletedByIds(eventData.ids, eventData.completed)),\r\n        )\r\n\r\n        return merge(addTodo$, removeTodo$, updateTodo$, toggleTodoCompleted$).pipe(map(() => null))\r\n      },\r\n    })\r\n\r\n    domain.ignite(() => FromRepoToStateCommand())\r\n    domain.ignite(() => FromStateToRepoCommand())\r\n\r\n    return {\r\n      query: {\r\n        TodoListQuery,\r\n        ActiveTodoCountQuery,\r\n        HasCompletedQuery,\r\n        AllCompletedQuery,\r\n      },\r\n      command: {\r\n        AddTodoCommand,\r\n        RemoveTodoCommand,\r\n        ToggleTodoCompletedCommand,\r\n        ToggleAllTodoCompletedCommand,\r\n        UpdateTodoCommand,\r\n        ClearCompletedCommand,\r\n      },\r\n      event: { AddTodoFailedEvent },\r\n    }\r\n  },\r\n})\r\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\n\nexport function useInputHandler(defaultValue: string) {\n  const [value, setValue] = useState(defaultValue)\n\n  const onChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value)\n  }, [])\n\n  return [value, onChange, setValue] as const\n}\n\nexport function useKeyPressHandler(key: string, callback: (event: React.KeyboardEvent<HTMLInputElement>) => void) {\n  const callbackRef = useRef(callback)\n\n  const handleKeyPress = useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key.toLocaleLowerCase() === key.toLocaleLowerCase()) {\n        event.preventDefault()\n        callbackRef.current(event)\n      }\n    },\n    [key],\n  )\n\n  useEffect(() => {\n    callbackRef.current = callback\n  })\n\n  return handleKeyPress\n}\n","import { useEffect, useRef, useState } from 'react'\nimport { useRemeshDomain } from 'remesh-react'\n\nimport { Todo, TodoDomain } from 'remesh-domains-for-demos/dist/todo-mvc'\nimport { useInputHandler, useKeyPressHandler } from './hooks'\n\nexport function TodoItem({ todo }: { todo: Todo }) {\n  const domain = useRemeshDomain(TodoDomain())\n\n  const [editing, setEditing] = useState(false)\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [todoName, handleTodoNameChange] = useInputHandler(todo.name)\n\n  const handlePressEnter = useKeyPressHandler('Enter', () => {\n    domain.command.UpdateTodoCommand({ ...todo, name: todoName })\n    setEditing(false)\n  })\n\n  const handleEnableEdit = () => {\n    setEditing(true)\n  }\n\n  const handleSave = () => {\n    domain.command.ToggleTodoCompletedCommand(todo.id)\n  }\n\n  const handleDelete = () => {\n    domain.command.RemoveTodoCommand(todo.id)\n  }\n\n  useEffect(() => {\n    if (editing) {\n      ref.current?.focus()\n    }\n  }, [editing])\n\n  return (\n    <li onDoubleClick={handleEnableEdit} className={`${editing ? 'editing' : ''} ${todo.completed ? 'completed' : ''}`}>\n      <div className=\"view\">\n        <input type=\"checkbox\" className=\"toggle\" checked={todo.completed} onChange={handleSave} />\n        <label>{todo.name}</label>\n        <button className=\"destroy\" onClick={handleDelete} />\n      </div>\n      {editing && (\n        <input\n          ref={ref}\n          className=\"edit\"\n          value={todoName}\n          onChange={handleTodoNameChange}\n          onKeyPress={handlePressEnter}\n          onBlur={() => {\n            setEditing(false)\n          }}\n        />\n      )}\n    </li>\n  )\n}\n","import { useRemeshDomain, useRemeshEvent, useRemeshQuery } from 'remesh-react'\nimport { NavLink, useParams } from 'react-router-dom'\n\nimport { TodoDomain } from 'remesh-domains-for-demos/dist/todo-mvc'\nimport { useInputHandler, useKeyPressHandler } from './hooks'\nimport { TodoItem } from './TodoItem'\n\ntype FilterType = 'completed' | 'active' | undefined\n\nexport const TodoList = () => {\n  const { filter } = useParams()\n\n  const domain = useRemeshDomain(TodoDomain())\n\n  const todoList = useRemeshQuery(domain.query.TodoListQuery(filter as FilterType))\n  const activeTodoCount = useRemeshQuery(domain.query.ActiveTodoCountQuery())\n  const hasCompleted = useRemeshQuery(domain.query.HasCompletedQuery())\n  const allCompleted = useRemeshQuery(domain.query.AllCompletedQuery())\n\n  const [newTodo, handleTodoNameInput, setNewTodo] = useInputHandler('')\n\n  const handlePressEnter = useKeyPressHandler('Enter', () => {\n    domain.command.AddTodoCommand(newTodo)\n    setNewTodo('')\n  })\n\n  const handleToggleAll = () => {\n    domain.command.ToggleAllTodoCompletedCommand(!allCompleted)\n  }\n\n  const handleClearCompleted = () => {\n    domain.command.ClearCompletedCommand()\n  }\n\n  useRemeshEvent(domain.event.AddTodoFailedEvent, (message) => {\n    alert(message)\n  })\n\n  console.log('render list')\n\n  return (\n    <div className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={newTodo}\n          onChange={handleTodoNameInput}\n          onKeyDown={handlePressEnter}\n        />\n      </header>\n\n      <section className=\"main\">\n        <input\n          id=\"toggle-all\"\n          type=\"checkbox\"\n          className=\"toggle-all\"\n          checked={allCompleted}\n          onChange={handleToggleAll}\n        />\n        <label htmlFor=\"toggle-all\" />\n        <ul className=\"todo-list\">\n          {todoList.map((todo) => (\n            <TodoItem key={todo.id} todo={todo} />\n          ))}\n        </ul>\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          <strong>{activeTodoCount}</strong> items left\n        </span>\n        <ul className=\"filters\">\n          <li>\n            <NavLink to=\"/\" className={(navData) => (navData.isActive ? 'selected' : '')}>\n              All\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/active\" className={(navData) => (navData.isActive ? 'selected' : '')}>\n              Active\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/completed\" className={(navData) => (navData.isActive ? 'selected' : '')}>\n              Completed\n            </NavLink>\n          </li>\n        </ul>\n        {hasCompleted && (\n          <button className=\"clear-completed\" onClick={handleClearCompleted}>\n            Clear completed\n          </button>\n        )}\n      </footer>\n    </div>\n  )\n}\n","import localforage from 'localforage'\nimport type { Todo } from 'remesh-domains-for-demos/dist/todo-mvc'\nimport { TodoRepoExtern } from 'remesh-domains-for-demos/dist/todo-mvc/todo-repo'\n\nconst storageKey = 'todo-mvc-data'\nconst getTodoList = () => {\n  return localforage.getItem<Todo[]>(storageKey).then((value) => value ?? [])\n}\n\nexport const TodoRepoExternImpl = TodoRepoExtern.impl({\n  async getTodoList() {\n    return getTodoList()\n  },\n  async addTodo(todo: Todo) {\n    let data = await getTodoList()\n    await localforage.setItem(storageKey, data.concat(todo))\n  },\n  async removeTodoByIds(ids) {\n    let data = await getTodoList()\n    await localforage.setItem(\n      storageKey,\n      data.filter((item) => !ids.includes(item.id)),\n    )\n  },\n  async updateTodo(updateTodo) {\n    let data = await getTodoList()\n    await localforage.setItem(\n      storageKey,\n      data.map((todo) => (todo.id === updateTodo.id ? { ...todo, ...updateTodo } : todo)),\n    )\n  },\n\n  async toggleCompletedByIds(ids, completed) {\n    let data = await getTodoList()\n    await localforage.setItem(\n      storageKey,\n      data.map((todo) => (ids.includes(todo.id) ? { ...todo, completed } : todo)),\n    )\n  },\n})\n","import React, { StrictMode } from 'react'\nimport * as ReactDOMClient from 'react-dom/client'\n\nimport { Remesh } from 'remesh'\nimport { HashRouter, Routes, Route } from 'react-router-dom'\n\nimport { RemeshRoot } from 'remesh-react'\nimport { RemeshReduxDevtools } from 'remesh-redux-devtools'\nimport { RemeshLogger } from 'remesh-logger'\n\nimport { TodoList } from './TodoList'\nimport { TodoRepoExternImpl } from './todoRepo'\n\nconst container = document.getElementById('root')\n\nif (container) {\n  const root = ReactDOMClient.createRoot(container)\n  const store = Remesh.store({\n    externs: [TodoRepoExternImpl],\n    inspectors: [\n      RemeshReduxDevtools(),\n      RemeshLogger({\n        include: ['command', 'query', 'event', 'domain', 'command$', 'state'],\n      }),\n    ],\n  })\n\n  root.render(\n    <StrictMode>\n      <RemeshRoot store={store}>\n        <HashRouter basename=\"/\">\n          <Routes>\n            <Route path=\"/\" element={<TodoList />} />\n            <Route path=\"/:filter\" element={<TodoList />} />\n          </Routes>\n        </HashRouter>\n      </RemeshRoot>\n    </StrictMode>,\n  )\n}\n"],"names":["useState","useCallback","useRef","useEffect","todo","domain","useRemeshDomain","TodoDomain","editing","setEditing","ref","todoName","handleTodoNameChange","useInputHandler","name","handlePressEnter","useKeyPressHandler","command","UpdateTodoCommand","handleEnableEdit","handleSave","ToggleTodoCompletedCommand","id","handleDelete","RemoveTodoCommand","current","focus","completed","_jsxs","_jsx","TodoList","filter","useParams","todoList","useRemeshQuery","query","TodoListQuery","activeTodoCount","ActiveTodoCountQuery","hasCompleted","HasCompletedQuery","allCompleted","AllCompletedQuery","newTodo","handleTodoNameInput","setNewTodo","AddTodoCommand","handleToggleAll","ToggleAllTodoCompletedCommand","handleClearCompleted","ClearCompletedCommand","event","AddTodoFailedEvent","message","alert","console","log","map","navData","isActive","container","document","getElementById","root","ReactDOMClient","store","Remesh","externs","TodoRepoExternImpl","inspectors","RemeshReduxDevtools","RemeshLogger","include","render","StrictMode"],"mappings":"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"}