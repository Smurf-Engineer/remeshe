{"version":3,"file":"index.46ec0579.js","sources":["../../../projects/react-demos/src/todo-mvc-with-multiple-domains/domain-externs/storage.ts","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/domain-externs-impl/storage.ts","../../../packages/remesh/src/modules/text.ts","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/domain-modules/sync-storage.ts","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/domains/TodoInput.ts","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/utils/uuid.ts","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/domains/TodoList.ts","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/hooks/useKeyPressHandler.ts","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/components/TodoHeader.tsx","../../../packages/remesh/src/modules/switch.ts","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/domains/TodoFilter.ts","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/domains/TodoApp.ts","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/hooks/useInputHandler.ts","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/components/TodoItem.tsx","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/components/TodoList.tsx","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/components/TodoFooter.tsx","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/components/TodoApp.tsx","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/index.tsx"],"sourcesContent":["import { Remesh } from 'remesh'\r\n\r\nexport type Storage = {\r\n  get: <T>(key: string) => Promise<T | null>\r\n  set: <T>(key: string, value: T) => Promise<void>\r\n  clear: (key: string) => Promise<void>\r\n}\r\n\r\nexport const Storage = Remesh.extern<Storage>({\r\n  name: 'Storage',\r\n  default: {\r\n    get: () => {\r\n      throw new Error('Not implemented')\r\n    },\r\n    set: () => {\r\n      throw new Error('Not implemented')\r\n    },\r\n    clear: () => {\r\n      throw new Error('Not implemented')\r\n    },\r\n  },\r\n})\r\n","import localforage from 'localforage'\r\nimport { Storage } from '../domain-externs/storage'\r\n\r\nexport const StorageImpl = Storage({\r\n  get: (key) => {\r\n    return localforage.getItem(key)\r\n  },\r\n  set: async (key, value) => {\r\n    await localforage.setItem(key, value)\r\n  },\r\n  clear: (key) => {\r\n    return localforage.removeItem(key)\r\n  },\r\n})\r\n","import { RemeshDomainContext } from '../index'\n\nexport type TextModuleOptions = {\n  name: string\n  default?: string\n}\n\nexport type TextChangedEventData = {\n  previous: string\n  current: string\n}\n\nexport type TextClearedEventData = {\n  previous: string\n}\n\nexport const TextModule = (domain: RemeshDomainContext, options: TextModuleOptions) => {\n  const TextState = domain.state({\n    name: `${options.name}.TextState`,\n    default: options.default ?? '',\n  })\n\n  const text = domain.query({\n    name: `${options.name}.TextQuery`,\n    impl: ({ get }) => get(TextState()),\n  })\n\n  const TextChangedEvent = domain.event<TextChangedEventData>({\n    name: `${options.name}.TextChangedEvent`,\n  })\n\n  const setText = domain.command({\n    name: `${options.name}.setText`,\n    impl: ({ get }, current: string) => {\n      const previous = get(TextState())\n\n      const result = [TextState().new(current), TextChangedEvent({ previous, current })]\n\n      if (current === '') {\n        return [...result, TextClearedEvent({ previous })]\n      }\n\n      return result\n    },\n  })\n\n  const TextClearedEvent = domain.event<TextClearedEventData>({\n    name: `${options.name}.InputClearedEvent`,\n  })\n\n  const clearText = domain.command({\n    name: `${options.name}.clearText`,\n    impl: () => {\n      return setText('')\n    },\n  })\n\n  return {\n    query: {\n      text,\n    },\n    command: {\n      setText,\n      clearText,\n    },\n    event: {\n      TextChangedEvent,\n      TextClearedEvent,\n    },\n  }\n}\n","import { RemeshDomainContext, RemeshCommandOutput, RemeshEvent } from 'remesh'\r\n\r\nimport { from } from 'rxjs'\r\nimport { filter, map, tap } from 'rxjs/operators'\r\n\r\nimport { Storage } from '../domain-externs/storage'\r\n\r\nexport type SyncStorageOptions<T, U = T> = {\r\n  storageKey: string\r\n  TriggerEvent: RemeshEvent<any, T>\r\n  saveData: (event: T) => U\r\n  readData: (value: U) => RemeshCommandOutput\r\n}\r\n\r\nconst createOptions = <R>(storageKey: string, callback: <T, U>(options: SyncStorageOptions<T, U>) => R) => {\r\n  return {\r\n    listenTo: <T>(TriggerEvent: RemeshEvent<any, T>) => {\r\n      return {\r\n        saveData: <U>(saveData: (event: T) => U) => {\r\n          return {\r\n            readData: (readData: (value: U) => RemeshCommandOutput) => {\r\n              return callback({\r\n                storageKey,\r\n                TriggerEvent,\r\n                saveData: saveData,\r\n                readData: readData,\r\n              })\r\n            },\r\n          }\r\n        },\r\n        readData: (readData: (value: T) => RemeshCommandOutput) => {\r\n          return callback({\r\n            storageKey,\r\n            TriggerEvent,\r\n            saveData: (event: T) => event,\r\n            readData: readData,\r\n          })\r\n        },\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\nconst createSyncStorage = <T, U = T>(domain: RemeshDomainContext, options: SyncStorageOptions<T, U>) => {\r\n  const storage = domain.getExtern(Storage)\r\n\r\n  domain.command$({\r\n    name: 'readStorage',\r\n    impl: () => {\r\n      return from(storage.get<U>(options.storageKey)).pipe(\r\n        filter((value): value is U => !!value),\r\n        map((value) => options.readData(value)),\r\n      )\r\n    },\r\n  })\r\n\r\n  domain.command$({\r\n    name: 'writeStorage',\r\n    impl: ({ fromEvent }) => {\r\n      return fromEvent(options.TriggerEvent).pipe(\r\n        tap((value) => storage.set(options.storageKey, options.saveData(value))),\r\n        map(() => null),\r\n      )\r\n    },\r\n  })\r\n}\r\n\r\nexport const syncStorage = (domain: RemeshDomainContext, storageKey: string) => {\r\n  return createOptions(storageKey, (options) => createSyncStorage(domain, options))\r\n}\r\n","import { Remesh } from 'remesh'\r\nimport { TextModule } from 'remesh/modules/text'\r\n\r\nimport { syncStorage } from '../domain-modules/sync-storage'\r\n\r\nexport const TODO_INPUT_STORAGE_KEY = 'remesh-example/todo-input'\r\n\r\nexport const TodoInputDomain = Remesh.domain({\r\n  name: 'TodoInput',\r\n  impl: (domain) => {\r\n    const todoInputModule = TextModule(domain, {\r\n      name: 'TodoInput',\r\n    })\r\n\r\n    const todoInput = todoInputModule.query.text\r\n\r\n    const TodoInputChangedEvent = todoInputModule.event.TextChangedEvent\r\n\r\n    const TodoInputClearedEvent = todoInputModule.event.TextClearedEvent\r\n\r\n    const setTodoInput = todoInputModule.command.setText\r\n\r\n    const clearTodoInput = todoInputModule.command.clearText\r\n\r\n    syncStorage(domain, TODO_INPUT_STORAGE_KEY)\r\n      .listenTo(TodoInputChangedEvent)\r\n      .saveData((event) => event.current)\r\n      .readData((value) => setTodoInput(value))\r\n\r\n    return {\r\n      query: {\r\n        todoInput: todoInput,\r\n      },\r\n      command: {\r\n        setTodoInput,\r\n        clearTodoInput,\r\n      },\r\n      event: {\r\n        TodoInputChangedEvent,\r\n        TodoInputClearedEvent,\r\n      },\r\n    }\r\n  },\r\n})\r\n","export const uuid = () =>\r\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n    var r = (Math.random() * 16) | 0,\r\n      v = c == 'x' ? r : (r & 0x3) | 0x8\r\n    return v.toString(16)\r\n  })\r\n","import { Remesh } from 'remesh'\r\nimport { ListModule } from 'remesh/modules/list'\r\n\r\nimport { uuid } from '../utils/uuid'\r\nimport { syncStorage } from '../domain-modules/sync-storage'\r\n\r\nexport const TODO_LIST_STORAGE_KEY = 'remesh-example/todo-list'\r\n\r\nexport type Todo = {\r\n  id: string\r\n  title: string\r\n  completed: boolean\r\n}\r\n\r\nexport type Todos = Todo[]\r\n\r\nexport const getTodoId = (todo: Todo) => todo.id\r\n\r\nexport const TodoListDomain = Remesh.domain({\r\n  name: 'TodoList',\r\n  impl: (domain) => {\r\n    const todoListModule = ListModule<Todo>(domain, {\r\n      name: 'TodoList',\r\n      key: getTodoId,\r\n    })\r\n\r\n    const todoListQuery = todoListModule.query.itemList\r\n\r\n    const todoQuery = todoListModule.query.item\r\n\r\n    const todoKeyListQuery = todoListModule.query.keyList\r\n\r\n    const TodoListChangedEvent = todoListModule.event.ListChangedEvent\r\n\r\n    const TodoItemAddedEvent = todoListModule.event.ItemAddedEvent\r\n\r\n    const TodoItemUpdatedEvent = todoListModule.event.ItemUpdatedEvent\r\n\r\n    const TodoItemDeletedEvent = todoListModule.event.ItemDeletedEvent\r\n\r\n    const FailedToAddTodoEvent = todoListModule.event.FailedToAddItemEvent\r\n\r\n    const FailedToUpdateTodoEvent = todoListModule.event.FailedToUpdateItemEvent\r\n\r\n    const setTodoList = todoListModule.command.setList\r\n\r\n    const addTodo = domain.command({\r\n      name: 'TodoList.addTodo',\r\n      impl: (_, title: string) => {\r\n        if (title === '') {\r\n          return FailedToAddTodoEvent({\r\n            reason: 'Title cannot be empty',\r\n          })\r\n        }\r\n\r\n        const todo: Todo = {\r\n          id: uuid(),\r\n          title: title,\r\n          completed: false,\r\n        }\r\n\r\n        return todoListModule.command.addItem(todo)\r\n      },\r\n    })\r\n\r\n    const updateTodo = domain.command({\r\n      name: 'TodoList.updateTodo',\r\n      impl: (_, todo: Todo) => {\r\n        if (todo.title === '') {\r\n          return deleteTodo(todo.id)\r\n        }\r\n        return todoListModule.command.updateItem(todo)\r\n      },\r\n    })\r\n\r\n    const deleteTodo = todoListModule.command.deleteItem\r\n\r\n    const activeTodoList = domain.query({\r\n      name: 'ActiveTodoListQuery',\r\n      impl: ({ get }) => {\r\n        const todos = get(todoListQuery())\r\n        return todos.filter((todo) => !todo.completed)\r\n      },\r\n    })\r\n\r\n    const completedTodoList = domain.query({\r\n      name: 'CompletedTodoListQuery',\r\n      impl: ({ get }) => {\r\n        const todos = get(todoListQuery())\r\n        return todos.filter((todo) => todo.completed)\r\n      },\r\n    })\r\n\r\n    const activeTodoCount = domain.query({\r\n      name: 'ActiveTodoCountQuery',\r\n      impl: ({ get }) => {\r\n        const todos = get(activeTodoList())\r\n        return todos.length\r\n      },\r\n    })\r\n\r\n    const completedTodoCountQuery = domain.query({\r\n      name: 'CompletedTodoCountQuery',\r\n      impl: ({ get }) => {\r\n        const todos = get(completedTodoList())\r\n        return todos.length\r\n      },\r\n    })\r\n\r\n    const isAllCompleted = domain.query({\r\n      name: 'IsAllCompletedQuery',\r\n      impl: ({ get }) => {\r\n        const todos = get(todoListQuery())\r\n\r\n        if (todos.length === 0) {\r\n          return false\r\n        }\r\n\r\n        const completedTodoCount = get(completedTodoCountQuery())\r\n\r\n        return completedTodoCount === todos.length\r\n      },\r\n    })\r\n\r\n    const toggleTodo = domain.command({\r\n      name: 'toggleTodo',\r\n      impl: ({ get }, id: Todo['id']) => {\r\n        const todo = get(todoQuery(id))\r\n        const newTodo: Todo = {\r\n          ...todo,\r\n          completed: !todo.completed,\r\n        }\r\n\r\n        return todoListModule.command.updateItem(newTodo)\r\n      },\r\n    })\r\n\r\n    const toggleAllTodos = domain.command({\r\n      name: 'toggleAllTodos',\r\n      impl: ({ get }) => {\r\n        const todoList = get(todoListQuery())\r\n\r\n        if (todoList.length === 0) {\r\n          return null\r\n        }\r\n\r\n        const activeCount = get(activeTodoCount())\r\n        const completed = activeCount > 0\r\n        const newTodoList = todoList.map((todo) => ({\r\n          ...todo,\r\n          completed,\r\n        }))\r\n\r\n        return setTodoList(newTodoList)\r\n      },\r\n    })\r\n\r\n    const clearAllCompletedTodos = domain.command({\r\n      name: 'clearAllCompletedTodos',\r\n      impl: ({ get }) => {\r\n        const todoList = get(todoListQuery())\r\n\r\n        if (todoList.length === 0) {\r\n          return null\r\n        }\r\n\r\n        const newTodoList = todoList.filter((todo) => !todo.completed)\r\n\r\n        return setTodoList(newTodoList)\r\n      },\r\n    })\r\n\r\n    syncStorage(domain, TODO_LIST_STORAGE_KEY)\r\n      .listenTo(TodoListChangedEvent)\r\n      .saveData((event) => event.current)\r\n      .readData((todos) => setTodoList(todos))\r\n\r\n    return {\r\n      query: {\r\n        todoState: todoQuery,\r\n        todoKeyList: todoKeyListQuery,\r\n        todoList: todoListQuery,\r\n        activeTodoList: activeTodoList,\r\n        completedTodoList: completedTodoList,\r\n        activeTodoCount: activeTodoCount,\r\n        completedTodoCount: completedTodoCountQuery,\r\n        isAllCompleted: isAllCompleted,\r\n      },\r\n      command: {\r\n        setTodoList,\r\n        addTodo,\r\n        updateTodo,\r\n        deleteTodo,\r\n        toggleTodo,\r\n        toggleAllTodos,\r\n        clearAllCompletedTodos,\r\n      },\r\n      event: {\r\n        TodoItemAddedEvent,\r\n        TodoItemUpdatedEvent,\r\n        TodoItemDeletedEvent,\r\n        FailedToAddTodoEvent,\r\n        FailedToUpdateTodoEvent,\r\n        TodoListChangedEvent,\r\n      },\r\n    }\r\n  },\r\n})\r\n","import React from 'react'\r\n\r\nexport function useKeyPressHandler(\r\n  keys: string | string[],\r\n  callback: (event: React.KeyboardEvent<HTMLInputElement>, key: string) => void,\r\n) {\r\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    const keyList = Array.isArray(keys) ? keys : [keys]\r\n    for (const key of keyList) {\r\n      if (event.key.toLowerCase() === key.toLowerCase()) {\r\n        event.preventDefault()\r\n        callback(event, key)\r\n      }\r\n    }\r\n  }\r\n\r\n  return handleKeyPress\r\n}\r\n","import React from 'react'\r\n\r\nimport { useRemeshDomain, useRemeshEvent, useRemeshQuery } from 'remesh-react'\r\n\r\nimport { TodoInputDomain } from '../domains/TodoInput'\r\nimport { TodoListDomain } from '../domains/TodoList'\r\n\r\nimport { useKeyPressHandler } from '../hooks/useKeyPressHandler'\r\n\r\nexport const TodoHeader = () => {\r\n  const todoInputDomain = useRemeshDomain(TodoInputDomain())\r\n  const todoListDomain = useRemeshDomain(TodoListDomain())\r\n\r\n  const todoInput = useRemeshQuery(todoInputDomain.query.todoInput())\r\n\r\n  const handleTodoInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    todoInputDomain.command.setTodoInput(event.target.value)\r\n  }\r\n\r\n  const handlePressEnter = useKeyPressHandler('Enter', () => {\r\n    todoListDomain.command.addTodo(todoInput)\r\n  })\r\n\r\n  useRemeshEvent(todoListDomain.event.FailedToAddTodoEvent, (event) => {\r\n    alert(event.reason)\r\n  })\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>todos</h1>\r\n      <input\r\n        className=\"new-todo\"\r\n        placeholder=\"What needs to be done?\"\r\n        value={todoInput}\r\n        onChange={handleTodoInputChange}\r\n        onKeyDown={handlePressEnter}\r\n      />\r\n    </header>\r\n  )\r\n}\r\n","import { RemeshDomainContext } from '../index'\n\nexport type SwitchModuleOptions<T> = {\n  name: string\n  default: T\n}\n\nexport type SwitchedEventData<T> = {\n  previous: T\n  current: T\n}\n\nexport const SwitchModule = <T>(domain: RemeshDomainContext, options: SwitchModuleOptions<T>) => {\n  const SwitchState = domain.state({\n    name: `${options.name}.SwitchState`,\n    default: options.default,\n  })\n\n  const switchState = domain.query({\n    name: `${options.name}.SwitchStateQuery`,\n    impl: ({ get }) => get(SwitchState()),\n  })\n\n  const SwitchedEvent = domain.event<SwitchedEventData<T>>({\n    name: `${options.name}.SwitchedEvent`,\n  })\n\n  const switchTo = domain.command({\n    name: `${options.name}.switchTo`,\n    impl: ({ get }, current: T) => {\n      const previous = get(SwitchState())\n\n      const result = [SwitchState().new(current), SwitchedEvent({ previous, current })]\n\n      return result\n    },\n  })\n\n  return {\n    query: {\n      switchState,\n    },\n    command: {\n      switchTo,\n    },\n    event: {\n      SwitchedEvent,\n    },\n  }\n}\n","import { Remesh } from 'remesh'\r\nimport { SwitchModule } from 'remesh/modules/switch'\r\n\r\nimport { syncStorage } from '../domain-modules/sync-storage'\r\n\r\nexport const TODO_FILTER_STORAGE_KEY = 'remesh-example/todo-filter'\r\n\r\nexport type TodoFilter = 'all' | 'active' | 'completed'\r\n\r\nexport const getValidTodoFilter = (input: string | undefined): TodoFilter => {\r\n  if (input === undefined) {\r\n    return 'all'\r\n  }\r\n\r\n  switch (input) {\r\n    case 'all':\r\n    case 'active':\r\n    case 'completed':\r\n      return input\r\n    default:\r\n      return 'all'\r\n  }\r\n}\r\n\r\nexport const TodoFilterDomain = Remesh.domain({\r\n  name: 'TodoFilter',\r\n  impl: (domain) => {\r\n    const todoFilterModule = SwitchModule<TodoFilter>(domain, {\r\n      name: 'TodoFilter',\r\n      default: 'all',\r\n    })\r\n\r\n    const todoFilter = todoFilterModule.query.switchState\r\n\r\n    const TodoFilterChangedEvent = todoFilterModule.event.SwitchedEvent\r\n    \r\n    const switchFilter = todoFilterModule.command.switchTo\r\n\r\n    const setFilter = domain.command({\r\n      name: 'TodoFilter.setFilter',\r\n      impl: (_, input: string) => {\r\n        const filter = getValidTodoFilter(input)\r\n        return switchFilter(filter)\r\n      },\r\n    })\r\n\r\n\r\n    syncStorage(domain, TODO_FILTER_STORAGE_KEY)\r\n      .listenTo(TodoFilterChangedEvent)\r\n      .saveData((event) => event.current)\r\n      .readData((value) => setFilter(value))\r\n\r\n    return {\r\n      query: {\r\n        todoFilter: todoFilter,\r\n      },\r\n      command: {\r\n        setFilter,\r\n        switchFilter\r\n      },\r\n      event: {\r\n        TodoFilterChangedEvent,\r\n      },\r\n    }\r\n  },\r\n})\r\n","import { Remesh } from 'remesh'\r\n\r\nimport { filter, map } from 'rxjs/operators'\r\n\r\nimport { TodoInputDomain } from './TodoInput'\r\nimport { TodoListDomain, getTodoId } from './TodoList'\r\nimport { TodoFilterDomain } from './TodoFilter'\r\n\r\nexport const TodoAppDomain = Remesh.domain({\r\n  name: 'TodoApp',\r\n  impl: (domain) => {\r\n    const todoHeader = domain.getDomain(TodoInputDomain())\r\n    const todoList = domain.getDomain(TodoListDomain())\r\n    const todoFooter = domain.getDomain(TodoFilterDomain())\r\n\r\n    const FilteredTodoKeyListQuery = domain.query({\r\n      name: 'FilteredTodoList',\r\n      impl: ({ get }) => {\r\n        const filter = get(todoFooter.query.todoFilter())\r\n\r\n        if (filter === 'all') {\r\n          return get(todoList.query.todoList()).map(getTodoId)\r\n        }\r\n\r\n        if (filter === 'active') {\r\n          return get(todoList.query.activeTodoList()).map(getTodoId)\r\n        }\r\n\r\n        if (filter === 'completed') {\r\n          return get(todoList.query.completedTodoList()).map(getTodoId)\r\n        }\r\n\r\n        throw new Error(`Unknown filter: ${filter}`)\r\n      },\r\n    })\r\n\r\n    domain.command$({\r\n      name: 'clearTodoInputWhenSubmit',\r\n      impl: ({ fromEvent, get }) => {\r\n        return fromEvent(todoList.event.TodoItemAddedEvent).pipe(\r\n          filter((event) => {\r\n            const todoInput = get(todoHeader.query.todoInput())\r\n            return todoInput === event.item.title\r\n          }),\r\n          map(() => todoHeader.command.clearTodoInput()),\r\n        )\r\n      },\r\n    })\r\n\r\n    return {\r\n      query: {\r\n        FilteredTodoKeyListQuery,\r\n      },\r\n      command: {},\r\n      event: {},\r\n    }\r\n  },\r\n})\r\n","import React, { useCallback, useState } from 'react'\r\n\r\nexport function useInputHandler(defaultValue: string) {\r\n  const [value, setValue] = useState(defaultValue)\r\n\r\n  const onChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setValue(event.target.value)\r\n  }, [])\r\n\r\n  return [value, onChange, setValue] as const\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useRemeshDomain, useRemeshQuery } from 'remesh-react'\r\n\r\nimport { Todo, TodoListDomain } from '../domains/TodoList'\r\n\r\nimport { useKeyPressHandler } from '../hooks/useKeyPressHandler'\r\nimport { useInputHandler } from '../hooks/useInputHandler'\r\n\r\nexport type TodoItemProps = {\r\n  id: Todo['id']\r\n}\r\n\r\nexport function TodoItem(props: TodoItemProps) {\r\n  const todoListDomain = useRemeshDomain(TodoListDomain())\r\n\r\n  const todo = useRemeshQuery(todoListDomain.query.todoState(props.id))\r\n\r\n  const [editing, setEditing] = useState(false)\r\n\r\n  const [title, handleTitleChange] = useInputHandler(todo.title)\r\n\r\n  const save = () => {\r\n    todoListDomain.command.updateTodo({ ...todo, title })\r\n    setEditing(false)\r\n  }\r\n\r\n  const handlePress = useKeyPressHandler(['Enter', 'Escape'], () => {\r\n    save()\r\n  })\r\n\r\n  const handleEnableEdit = () => {\r\n    setEditing(true)\r\n  }\r\n\r\n  const handleSave = () => {\r\n    todoListDomain.command.toggleTodo(todo.id)\r\n  }\r\n\r\n  const handleDelete = () => {\r\n    todoListDomain.command.deleteTodo(todo.id)\r\n  }\r\n\r\n  const handleBlur = () => {\r\n    save()\r\n  }\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null)\r\n\r\n  useEffect(() => {\r\n    if (editing) {\r\n      inputRef.current?.focus()\r\n    }\r\n  }, [editing])\r\n\r\n  return (\r\n    <li className={`${editing && 'editing'} ${todo.completed && 'completed'}`}>\r\n      <div className=\"view\">\r\n        <input type=\"checkbox\" className=\"toggle\" checked={todo.completed} onChange={handleSave} />\r\n        <label onDoubleClick={handleEnableEdit}>{todo.title}</label>\r\n        <button className=\"destroy\" onClick={handleDelete} />\r\n      </div>\r\n      {editing && (\r\n        <input\r\n          ref={inputRef}\r\n          className=\"edit\"\r\n          value={title}\r\n          onChange={handleTitleChange}\r\n          onKeyDown={handlePress}\r\n          onBlur={handleBlur}\r\n        />\r\n      )}\r\n    </li>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { useRemeshDomain, useRemeshQuery } from 'remesh-react'\r\n\r\nimport { TodoAppDomain } from '../domains/TodoApp'\r\nimport { TodoListDomain } from '../domains/TodoList'\r\n\r\nimport { TodoItem } from './TodoItem'\r\n\r\nexport const TodoList = () => {\r\n  const todoAppDomain = useRemeshDomain(TodoAppDomain())\r\n  const filteredTodoKeyList = useRemeshQuery(todoAppDomain.query.FilteredTodoKeyListQuery())\r\n\r\n  console.log('render list')\r\n\r\n  return (\r\n    <section className=\"main\">\r\n      <ToggleAllInput />\r\n      <ul className=\"todo-list\">\r\n        {filteredTodoKeyList.map((todoId) => (\r\n          <TodoItem key={todoId} id={todoId} />\r\n        ))}\r\n      </ul>\r\n    </section>\r\n  )\r\n}\r\n\r\nconst ToggleAllInput = () => {\r\n  const todoListDomain = useRemeshDomain(TodoListDomain())\r\n  const isAllCompleted = useRemeshQuery(todoListDomain.query.isAllCompleted())\r\n\r\n  const handleToggleAll = () => {\r\n    todoListDomain.command.toggleAllTodos()\r\n  }\r\n  return (\r\n    <>\r\n      <input\r\n        id=\"toggle-all\"\r\n        type=\"checkbox\"\r\n        className=\"toggle-all\"\r\n        checked={isAllCompleted}\r\n        onChange={handleToggleAll}\r\n      />\r\n      <label htmlFor=\"toggle-all\" />\r\n    </>\r\n  )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { NavLink, useParams } from 'react-router-dom'\r\n\r\nimport { useRemeshDomain, useRemeshQuery } from 'remesh-react'\r\n\r\nimport { TodoListDomain } from '../domains/TodoList'\r\nimport { TodoFilterDomain } from '../domains/TodoFilter'\r\n\r\nexport const TodoFooter = () => {\r\n  const todoListDomain = useRemeshDomain(TodoListDomain())\r\n  const todoFilterDomain = useRemeshDomain(TodoFilterDomain())\r\n\r\n  const todoFilter = useRemeshQuery(todoFilterDomain.query.todoFilter())\r\n  const activeTodoCount = useRemeshQuery(todoListDomain.query.activeTodoCount())\r\n  const completedTodoCount = useRemeshQuery(todoListDomain.query.completedTodoCount())\r\n\r\n  const hasCompleted = completedTodoCount > 0\r\n\r\n  const handleClearCompleted = () => {\r\n    todoListDomain.command.clearAllCompletedTodos()\r\n  }\r\n\r\n  const getClassName = (navData: { isActive: boolean }) => {\r\n    return navData.isActive ? 'selected' : ''\r\n  }\r\n\r\n  const params = useParams<{ filter: string }>()\r\n\r\n  useEffect(() => {\r\n    const filter = params.filter ?? 'all'\r\n    if (filter !== todoFilter) {\r\n      todoFilterDomain.command.setFilter(filter)\r\n    }\r\n  }, [params, todoFilter])\r\n\r\n  return (\r\n    <footer className=\"footer\">\r\n      <span className=\"todo-count\">\r\n        <strong>{activeTodoCount}</strong> item{activeTodoCount !== 1 && 's'} left\r\n      </span>\r\n      <ul className=\"filters\">\r\n        <li>\r\n          <NavLink to=\"/\" className={getClassName}>\r\n            All\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/active\" className={getClassName}>\r\n            Active\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/completed\" className={getClassName}>\r\n            Completed\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n      {hasCompleted && (\r\n        <button className=\"clear-completed\" onClick={handleClearCompleted}>\r\n          Clear completed\r\n        </button>\r\n      )}\r\n    </footer>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { TodoHeader } from './TodoHeader'\r\nimport { TodoList } from './TodoList'\r\nimport { TodoFooter } from './TodoFooter'\r\n\r\nexport const TodoApp = () => {\r\n  return (\r\n    <div className=\"todoapp\">\r\n      <TodoHeader />\r\n      <TodoList />\r\n      <TodoFooter />\r\n    </div>\r\n  )\r\n}\r\n","import React, { StrictMode } from 'react'\r\nimport * as ReactDOMClient from 'react-dom/client'\r\n\r\nimport { HashRouter, Routes, Route } from 'react-router-dom'\r\n\r\nimport { Remesh } from 'remesh'\r\nimport { RemeshRoot } from 'remesh-react'\r\nimport { RemeshReduxDevtools } from 'remesh-redux-devtools'\r\nimport { RemeshLogger } from 'remesh-logger'\r\n\r\nimport { StorageImpl } from './domain-externs-impl/storage'\r\nimport { TodoApp } from './components/TodoApp'\r\n\r\nconst container = document.getElementById('root')\r\n\r\nif (container) {\r\n  const root = ReactDOMClient.createRoot(container)\r\n  const store = Remesh.store({\r\n    externs: [StorageImpl],\r\n    inspectors: [RemeshReduxDevtools(), RemeshLogger()],\r\n  })\r\n\r\n  root.render(\r\n    <StrictMode>\r\n      <RemeshRoot store={store}>\r\n        <HashRouter basename=\"/\">\r\n          <Routes>\r\n            <Route path=\"/\" element={<TodoApp />} />\r\n            <Route path=\"/:filter\" element={<TodoApp />} />\r\n          </Routes>\r\n        </HashRouter>\r\n      </RemeshRoot>\r\n    </StrictMode>,\r\n  )\r\n}\r\n"],"names":["TodoHeader","todoInputDomain","useRemeshDomain","TodoInputDomain","todoListDomain","TodoListDomain","todoInput","useRemeshQuery","query","handleTodoInputChange","event","command","setTodoInput","target","value","handlePressEnter","useKeyPressHandler","addTodo","FailedToAddTodoEvent","alert","reason","_jsx","useState","useCallback","props","todo","todoState","id","editing","setEditing","title","handleTitleChange","useInputHandler","save","updateTodo","handlePress","handleEnableEdit","handleSave","toggleTodo","handleDelete","deleteTodo","handleBlur","inputRef","useRef","useEffect","current","focus","completed","_jsxs","TodoList","todoAppDomain","TodoAppDomain","filteredTodoKeyList","FilteredTodoKeyListQuery","console","log","map","todoId","ToggleAllInput","isAllCompleted","_Fragment","toggleAllTodos","handleToggleAll","TodoFooter","todoFilterDomain","TodoFilterDomain","todoFilter","activeTodoCount","hasCompleted","completedTodoCount","handleClearCompleted","clearAllCompletedTodos","getClassName","navData","isActive","params","useParams","filter","setFilter","TodoApp","container","document","getElementById","root","ReactDOMClient","store","Remesh","externs","StorageImpl","inspectors","RemeshReduxDevtools","RemeshLogger","render","StrictMode"],"mappings":"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"}