{"version":3,"file":"list.e2597528.js","sources":["../../../packages/remesh/src/modules/list.ts"],"sourcesContent":["import { Remesh, RemeshDomainContext, DomainConceptName, SerializableObject } from '../index'\n\nexport type ListModuleOptions<T extends SerializableObject> = {\n  name: DomainConceptName<'ListModule'>\n  key: (item: T) => string\n  default?: T[]\n}\n\nexport const ListModule = <T extends SerializableObject>(\n  domain: RemeshDomainContext,\n  options: ListModuleOptions<T>,\n) => {\n  const ItemListState = domain.state<T[]>({\n    name: `${options.name}.ItemListState`,\n    default: options.default ?? [],\n  })\n\n  const ItemListQuery = domain.query({\n    name: `${options.name}.ItemListQuery`,\n    impl: ({ get }) => {\n      return get(ItemListState())\n    },\n  })\n\n  const DerivedQuery = domain.query({\n    name: `${options.name}.DerivedQuery`,\n    impl: ({ get }) => {\n      const itemList = get(ItemListState())\n      const keyList = [] as string[]\n      const record = {} as Record<string, T>\n\n      for (let i = 0; i < itemList.length; i++) {\n        const item = itemList[i]\n        const key = options.key(item)\n        keyList.push(key)\n        record[key] = item\n      }\n\n      return { record, keyList }\n    },\n  })\n\n  const KeyListQuery = domain.query({\n    name: `${options.name}.KeyListQuery`,\n    impl: ({ get }) => {\n      return get(DerivedQuery()).keyList\n    },\n  })\n\n  const ItemQuery = domain.query({\n    name: `${options.name}.ItemQuery`,\n    impl: ({ get }, key: string) => {\n      const record = get(DerivedQuery()).record\n\n      if (!(key in record)) {\n        throw new Error(`${key} in not founded in ${options.name}`)\n      }\n\n      const item = record[key]\n      return item\n    },\n    /**\n     * return previous when item was deleted\n     */\n    onError: (_, previous) => {\n      return previous\n    },\n  })\n\n  const SetListCommand = domain.command({\n    name: `${options.name}.SetListCommand`,\n    impl: ({}, newList: T[]) => {\n      return ItemListState().new(newList)\n    },\n  })\n\n  const AddItemCommand = domain.command({\n    name: `${options.name}.AddItemCommand`,\n    impl: ({ get }, newItem: T) => {\n      const itemList = get(ItemListState())\n      const newList = itemList.concat(newItem)\n\n      return SetListCommand(newList)\n    },\n  })\n\n  const AddItemListCommand = domain.command({\n    name: `${options.name}.AddItemListCommand`,\n    impl: ({ get }, newItems: T[]) => {\n      if (newItems.length === 0) {\n        return null\n      }\n      const itemList = get(ItemListState())\n      const newList = itemList.concat(newItems)\n\n      return SetListCommand(newList)\n    },\n  })\n\n  const DeleteItemCommand = domain.command({\n    name: `${options.name}.DeleteItemCommand`,\n    impl: ({ get }, targetKey: string) => {\n      const list = get(ItemListState())\n      const newList = list.filter((item) => options.key(item) !== targetKey)\n\n      if (newList.length === list.length) {\n        return null\n      }\n\n      return SetListCommand(newList)\n    },\n  })\n\n  const DeleteItemListCommand = domain.command({\n    name: `${options.name}.DeleteItemListCommand`,\n    impl: ({ get }, targetKeys: string[]) => {\n      const list = get(ItemListQuery())\n      const newList = list.filter((item) => !targetKeys.includes(options.key(item)))\n\n      if (newList.length === list.length) {\n        return null\n      }\n\n      return SetListCommand(newList)\n    },\n  })\n\n  const DeleteAllCommand = domain.command({\n    name: `${options.name}.DeleteAllCommand`,\n    impl: ({}) => {\n      return SetListCommand([])\n    },\n  })\n\n  const UpdateItemCommand = domain.command({\n    name: `${options.name}.UpdateItemCommand`,\n    impl: ({ get }, newItem: T) => {\n      const oldList = get(ItemListState())\n      const key = options.key(newItem)\n      const newList = [] as T[]\n\n      let isChanged = false\n\n      for (const item of oldList) {\n        if (options.key(item) === key) {\n          newList.push(newItem)\n          isChanged = true\n        } else {\n          newList.push(item)\n        }\n      }\n\n      if (isChanged) {\n        return ItemListState().new(newList)\n      }\n\n      return null\n    },\n  })\n\n  const UpdateItemListCommand = domain.command({\n    name: `${options.name}.UpdateItemListCommand`,\n    impl: ({ get }, newItems: T[]) => {\n      const oldList = get(ItemListState())\n      const newList = [] as T[]\n\n      let isChanged = false\n\n      for (const item of oldList) {\n        for (const newItem of newItems) {\n          if (options.key(item) === options.key(newItem)) {\n            newList.push(newItem)\n            isChanged = true\n            break\n          }\n        }\n        if (!isChanged) {\n          newList.push(item)\n        }\n      }\n\n      if (isChanged) {\n        return ItemListState().new(newList)\n      }\n\n      return null\n    },\n  })\n\n  const InsertAtCommand = domain.command({\n    name: `${options.name}.InsertAtCommand`,\n    impl: ({ get }, { index, item }: { index: number; item: T }) => {\n      const keyList = get(KeyListQuery())\n\n      if (keyList.includes(options.key(item))) {\n        return null\n      }\n\n      const list = get(ItemListQuery())\n      const newList = list.slice(0, index).concat(item).concat(list.slice(index))\n\n      return SetListCommand(newList)\n    },\n  })\n\n  const InsertBeforeCommand = domain.command({\n    name: `${options.name}.InsertBeforeCommand`,\n    impl: ({ get }, { before, item }: { before: T; item: T }) => {\n      const keyList = get(KeyListQuery())\n      const itemKey = options.key(item)\n      const beforeKey = options.key(before)\n\n      if (keyList.includes(itemKey)) {\n        return null\n      }\n\n      const list = get(ItemListQuery())\n      const newList = [] as T[]\n\n      for (const current of list) {\n        const currentKey = options.key(current)\n\n        if (currentKey === beforeKey) {\n          newList.push(item)\n        }\n\n        newList.push(current)\n      }\n\n      return SetListCommand(newList)\n    },\n  })\n\n  const InsertAfterCommand = domain.command({\n    name: `${options.name}.InsertAfterCommand`,\n    impl: ({ get }, { after, item }: { after: T; item: T }) => {\n      const keyList = get(KeyListQuery())\n      const itemKey = options.key(item)\n      const afterKey = options.key(after)\n\n      if (keyList.includes(itemKey)) {\n        return null\n      }\n\n      const list = get(ItemListQuery())\n      const newList = [] as T[]\n\n      for (const current of list) {\n        const currentKey = options.key(current)\n\n        newList.push(current)\n\n        if (currentKey === afterKey) {\n          newList.push(item)\n        }\n      }\n\n      return SetListCommand(newList)\n    },\n  })\n\n  const ResetCommand = domain.command({\n    name: `${options.name}.ResetCommand`,\n    impl: ({}) => {\n      return SetListCommand(options.default ?? [])\n    },\n  })\n\n  return Remesh.module({\n    command: {\n      SetListCommand,\n      AddItemCommand,\n      AddItemListCommand,\n      DeleteItemCommand,\n      DeleteItemListCommand,\n      DeleteAllCommand,\n      UpdateItemCommand,\n      UpdateItemListCommand,\n      InsertAtCommand,\n      InsertBeforeCommand,\n      InsertAfterCommand,\n      ResetCommand,\n    },\n    query: {\n      KeyListQuery,\n      ItemQuery,\n      ItemListQuery,\n    },\n  })\n}\n"],"names":["ListModule","domain","options","ItemListState","_a","ItemListQuery","get","DerivedQuery","itemList","keyList","record","i","item","key","KeyListQuery","ItemQuery","_","previous","SetListCommand","newList","AddItemCommand","newItem","AddItemListCommand","newItems","DeleteItemCommand","targetKey","list","DeleteItemListCommand","targetKeys","DeleteAllCommand","UpdateItemCommand","oldList","isChanged","UpdateItemListCommand","InsertAtCommand","index","InsertBeforeCommand","before","itemKey","beforeKey","current","InsertAfterCommand","after","afterKey","currentKey","ResetCommand","Remesh"],"mappings":"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"}