{"version":3,"file":"index.9ad95a81.js","sources":["../../../projects/react-demos/src/tree/components/ExpandIcon.tsx","../../../projects/react-demos/src/tree/components/CollapseIcon.tsx","../../../packages/remesh/src/modules/tree.ts","../../../projects/react-demos/src/tree/apis/loadNodes.ts","../../../projects/react-demos/src/tree/domains/TreeDomain.ts","../../../projects/react-demos/src/tree/components/TreeNode.tsx","../../../projects/react-demos/src/tree/TreeApp.tsx","../../../projects/react-demos/src/tree/index.tsx"],"sourcesContent":["import * as React from 'react'\r\n\r\nexport type ExpandIconProps = React.ComponentPropsWithoutRef<'svg'>\r\n\r\nexport function ExpandIcon(props: ExpandIconProps) {\r\n  return (\r\n    <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" {...props}>\r\n      <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\" />\r\n    </svg>\r\n  )\r\n}\r\n","import * as React from 'react'\r\n\r\nexport type CollapseIconProps = React.ComponentPropsWithoutRef<'svg'>\r\n\r\nexport function CollapseIcon(props: CollapseIconProps) {\r\n  return (\r\n    <svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" {...props}>\r\n      <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\" />\r\n    </svg>\r\n  )\r\n}\r\n","import { Remesh, SerializableObject, DomainConceptName, RemeshDomainContext } from '../'\r\n\r\nexport type TreeModuleOptions<T extends SerializableObject> = {\r\n  name: DomainConceptName<'TreeModule'>\r\n  getKey: (node: T) => string\r\n  getChildren: (node: T) => T[] | null\r\n  setChildren: (node: T, children: T[]) => T\r\n  default?: T\r\n}\r\n\r\nexport const findTreeNode = <T extends SerializableObject>(\r\n  root: T,\r\n  options: TreeModuleOptions<T>,\r\n  id: string,\r\n): T | null => {\r\n  if (options.getKey(root) === id) {\r\n    return root\r\n  }\r\n\r\n  const children = options.getChildren(root)\r\n\r\n  if (!children) {\r\n    return null\r\n  }\r\n\r\n  for (const child of children) {\r\n    const found = findTreeNode(child, options, id)\r\n    if (found) {\r\n      return found\r\n    }\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport const setTreeNode = <T extends SerializableObject>(current: T, options: TreeModuleOptions<T>, node: T): T => {\r\n  if (options.getKey(current) === node.id) {\r\n    return node\r\n  }\r\n\r\n  let hasChanged = false\r\n\r\n  const children = options.getChildren(current)\r\n\r\n  if (!children) {\r\n    return current\r\n  }\r\n\r\n  const newChildren = children.map((child) => {\r\n    const newChild = setTreeNode(child, options, node)\r\n    if (newChild !== child) {\r\n      hasChanged = true\r\n    }\r\n    return newChild\r\n  })\r\n\r\n  if (hasChanged) {\r\n    return options.setChildren(current, newChildren)\r\n  }\r\n\r\n  return current\r\n}\r\n\r\nexport const removeTreeNode = <T extends SerializableObject>(\r\n  current: T,\r\n  options: TreeModuleOptions<T>,\r\n  keys: string[],\r\n): T | null => {\r\n  if (keys.includes(options.getKey(current))) {\r\n    return null\r\n  }\r\n\r\n  let hasChanged = false\r\n\r\n  const children = options.getChildren(current)\r\n\r\n  if (!children) {\r\n    return current\r\n  }\r\n\r\n  const newChildren = [] as T[]\r\n\r\n  for (const child of children) {\r\n    const newChild = removeTreeNode(child, options, keys)\r\n    if (newChild) {\r\n      newChildren.push(newChild)\r\n    } else {\r\n      hasChanged = true\r\n    }\r\n  }\r\n\r\n  if (hasChanged) {\r\n    return options.setChildren(current, newChildren)\r\n  }\r\n\r\n  return current\r\n}\r\n\r\nexport const TreeModule = <T extends SerializableObject>(\r\n  domain: RemeshDomainContext,\r\n  options: TreeModuleOptions<T>,\r\n) => {\r\n  const TreeState = domain.state<T | null>({\r\n    name: 'TreeState',\r\n    default: options.default ?? null,\r\n  })\r\n\r\n  const TreeRootQuery = domain.query({\r\n    name: 'TreeRootQuery',\r\n    impl: ({ get }) => {\r\n      return get(TreeState())\r\n    },\r\n  })\r\n\r\n  const TreeNodeQuery = domain.query({\r\n    name: 'TreeNodeQuery',\r\n    impl: ({ get }, key: string) => {\r\n      const root = get(TreeRootQuery())\r\n\r\n      if (!root) {\r\n        return null\r\n      }\r\n\r\n      return findTreeNode(root, options, key)\r\n    },\r\n  })\r\n\r\n  const SetTreeRootCommand = domain.command({\r\n    name: 'SetTreeRootCommand',\r\n    impl: ({}, root: T) => {\r\n      return [TreeState().new(root)]\r\n    },\r\n  })\r\n\r\n  const SetTreeNodeCommand = domain.command({\r\n    name: 'SetTreeNodeCommand',\r\n    impl: ({ get }, newNode: T) => {\r\n      const root = get(TreeRootQuery())\r\n\r\n      if (!root) {\r\n        return null\r\n      }\r\n\r\n      const newRoot = setTreeNode(root, options, newNode)\r\n      return TreeState().new(newRoot)\r\n    },\r\n  })\r\n\r\n  type SetChildrenFailedEventData = {\r\n    key: string\r\n    message: string\r\n  }\r\n\r\n  const SetChildrenFailedEvent = domain.event<SetChildrenFailedEventData>({\r\n    name: 'SetChildrenFailedEvent',\r\n  })\r\n\r\n  type SetChildrenCommandOptions = {\r\n    key: string\r\n    children: T[]\r\n  }\r\n\r\n  const SetChildrenCommand = domain.command({\r\n    name: 'SetChildrenCommand',\r\n    impl: ({ get }, { key, children }: SetChildrenCommandOptions) => {\r\n      const current = get(TreeNodeQuery(key))\r\n\r\n      if (!current) {\r\n        return SetChildrenFailedEvent({ key, message: 'Node not found' })\r\n      }\r\n\r\n      const newNode = options.setChildren(current, children)\r\n\r\n      return SetTreeNodeCommand(newNode)\r\n    },\r\n  })\r\n\r\n  const AddChildrenCommand = domain.command({\r\n    name: 'AddChildrenCommand',\r\n    impl: ({ get }, { key, children }: SetChildrenCommandOptions) => {\r\n      const current = get(TreeNodeQuery(key))\r\n\r\n      if (!current) {\r\n        return SetChildrenFailedEvent({ key, message: 'Node not found' })\r\n      }\r\n\r\n      const newNode = options.setChildren(current, [...(options.getChildren(current) ?? []), ...children])\r\n\r\n      return SetTreeNodeCommand(newNode)\r\n    },\r\n  })\r\n\r\n  type RemoveTreeNodeFailedEventData = {\r\n    keys: string[]\r\n    message: string\r\n  }\r\n\r\n  const RemoveTreeNodeFailedEvent = domain.event<RemoveTreeNodeFailedEventData>({\r\n    name: 'RemoveTreeNodeFailedEvent',\r\n  })\r\n\r\n  const RemoveTreeNodeCommand = domain.command({\r\n    name: 'RemoveTreeNodeCommand',\r\n    impl: ({ get }, keys: string[]) => {\r\n      const root = get(TreeRootQuery())\r\n\r\n      if (!root) {\r\n        return RemoveTreeNodeFailedEvent({ keys, message: 'Root not found' })\r\n      }\r\n\r\n      const newRoot = removeTreeNode(root, options, keys)\r\n\r\n      if (!newRoot) {\r\n        return RemoveTreeNodeFailedEvent({ keys, message: `Can't remove root node` })\r\n      }\r\n\r\n      return TreeState().new(newRoot)\r\n    },\r\n  })\r\n\r\n  return Remesh.module({\r\n    query: {\r\n      TreeRootQuery,\r\n      TreeNodeQuery,\r\n    },\r\n    command: {\r\n      SetTreeRootCommand,\r\n      SetTreeNodeCommand,\r\n      RemoveTreeNodeCommand,\r\n      SetChildrenCommand,\r\n      AddChildrenCommand,\r\n    },\r\n    event: {\r\n      SetChildrenFailedEvent,\r\n      RemoveTreeNodeFailedEvent,\r\n    },\r\n  })\r\n}\r\n","import { TreeData } from '../types'\r\n\r\nconst getChildId = (parentId: string, index: number): string =>\r\n  `${parentId !== 'root' ? `${parentId}-` : ''}${index + 1}`\r\n\r\nconst generateNodes = (parentId: string): TreeData[] => {\r\n  let count = Math.floor(Math.random() * (4 + 1))\r\n\r\n  if (parentId === 'root') {\r\n    count = 4\r\n  }\r\n\r\n  const nodes = [...Array(count)].map(\r\n    (_, index): TreeData => ({\r\n      id: getChildId(parentId, index),\r\n      name: `Child - ${getChildId(parentId, index)}`,\r\n      children: [],\r\n    }),\r\n  )\r\n\r\n  return nodes\r\n}\r\n\r\nexport function loadNodes(parentId: string) {\r\n  return new Promise<TreeData[]>((resolve, reject) => {\r\n    const timeout = Math.floor(Math.random() * 3000)\r\n    setTimeout(() => {\r\n      if (timeout % 4 === 0) {\r\n        reject(new Error('Failed to load nodes'))\r\n      } else {\r\n        resolve(generateNodes(parentId))\r\n      }\r\n    }, timeout)\r\n  })\r\n}\r\n","import { Remesh } from 'remesh'\r\n\r\nimport { ListModule } from 'remesh/modules/list'\r\nimport { AsyncModule } from 'remesh/modules/async'\r\nimport { TreeModule } from 'remesh/modules/tree'\r\n\r\nimport { TreeData } from '../types'\r\nimport { loadNodes } from '../apis/loadNodes'\r\n\r\nexport type TreeStatus =\r\n  | {\r\n      type: 'loading'\r\n      id: string\r\n    }\r\n  | {\r\n      type: 'error'\r\n      id: string\r\n    }\r\n\r\nexport const TreeDomain = Remesh.domain({\r\n  name: 'TreeDomain',\r\n  impl: (domain) => {\r\n    const defaultTreeData: TreeData = {\r\n      id: 'root',\r\n      name: 'Root',\r\n      children: [],\r\n    }\r\n\r\n    const MyTreeModule = TreeModule<TreeData>(domain, {\r\n      name: 'MyTreeModule',\r\n      getKey: (node) => node.id,\r\n      getChildren: (node) => node.children ?? null,\r\n      setChildren: (node, children) => ({ ...node, children }),\r\n      default: defaultTreeData,\r\n    })\r\n\r\n    const TreeStatusListModule = ListModule<TreeStatus>(domain, {\r\n      name: 'TreeStatusListModule',\r\n      key: (treeStatus) => treeStatus.id.toString(),\r\n    })\r\n\r\n    const TreeAsyncModule = AsyncModule(domain, {\r\n      name: 'TreeAsyncModule',\r\n      mode: 'merge',\r\n      load: ({}, targetId: string) => {\r\n        return loadNodes(targetId)\r\n      },\r\n      onLoading: ({}, targetId) => {\r\n        return TreeStatusListModule.command.AddItemCommand({\r\n          type: 'loading',\r\n          id: targetId,\r\n        })\r\n      },\r\n      onSuccess: ({}, children, targetId) => {\r\n        return [\r\n          TreeStatusListModule.command.DeleteItemCommand(targetId),\r\n          MyTreeModule.command.AddChildrenCommand({\r\n            key: targetId,\r\n            children,\r\n          }),\r\n        ]\r\n      },\r\n      onFailed: ({}, _error, targetId) => {\r\n        return TreeStatusListModule.command.AddItemCommand({\r\n          type: 'error',\r\n          id: targetId,\r\n        })\r\n      },\r\n    })\r\n\r\n    const TreeStatusQuery = domain.query({\r\n      name: 'TreeStatusQuery',\r\n      impl: ({ get }, targetId: string) => {\r\n        const statusList = get(TreeStatusListModule.query.ItemListQuery())\r\n        return statusList.find((status) => status.id === targetId)\r\n      },\r\n    })\r\n\r\n    return {\r\n      query: {\r\n        TreeStatusQuery,\r\n        TreeRootQuery: MyTreeModule.query.TreeRootQuery,\r\n        TreeNodeQuery: MyTreeModule.query.TreeNodeQuery,\r\n      },\r\n      command: {\r\n        SetTreeRootCommand: MyTreeModule.command.SetTreeRootCommand,\r\n        SetTreeNodeCommand: MyTreeModule.command.SetTreeNodeCommand,\r\n        RemoveTreeNodeCommand: MyTreeModule.command.RemoveTreeNodeCommand,\r\n        SetChildrenCommand: MyTreeModule.command.SetChildrenCommand,\r\n        AddChildrenCommand: MyTreeModule.command.AddChildrenCommand,\r\n        LoadNodesCommand: TreeAsyncModule.command.LoadCommand,\r\n      },\r\n      event: {\r\n        SetChildrenFailedEvent: MyTreeModule.event.SetChildrenFailedEvent,\r\n        RemoveTreeNodeFailedEvent: MyTreeModule.event.RemoveTreeNodeFailedEvent,\r\n      },\r\n    }\r\n  },\r\n})\r\n","import { useState } from 'react'\r\n\r\nimport { useRemeshDomain, useRemeshQuery, useRemeshSend } from 'remesh-react'\r\n\r\nimport { ExpandIcon } from './ExpandIcon'\r\nimport { CollapseIcon } from './CollapseIcon'\r\n\r\nimport { TreeDomain } from '../domains/TreeDomain'\r\n\r\nexport type TreeIconProps = {\r\n  expanded: boolean\r\n}\r\n\r\nexport const TreeIcon = (props: TreeIconProps) => {\r\n  if (props.expanded) {\r\n    return <ExpandIcon />\r\n  } else {\r\n    return <CollapseIcon />\r\n  }\r\n}\r\n\r\nexport type TreeNodeProps = {\r\n  id: string\r\n}\r\n\r\nexport const TreeNode = (props: TreeNodeProps) => {\r\n  const send = useRemeshSend()\r\n  const treeDomain = useRemeshDomain(TreeDomain())\r\n  const treeData = useRemeshQuery(treeDomain.query.TreeNodeQuery(props.id))\r\n  const treeStatus = useRemeshQuery(treeDomain.query.TreeStatusQuery(props.id))\r\n\r\n  const [expanded, setExpanded] = useState(true)\r\n\r\n  if (!treeData) {\r\n    return null\r\n  }\r\n\r\n  if (treeStatus && treeStatus.type === 'loading') {\r\n    return <div className=\"title\">Loading...</div>\r\n  }\r\n\r\n  if (treeStatus && treeStatus.type === 'error') {\r\n    const handleRetry = () => {\r\n      send(treeDomain.command.LoadNodesCommand(props.id))\r\n    }\r\n    return (\r\n      <div className=\"title\" onClick={handleRetry}>\r\n        Failed to load more nodes, click to retry\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const hasChildren = !!treeData.children && treeData.children.length > 0\r\n\r\n  const handleExpand = () => {\r\n    if (hasChildren) {\r\n      setExpanded(!expanded)\r\n    } else {\r\n      send(treeDomain.command.LoadNodesCommand(props.id))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"title\" onClick={handleExpand}>\r\n        <span className=\"toggle\">{hasChildren && <TreeIcon expanded={expanded} />}</span>\r\n        {treeData.name}\r\n      </div>\r\n      <div className=\"sub-nodes\">\r\n        {expanded &&\r\n          !!treeData.children &&\r\n          treeData.children.map((subnode) => {\r\n            return <TreeNode key={subnode.id} id={subnode.id} />\r\n          })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import './style.css'\r\n\r\nimport { TreeNode } from './components/TreeNode'\r\n\r\nimport { useEffect } from 'react'\r\n\r\nimport { useRemeshDomain, useRemeshSend } from 'remesh-react'\r\n\r\nimport { TreeDomain } from './domains/TreeDomain'\r\n\r\nexport function TreeApp() {\r\n  const send = useRemeshSend()\r\n  const treeDomain = useRemeshDomain(TreeDomain())\r\n\r\n  useEffect(() => {\r\n    send(treeDomain.command.LoadNodesCommand('root'))\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <h1>Async Tree View</h1>\r\n      <TreeNode id=\"root\" />\r\n    </div>\r\n  )\r\n}\r\n","import React, { StrictMode } from 'react'\r\nimport * as ReactDOMClient from 'react-dom/client'\r\n\r\nimport { Remesh } from 'remesh'\r\nimport { HashRouter, Routes, Route } from 'react-router-dom'\r\n\r\nimport { RemeshRoot } from 'remesh-react'\r\nimport { RemeshReduxDevtools } from 'remesh-redux-devtools'\r\nimport { RemeshLogger } from 'remesh-logger'\r\n\r\nimport { TreeApp } from './TreeApp'\r\n\r\nconst container = document.getElementById('root')\r\n\r\nif (container) {\r\n  const root = ReactDOMClient.createRoot(container)\r\n  const store = Remesh.store({\r\n    inspectors: [RemeshReduxDevtools(), RemeshLogger()],\r\n  })\r\n\r\n  root.render(\r\n    <StrictMode>\r\n      <RemeshRoot store={store}>\r\n        <TreeApp />\r\n      </RemeshRoot>\r\n    </StrictMode>,\r\n  )\r\n}\r\n"],"names":["ExpandIcon","props","CollapseIcon","findTreeNode","root","options","id","children","child","found","setTreeNode","current","node","hasChanged","newChildren","newChild","removeTreeNode","keys","TreeModule","domain","TreeState","_a","TreeRootQuery","get","TreeNodeQuery","key","SetTreeRootCommand","SetTreeNodeCommand","newNode","newRoot","SetChildrenFailedEvent","SetChildrenCommand","AddChildrenCommand","RemoveTreeNodeFailedEvent","RemoveTreeNodeCommand","Remesh","getChildId","parentId","index","generateNodes","count","_","loadNodes","resolve","reject","timeout","TreeDomain","MyTreeModule","TreeStatusListModule","ListModule","treeStatus","TreeAsyncModule","AsyncModule","targetId","_error","status","TreeIcon","expanded","_jsx","TreeNode","send","useRemeshSend","treeDomain","useRemeshDomain","treeData","useRemeshQuery","query","TreeStatusQuery","setExpanded","useState","type","command","LoadNodesCommand","hasChildren","length","_jsxs","name","map","subnode","TreeApp","useEffect","container","document","getElementById","ReactDOMClient","store","inspectors","RemeshReduxDevtools","RemeshLogger","render","StrictMode","RemeshRoot"],"mappings":"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"}