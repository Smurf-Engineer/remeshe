{"version":3,"file":"remesh-logger.5a236b29.js","sources":["../../../packages/remesh-debugger-helper/src/remesh-debugger-helper.ts","../../../packages/remesh-redux-devtools/src/remesh-redux-devtools.ts","../../../packages/remesh-logger/src/remesh-logger.ts"],"sourcesContent":["export const formatTime = (time: Date) => {\n  const hours = time.getHours().toString().padStart(2, '0')\n  const minutes = time.getMinutes().toString().padStart(2, '0')\n  const seconds = time.getSeconds().toString().padStart(2, '0')\n  const milliseconds = time.getMilliseconds().toString().padStart(3, '0')\n\n  return `${hours}:${minutes}:${seconds}.${milliseconds}`\n}\n\nexport const formatNow = () => {\n  const time = new Date()\n\n  return formatTime(time)\n}\n\nexport type RemeshDebugSource = 'state' | 'query' | 'domain' | 'event' | 'command'\n\nexport type RemeshDebugOptions = {\n  include?: RemeshDebugSource[]\n  exclude?: RemeshDebugSource[]\n}\n\nexport const RemeshDebuggerHelper = (options?: RemeshDebugOptions) => {\n  const config = {\n    include: ['state', 'domain', 'query', 'event', 'command'],\n    ...options,\n  }\n\n  const onActive = (source: RemeshDebugSource, fn: () => unknown) => {\n    if (config.exclude?.includes(source)) {\n      return\n    }\n\n    if (config.include) {\n      if (config.include.includes(source)) {\n        fn()\n      }\n    } else {\n      fn()\n    }\n  }\n\n  return {\n    onActive,\n  }\n}\n","import {\n  Args,\n  Remesh,\n  RemeshDomainDefinition,\n  RemeshDomainAction,\n  RemeshInspectorDomain,\n  RemeshStoreOptions,\n  Serializable,\n} from 'remesh'\nimport { RemeshDebuggerHelper, RemeshDebugOptions } from 'remesh-debugger-helper'\n\nimport type { Config as _Config } from '@redux-devtools/extension'\nimport type { Action } from 'redux'\n\nconst getReduxDevtools = () => {\n  if (typeof window !== 'undefined') {\n    return window.__REDUX_DEVTOOLS_EXTENSION__\n  }\n}\n\nexport type RemeshReduxDevtoolsOptions = RemeshDebugOptions\n\nexport const RemeshReduxDevtools = (options?: RemeshReduxDevtoolsOptions) => {\n  const reduxDevtools = getReduxDevtools()\n\n  if (!reduxDevtools) {\n    return\n  }\n\n  return (storeOptions?: RemeshStoreOptions) => {\n    const helper = RemeshDebuggerHelper(options)\n\n    const devtools = reduxDevtools.connect({\n      name: storeOptions?.name,\n      features: {\n        pause: false, // start/pause recording of dispatched actions\n        lock: false, // lock/unlock dispatching actions and side effects\n        persist: false, // persist states on page reloading\n        export: false, // export history of actions in a file\n        import: false, // import history of actions from a file\n        jump: false, // jump back and forth (time traveling)\n        skip: false, // skip (cancel) actions\n        reorder: false, // drag and drop actions in the history list\n        dispatch: false, // dispatch custom actions or action creators\n        test: false, // generate tests for the selected actions\n      },\n    })\n\n    const send = (_type: string, action: Action<unknown>) => {\n      devtools.send(action, null)\n    }\n\n    const store = Remesh.store({\n      name: `RemeshReduxDevtools(${storeOptions?.name ?? ''})`,\n    })\n\n    const inspectorDomain = store.getDomain(RemeshInspectorDomain())\n\n    const getOwnerInfo = <T extends RemeshDomainDefinition, U extends Args<Serializable>>(\n      owner: RemeshDomainAction<T, U>,\n    ) => {\n      const ownerInfo = {\n        domainId: owner.Domain.domainId,\n        domainName: owner.Domain.domainName,\n      }\n\n      if (owner.arg !== undefined) {\n        return {\n          ...ownerInfo,\n          domainArg: owner.arg,\n        }\n      }\n\n      return ownerInfo\n    }\n\n    helper.onActive('domain', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshDomainStorageEvent, (event) => {\n        const Domain = event.storage.Domain\n        const info = {\n          type: `${event.type}::${Domain.domainName}`,\n          domainId: Domain.domainId,\n          domainName: Domain.domainName,\n        }\n\n        if (event.storage.arg !== undefined) {\n          send(info.type, {\n            ...info,\n            domainArg: event.storage.arg,\n          })\n        } else {\n          send(info.type, info)\n        }\n      })\n    })\n\n    helper.onActive('state', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshStateStorageEvent, (event) => {\n        const State = event.storage.State\n        const info = {\n          type: `${event.type}::${State.stateName}`,\n          owner: getOwnerInfo(State.owner),\n          stateId: State.stateId,\n          stateName: State.stateName,\n          stateValue: event.storage.currentState,\n        }\n\n        send(info.type, info)\n      })\n    })\n\n    helper.onActive('query', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshQueryStorageEvent, (event) => {\n        const Query = event.storage.Query\n        const info = {\n          type: `${event.type}::${Query.queryName}`,\n          owner: getOwnerInfo(Query.owner),\n          queryId: Query.queryId,\n          queryName: Query.queryName,\n        }\n\n        if (event.storage.arg !== undefined) {\n          send(info.type, {\n            ...info,\n            queryArg: event.storage.arg,\n          })\n        } else {\n          send(info.type, info)\n        }\n      })\n    })\n\n    helper.onActive('command', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshCommandReceivedEvent, (event) => {\n        const Command = event.action.Command\n        const info = {\n          type: `${event.type}::${Command.commandName}`,\n          owner: getOwnerInfo(Command.owner),\n          commandId: Command.commandId,\n          commandName: Command.commandName,\n        }\n\n        if (event.action.arg !== undefined) {\n          send(info.type, {\n            ...info,\n            commandArg: event.action.arg,\n          })\n        } else {\n          send(info.type, info)\n        }\n      })\n    })\n\n    helper.onActive('event', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshEventEmittedEvent, (event) => {\n        const Event = event.action.Event\n\n        const info = {\n          type: `${event.type}::${Event.eventName}`,\n          owner: getOwnerInfo(Event.owner),\n          eventId: Event.eventId,\n          eventName: Event.eventName,\n        }\n\n        if (event.action.arg !== undefined) {\n          send(info.type, {\n            ...info,\n            eventArg: event.action.arg,\n          })\n        } else {\n          send(info.type, info)\n        }\n      })\n    })\n\n    return store\n  }\n}\n","import {\n  Args,\n  Remesh,\n  RemeshDomainDefinition,\n  RemeshDomainAction,\n  RemeshInspectorDomain,\n  RemeshStoreInspector,\n  Serializable,\n} from 'remesh'\n\nimport { RemeshDebugOptions, RemeshDebuggerHelper, formatNow } from 'remesh-debugger-helper'\n\nexport type RemeshLoggerOptions = RemeshDebugOptions & {\n  collapsed?: boolean\n  colors?: typeof colors\n}\n\nconst colors = {\n  domain: '#bfb1cc',\n  event: '#aec6d4',\n  state: '#adc7af',\n  entity: '#d9bdc5',\n  query: '#d6c9ad',\n  command: '#debdb6',\n}\n\nexport const RemeshLogger = (options?: RemeshLoggerOptions): RemeshStoreInspector => {\n  return (storeOptions) => {\n    const config = {\n      collapsed: true,\n      colors,\n      ...options,\n    }\n\n    const helper = RemeshDebuggerHelper(config)\n\n    const log = (type: string, info: object, color: string) => {\n      if (config.collapsed) {\n        console.groupCollapsed(\n          `%c${type}%c @ ${formatNow()}`,\n          `background-color:${color}; color: #000; font-weight: bold`,\n          `color:#9E9E9E; font-weight: lighter`,\n        )\n      }\n\n      console.log(info)\n\n      if (config.collapsed) {\n        console.groupEnd()\n      }\n    }\n\n    const store = Remesh.store({\n      ...storeOptions,\n      name: `RemeshLogger(${storeOptions?.name ?? ''})`,\n    })\n\n    const inspectorDomain = store.getDomain(RemeshInspectorDomain())\n\n    const getOwnerInfo = <T extends RemeshDomainDefinition, U extends Args<Serializable>>(\n      owner: RemeshDomainAction<T, U>,\n    ) => {\n      const ownerInfo = {\n        domainId: owner.Domain.domainId,\n        domainName: owner.Domain.domainName,\n      }\n\n      if (owner.arg !== undefined) {\n        return {\n          ...ownerInfo,\n          domainArg: owner.arg,\n        }\n      }\n\n      return ownerInfo\n    }\n\n    helper.onActive('domain', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshDomainStorageEvent, (event) => {\n        const Domain = event.storage.Domain\n        const info = {\n          type: `${event.type}::${Domain.domainName}`,\n          domainId: Domain.domainId,\n          domainName: Domain.domainName,\n        }\n\n        if (event.storage.arg !== undefined) {\n          log(\n            info.type,\n            {\n              ...info,\n              domainArg: event.storage.arg,\n            },\n            config.colors.domain,\n          )\n        } else {\n          log(info.type, info, config.colors.domain)\n        }\n      })\n    })\n\n    helper.onActive('state', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshStateStorageEvent, (event) => {\n        const State = event.storage.State\n        const info = {\n          type: `${event.type}::${State.stateName}`,\n          owner: getOwnerInfo(State.owner),\n          stateId: State.stateId,\n          stateName: State.stateName,\n          stateValue: event.storage.currentState,\n        }\n        log(info.type, info, config.colors.state)\n      })\n    })\n\n    helper.onActive('query', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshQueryStorageEvent, (event) => {\n        const Query = event.storage.Query\n        const info = {\n          type: `${event.type}::${Query.queryName}`,\n          owner: getOwnerInfo(Query.owner),\n          queryId: Query.queryId,\n          queryName: Query.queryName,\n          queryValue: event.storage.currentValue,\n        }\n\n        if (event.storage.arg !== undefined) {\n          log(\n            info.type,\n            {\n              ...info,\n              queryArg: event.storage.arg,\n            },\n            config.colors.query,\n          )\n        } else {\n          log(info.type, info, config.colors.query)\n        }\n      })\n    })\n\n    helper.onActive('command', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshCommandReceivedEvent, (event) => {\n        const Command = event.action.Command\n        const info = {\n          type: `${event.type}::${Command.commandName}`,\n          owner: getOwnerInfo(Command.owner),\n          commandId: Command.commandId,\n          commandName: Command.commandName,\n        }\n\n        if (event.action.arg !== undefined) {\n          log(\n            info.type,\n            {\n              ...info,\n              commandArg: event.action.arg,\n            },\n            config.colors.command,\n          )\n        } else {\n          log(info.type, info, config.colors.command)\n        }\n      })\n    })\n\n    helper.onActive('event', () => {\n      store.subscribeEvent(inspectorDomain.event.RemeshEventEmittedEvent, (event) => {\n        const Event = event.action.Event\n\n        const info = {\n          type: `${event.type}::${Event.eventName}`,\n          owner: getOwnerInfo(Event.owner),\n          eventId: Event.eventId,\n          eventName: Event.eventName,\n        }\n\n        if (event.action.arg !== undefined) {\n          log(\n            info.type,\n            {\n              ...info,\n              eventArg: event.action.arg,\n            },\n            config.colors.event,\n          )\n        } else {\n          log(info.type, info, config.colors.event)\n        }\n      })\n    })\n\n    return store\n  }\n}\n"],"names":["formatTime","time","hours","minutes","seconds","milliseconds","formatNow","RemeshDebuggerHelper","options","config","source","fn","_a","getReduxDevtools","RemeshReduxDevtools","reduxDevtools","storeOptions","helper","devtools","send","_type","action","store","Remesh","inspectorDomain","RemeshInspectorDomain","getOwnerInfo","owner","ownerInfo","event","Domain","info","State","Query","Command","Event","colors","RemeshLogger","log","type","color"],"mappings":"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"}