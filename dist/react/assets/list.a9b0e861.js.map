{"version":3,"file":"list.a9b0e861.js","sources":["../../../packages/remesh/src/modules/list.ts"],"sourcesContent":["import { Remesh, RemeshDomainContext, DomainConceptName, SerializableObject } from '../index'\r\n\r\nexport type ListModuleOptions<T extends SerializableObject> = {\r\n  name: DomainConceptName<'ListModule'>\r\n  key: (item: T) => string\r\n  default?: T[]\r\n}\r\n\r\nexport const ListModule = <T extends SerializableObject>(\r\n  domain: RemeshDomainContext,\r\n  options: ListModuleOptions<T>,\r\n) => {\r\n  const ItemListState = domain.state<T[]>({\r\n    name: `${options.name}.ItemListState`,\r\n    default: options.default ?? [],\r\n  })\r\n\r\n  const ItemListQuery = domain.query({\r\n    name: `${options.name}.ItemListQuery`,\r\n    impl: ({ get }) => {\r\n      return get(ItemListState())\r\n    },\r\n  })\r\n\r\n  const DerivedQuery = domain.query({\r\n    name: `${options.name}.DerivedQuery`,\r\n    impl: ({ get }) => {\r\n      const itemList = get(ItemListState())\r\n      const keyList = [] as string[]\r\n      const record = {} as Record<string, T>\r\n\r\n      for (let i = 0; i < itemList.length; i++) {\r\n        const item = itemList[i]\r\n        const key = options.key(item)\r\n        keyList.push(key)\r\n        record[key] = item\r\n      }\r\n\r\n      return { record, keyList }\r\n    },\r\n  })\r\n\r\n  const hasItemByKey = (itemList: T[], key: string) => {\r\n    for (const item of itemList) {\r\n      if (options.key(item) === key) {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  const HasItemByKeyQuery = domain.query({\r\n    name: `${options.name}.HasItemByKeyQuery`,\r\n    impl: ({ get }, key: string) => {\r\n      const itemList = get(ItemListState())\r\n      return hasItemByKey(itemList, key)\r\n    },\r\n  })\r\n\r\n  const KeyListQuery = domain.query({\r\n    name: `${options.name}.KeyListQuery`,\r\n    impl: ({ get }) => {\r\n      return get(DerivedQuery()).keyList\r\n    },\r\n  })\r\n\r\n  const ItemQuery = domain.query({\r\n    name: `${options.name}.ItemQuery`,\r\n    impl: ({ get }, key: string) => {\r\n      const record = get(DerivedQuery()).record\r\n\r\n      if (!(key in record)) {\r\n        throw new Error(`${key} in not founded in ${options.name}`)\r\n      }\r\n\r\n      const item = record[key]\r\n      return item\r\n    },\r\n    /**\r\n     * return previous when item was deleted\r\n     */\r\n    onError: (_, previous) => {\r\n      return previous\r\n    },\r\n  })\r\n\r\n  const SetListCommand = domain.command({\r\n    name: `${options.name}.SetListCommand`,\r\n    impl: ({}, newList: T[]) => {\r\n      return ItemListState().new(newList)\r\n    },\r\n  })\r\n\r\n  const AddItemCommand = domain.command({\r\n    name: `${options.name}.AddItemCommand`,\r\n    impl: ({ get }, newItem: T) => {\r\n      const itemList = get(ItemListState())\r\n      if (hasItemByKey(itemList, options.key(newItem))) {\r\n        throw new Error(`item with key ${options.key(newItem)} is already in list ${options.name}`)\r\n      }\r\n      const newList = itemList.concat(newItem)\r\n\r\n      return SetListCommand(newList)\r\n    },\r\n  })\r\n\r\n  const AddItemListCommand = domain.command({\r\n    name: `${options.name}.AddItemListCommand`,\r\n    impl: ({ get }, newItems: T[]) => {\r\n      if (newItems.length === 0) {\r\n        return null\r\n      }\r\n      const itemList = get(ItemListState())\r\n      const newList = itemList.concat(newItems)\r\n\r\n      return SetListCommand(newList)\r\n    },\r\n  })\r\n\r\n  const DeleteItemCommand = domain.command({\r\n    name: `${options.name}.DeleteItemCommand`,\r\n    impl: ({ get }, targetKey: string) => {\r\n      const list = get(ItemListState())\r\n      const newList = list.filter((item) => options.key(item) !== targetKey)\r\n\r\n      if (newList.length === list.length) {\r\n        return null\r\n      }\r\n\r\n      return SetListCommand(newList)\r\n    },\r\n  })\r\n\r\n  const DeleteItemListCommand = domain.command({\r\n    name: `${options.name}.DeleteItemListCommand`,\r\n    impl: ({ get }, targetKeys: string[]) => {\r\n      const list = get(ItemListQuery())\r\n      const newList = list.filter((item) => !targetKeys.includes(options.key(item)))\r\n\r\n      if (newList.length === list.length) {\r\n        return null\r\n      }\r\n\r\n      return SetListCommand(newList)\r\n    },\r\n  })\r\n\r\n  const DeleteAllCommand = domain.command({\r\n    name: `${options.name}.DeleteAllCommand`,\r\n    impl: ({}) => {\r\n      return SetListCommand([])\r\n    },\r\n  })\r\n\r\n  const updateList = (oldList: T[], newItem: T) => {\r\n    const key = options.key(newItem)\r\n    const newList = [] as T[]\r\n\r\n    let isChanged = false\r\n\r\n    for (const item of oldList) {\r\n      if (options.key(item) === key) {\r\n        newList.push(newItem)\r\n        isChanged = true\r\n      } else {\r\n        newList.push(item)\r\n      }\r\n    }\r\n\r\n    if (isChanged) {\r\n      return newList\r\n    }\r\n    return null\r\n  }\r\n\r\n  const UpdateItemCommand = domain.command({\r\n    name: `${options.name}.UpdateItemCommand`,\r\n    impl: ({ get }, newItem: T) => {\r\n      const oldList = get(ItemListState())\r\n      const newList = updateList(oldList, newItem)\r\n\r\n      if (newList) {\r\n        return ItemListState().new(newList)\r\n      }\r\n\r\n      return null\r\n    },\r\n  })\r\n\r\n  const UpsertItemCommand = domain.command({\r\n    name: `${options.name}.UpsertItemCommand`,\r\n    impl: ({ get }, newItem: T) => {\r\n      const oldList = get(ItemListState())\r\n      const newList = updateList(oldList, newItem)\r\n      return ItemListState().new(newList ?? [...oldList, newItem])\r\n    },\r\n  })\r\n\r\n  const UpdateItemListCommand = domain.command({\r\n    name: `${options.name}.UpdateItemListCommand`,\r\n    impl: ({ get }, newItems: T[]) => {\r\n      const oldList = get(ItemListState())\r\n      const newList = [] as T[]\r\n\r\n      let isChanged = false\r\n\r\n      for (const item of oldList) {\r\n        for (const newItem of newItems) {\r\n          if (options.key(item) === options.key(newItem)) {\r\n            newList.push(newItem)\r\n            isChanged = true\r\n            break\r\n          }\r\n        }\r\n        if (!isChanged) {\r\n          newList.push(item)\r\n        }\r\n      }\r\n\r\n      if (isChanged) {\r\n        return ItemListState().new(newList)\r\n      }\r\n\r\n      return null\r\n    },\r\n  })\r\n\r\n  const UpsertItemListCommand = domain.command({\r\n    name: `${options.name}.UpdateItemListCommand`,\r\n    impl: ({ get }, newItems: T[]) => {\r\n      if (newItems.length === 0) {\r\n        return null\r\n      }\r\n      const oldList = get(ItemListState())\r\n      const newList = oldList.slice()\r\n      const keyList = oldList.map((item) => options.key(item))\r\n\r\n      for (const newItem of newItems) {\r\n        const index = keyList.lastIndexOf(options.key(newItem))\r\n        if (index >= 0) {\r\n          newList[index] = newItem\r\n        } else {\r\n          newList.push(newItem)\r\n        }\r\n      }\r\n\r\n      return ItemListState().new(newList)\r\n    },\r\n  })\r\n\r\n  const InsertAtCommand = domain.command({\r\n    name: `${options.name}.InsertAtCommand`,\r\n    impl: ({ get }, { index, item }: { index: number; item: T }) => {\r\n      const keyList = get(KeyListQuery())\r\n\r\n      if (keyList.includes(options.key(item))) {\r\n        return null\r\n      }\r\n\r\n      const list = get(ItemListQuery())\r\n      const newList = list.slice(0, index).concat(item).concat(list.slice(index))\r\n\r\n      return SetListCommand(newList)\r\n    },\r\n  })\r\n\r\n  const InsertBeforeCommand = domain.command({\r\n    name: `${options.name}.InsertBeforeCommand`,\r\n    impl: ({ get }, { before, item }: { before: T; item: T }) => {\r\n      const keyList = get(KeyListQuery())\r\n      const itemKey = options.key(item)\r\n      const beforeKey = options.key(before)\r\n\r\n      if (keyList.includes(itemKey)) {\r\n        return null\r\n      }\r\n\r\n      const list = get(ItemListQuery())\r\n      const newList = [] as T[]\r\n\r\n      for (const current of list) {\r\n        const currentKey = options.key(current)\r\n\r\n        if (currentKey === beforeKey) {\r\n          newList.push(item)\r\n        }\r\n\r\n        newList.push(current)\r\n      }\r\n\r\n      return SetListCommand(newList)\r\n    },\r\n  })\r\n\r\n  const InsertAfterCommand = domain.command({\r\n    name: `${options.name}.InsertAfterCommand`,\r\n    impl: ({ get }, { after, item }: { after: T; item: T }) => {\r\n      const keyList = get(KeyListQuery())\r\n      const itemKey = options.key(item)\r\n      const afterKey = options.key(after)\r\n\r\n      if (keyList.includes(itemKey)) {\r\n        return null\r\n      }\r\n\r\n      const list = get(ItemListQuery())\r\n      const newList = [] as T[]\r\n\r\n      for (const current of list) {\r\n        const currentKey = options.key(current)\r\n\r\n        newList.push(current)\r\n\r\n        if (currentKey === afterKey) {\r\n          newList.push(item)\r\n        }\r\n      }\r\n\r\n      return SetListCommand(newList)\r\n    },\r\n  })\r\n\r\n  const ResetCommand = domain.command({\r\n    name: `${options.name}.ResetCommand`,\r\n    impl: ({}) => {\r\n      return SetListCommand(options.default ?? [])\r\n    },\r\n  })\r\n\r\n  return Remesh.module({\r\n    command: {\r\n      SetListCommand,\r\n      AddItemCommand,\r\n      AddItemListCommand,\r\n      DeleteItemCommand,\r\n      DeleteItemListCommand,\r\n      DeleteAllCommand,\r\n      UpdateItemCommand,\r\n      UpsertItemCommand,\r\n      UpdateItemListCommand,\r\n      UpsertItemListCommand,\r\n      InsertAtCommand,\r\n      InsertBeforeCommand,\r\n      InsertAfterCommand,\r\n      ResetCommand,\r\n    },\r\n    query: {\r\n      KeyListQuery,\r\n      HasItemByKeyQuery,\r\n      ItemQuery,\r\n      ItemListQuery,\r\n    },\r\n  })\r\n}\r\n"],"names":["ListModule","domain","options","ItemListState","_a","ItemListQuery","get","DerivedQuery","itemList","keyList","record","i","item","key","hasItemByKey","HasItemByKeyQuery","KeyListQuery","ItemQuery","_","previous","SetListCommand","newList","AddItemCommand","newItem","AddItemListCommand","newItems","DeleteItemCommand","targetKey","list","DeleteItemListCommand","targetKeys","DeleteAllCommand","updateList","oldList","isChanged","UpdateItemCommand","UpsertItemCommand","UpdateItemListCommand","UpsertItemListCommand","index","InsertAtCommand","InsertBeforeCommand","before","itemKey","beforeKey","current","InsertAfterCommand","after","afterKey","currentKey","ResetCommand","Remesh"],"mappings":"+CAQa,MAAAA,EAAa,CACxBC,EACAC,IACG,OACG,MAAAC,EAAgBF,EAAO,MAAW,CACtC,KAAM,GAAGC,EAAQ,qBACjB,SAASE,EAAAF,EAAQ,UAAR,KAAAE,EAAmB,CAAC,CAAA,CAC9B,EAEKC,EAAgBJ,EAAO,MAAM,CACjC,KAAM,GAAGC,EAAQ,qBACjB,KAAM,CAAC,CAAE,IAAAI,KACAA,EAAIH,GAAe,CAC5B,CACD,EAEKI,EAAeN,EAAO,MAAM,CAChC,KAAM,GAAGC,EAAQ,oBACjB,KAAM,CAAC,CAAE,IAAAI,KAAU,CACX,MAAAE,EAAWF,EAAIH,EAAA,CAAe,EAC9BM,EAAU,CAAA,EACVC,EAAS,CAAA,EAEf,QAASC,EAAI,EAAGA,EAAIH,EAAS,OAAQG,IAAK,CACxC,MAAMC,EAAOJ,EAASG,GAChBE,EAAMX,EAAQ,IAAIU,CAAI,EAC5BH,EAAQ,KAAKI,CAAG,EAChBH,EAAOG,GAAOD,CAChB,CAEO,MAAA,CAAE,OAAAF,EAAQ,QAAAD,EACnB,CAAA,CACD,EAEKK,EAAe,CAACN,EAAeK,IAAgB,CACnD,UAAWD,KAAQJ,EACjB,GAAIN,EAAQ,IAAIU,CAAI,IAAMC,EACjB,MAAA,GAGJ,MAAA,EAAA,EAGHE,EAAoBd,EAAO,MAAM,CACrC,KAAM,GAAGC,EAAQ,yBACjB,KAAM,CAAC,CAAE,IAAAI,GAAOO,IAAgB,CACxB,MAAAL,EAAWF,EAAIH,EAAA,CAAe,EAC7B,OAAAW,EAAaN,EAAUK,CAAG,CACnC,CAAA,CACD,EAEKG,EAAef,EAAO,MAAM,CAChC,KAAM,GAAGC,EAAQ,oBACjB,KAAM,CAAC,CAAE,IAAAI,KACAA,EAAIC,GAAc,EAAE,OAC7B,CACD,EAEKU,EAAYhB,EAAO,MAAM,CAC7B,KAAM,GAAGC,EAAQ,iBACjB,KAAM,CAAC,CAAE,IAAAI,GAAOO,IAAgB,CAC9B,MAAMH,EAASJ,EAAIC,EAAc,CAAA,EAAE,OAE/B,GAAA,EAAEM,KAAOH,GACX,MAAM,IAAI,MAAM,GAAGG,uBAAyBX,EAAQ,MAAM,EAIrD,OADMQ,EAAOG,EAEtB,EAIA,QAAS,CAACK,EAAGC,IACJA,CACT,CACD,EAEKC,EAAiBnB,EAAO,QAAQ,CACpC,KAAM,GAAGC,EAAQ,sBACjB,KAAM,CAAC,CAAC,EAAGmB,IACFlB,EAAgB,EAAA,IAAIkB,CAAO,CACpC,CACD,EAEKC,EAAiBrB,EAAO,QAAQ,CACpC,KAAM,GAAGC,EAAQ,sBACjB,KAAM,CAAC,CAAE,IAAAI,GAAOiB,IAAe,CACvB,MAAAf,EAAWF,EAAIH,EAAA,CAAe,EACpC,GAAIW,EAAaN,EAAUN,EAAQ,IAAIqB,CAAO,CAAC,EACvC,MAAA,IAAI,MAAM,iBAAiBrB,EAAQ,IAAIqB,CAAO,wBAAwBrB,EAAQ,MAAM,EAEtF,MAAAmB,EAAUb,EAAS,OAAOe,CAAO,EAEvC,OAAOH,EAAeC,CAAO,CAC/B,CAAA,CACD,EAEKG,EAAqBvB,EAAO,QAAQ,CACxC,KAAM,GAAGC,EAAQ,0BACjB,KAAM,CAAC,CAAE,IAAAI,GAAOmB,IAAkB,CAC5B,GAAAA,EAAS,SAAW,EACf,OAAA,KAGH,MAAAJ,EADWf,EAAIH,EAAA,CAAe,EACX,OAAOsB,CAAQ,EAExC,OAAOL,EAAeC,CAAO,CAC/B,CAAA,CACD,EAEKK,EAAoBzB,EAAO,QAAQ,CACvC,KAAM,GAAGC,EAAQ,yBACjB,KAAM,CAAC,CAAE,IAAAI,GAAOqB,IAAsB,CAC9B,MAAAC,EAAOtB,EAAIH,EAAA,CAAe,EAC1BkB,EAAUO,EAAK,OAAQhB,GAASV,EAAQ,IAAIU,CAAI,IAAMe,CAAS,EAEjE,OAAAN,EAAQ,SAAWO,EAAK,OACnB,KAGFR,EAAeC,CAAO,CAC/B,CAAA,CACD,EAEKQ,EAAwB5B,EAAO,QAAQ,CAC3C,KAAM,GAAGC,EAAQ,6BACjB,KAAM,CAAC,CAAE,IAAAI,GAAOwB,IAAyB,CACjC,MAAAF,EAAOtB,EAAID,EAAA,CAAe,EAC1BgB,EAAUO,EAAK,OAAQhB,GAAS,CAACkB,EAAW,SAAS5B,EAAQ,IAAIU,CAAI,CAAC,CAAC,EAEzE,OAAAS,EAAQ,SAAWO,EAAK,OACnB,KAGFR,EAAeC,CAAO,CAC/B,CAAA,CACD,EAEKU,EAAmB9B,EAAO,QAAQ,CACtC,KAAM,GAAGC,EAAQ,wBACjB,KAAM,CAAC,CAAA,IACEkB,EAAe,CAAA,CAAE,CAC1B,CACD,EAEKY,EAAa,CAACC,EAAcV,IAAe,CACzC,MAAAV,EAAMX,EAAQ,IAAIqB,CAAO,EACzBF,EAAU,CAAA,EAEhB,IAAIa,EAAY,GAEhB,UAAWtB,KAAQqB,EACb/B,EAAQ,IAAIU,CAAI,IAAMC,GACxBQ,EAAQ,KAAKE,CAAO,EACRW,EAAA,IAEZb,EAAQ,KAAKT,CAAI,EAIrB,OAAIsB,EACKb,EAEF,IAAA,EAGHc,EAAoBlC,EAAO,QAAQ,CACvC,KAAM,GAAGC,EAAQ,yBACjB,KAAM,CAAC,CAAE,IAAAI,GAAOiB,IAAe,CACvB,MAAAU,EAAU3B,EAAIH,EAAA,CAAe,EAC7BkB,EAAUW,EAAWC,EAASV,CAAO,EAE3C,OAAIF,EACKlB,EAAgB,EAAA,IAAIkB,CAAO,EAG7B,IACT,CAAA,CACD,EAEKe,EAAoBnC,EAAO,QAAQ,CACvC,KAAM,GAAGC,EAAQ,yBACjB,KAAM,CAAC,CAAE,IAAAI,GAAOiB,IAAe,CACvB,MAAAU,EAAU3B,EAAIH,EAAA,CAAe,EAC7BkB,EAAUW,EAAWC,EAASV,CAAO,EACpC,OAAApB,IAAgB,IAAIkB,GAAA,KAAAA,EAAW,CAAC,GAAGY,EAASV,CAAO,CAAC,CAC7D,CAAA,CACD,EAEKc,EAAwBpC,EAAO,QAAQ,CAC3C,KAAM,GAAGC,EAAQ,6BACjB,KAAM,CAAC,CAAE,IAAAI,GAAOmB,IAAkB,CAC1B,MAAAQ,EAAU3B,EAAIH,EAAA,CAAe,EAC7BkB,EAAU,CAAA,EAEhB,IAAIa,EAAY,GAEhB,UAAWtB,KAAQqB,EAAS,CAC1B,UAAWV,KAAWE,EACpB,GAAIvB,EAAQ,IAAIU,CAAI,IAAMV,EAAQ,IAAIqB,CAAO,EAAG,CAC9CF,EAAQ,KAAKE,CAAO,EACRW,EAAA,GACZ,KACF,CAEGA,GACHb,EAAQ,KAAKT,CAAI,CAErB,CAEA,OAAIsB,EACK/B,EAAgB,EAAA,IAAIkB,CAAO,EAG7B,IACT,CAAA,CACD,EAEKiB,EAAwBrC,EAAO,QAAQ,CAC3C,KAAM,GAAGC,EAAQ,6BACjB,KAAM,CAAC,CAAE,IAAAI,GAAOmB,IAAkB,CAC5B,GAAAA,EAAS,SAAW,EACf,OAAA,KAEH,MAAAQ,EAAU3B,EAAIH,EAAA,CAAe,EAC7BkB,EAAUY,EAAQ,QAClBxB,EAAUwB,EAAQ,IAAKrB,GAASV,EAAQ,IAAIU,CAAI,CAAC,EAEvD,UAAWW,KAAWE,EAAU,CAC9B,MAAMc,EAAQ9B,EAAQ,YAAYP,EAAQ,IAAIqB,CAAO,CAAC,EAClDgB,GAAS,EACXlB,EAAQkB,GAAShB,EAEjBF,EAAQ,KAAKE,CAAO,CAExB,CAEO,OAAApB,EAAgB,EAAA,IAAIkB,CAAO,CACpC,CAAA,CACD,EAEKmB,EAAkBvC,EAAO,QAAQ,CACrC,KAAM,GAAGC,EAAQ,uBACjB,KAAM,CAAC,CAAE,IAAAI,CAAA,EAAO,CAAE,MAAAiC,EAAO,KAAA3B,KAAuC,CAG9D,GAFgBN,EAAIU,EAAA,CAAc,EAEtB,SAASd,EAAQ,IAAIU,CAAI,CAAC,EAC7B,OAAA,KAGH,MAAAgB,EAAOtB,EAAID,EAAA,CAAe,EAC1BgB,EAAUO,EAAK,MAAM,EAAGW,CAAK,EAAE,OAAO3B,CAAI,EAAE,OAAOgB,EAAK,MAAMW,CAAK,CAAC,EAE1E,OAAOnB,EAAeC,CAAO,CAC/B,CAAA,CACD,EAEKoB,EAAsBxC,EAAO,QAAQ,CACzC,KAAM,GAAGC,EAAQ,2BACjB,KAAM,CAAC,CAAE,IAAAI,CAAA,EAAO,CAAE,OAAAoC,EAAQ,KAAA9B,KAAmC,CACrD,MAAAH,EAAUH,EAAIU,EAAA,CAAc,EAC5B2B,EAAUzC,EAAQ,IAAIU,CAAI,EAC1BgC,EAAY1C,EAAQ,IAAIwC,CAAM,EAEhC,GAAAjC,EAAQ,SAASkC,CAAO,EACnB,OAAA,KAGH,MAAAf,EAAOtB,EAAID,EAAA,CAAe,EAC1BgB,EAAU,CAAA,EAEhB,UAAWwB,KAAWjB,EACD1B,EAAQ,IAAI2C,CAAO,IAEnBD,GACjBvB,EAAQ,KAAKT,CAAI,EAGnBS,EAAQ,KAAKwB,CAAO,EAGtB,OAAOzB,EAAeC,CAAO,CAC/B,CAAA,CACD,EAEKyB,EAAqB7C,EAAO,QAAQ,CACxC,KAAM,GAAGC,EAAQ,0BACjB,KAAM,CAAC,CAAE,IAAAI,CAAA,EAAO,CAAE,MAAAyC,EAAO,KAAAnC,KAAkC,CACnD,MAAAH,EAAUH,EAAIU,EAAA,CAAc,EAC5B2B,EAAUzC,EAAQ,IAAIU,CAAI,EAC1BoC,EAAW9C,EAAQ,IAAI6C,CAAK,EAE9B,GAAAtC,EAAQ,SAASkC,CAAO,EACnB,OAAA,KAGH,MAAAf,EAAOtB,EAAID,EAAA,CAAe,EAC1BgB,EAAU,CAAA,EAEhB,UAAWwB,KAAWjB,EAAM,CACpB,MAAAqB,EAAa/C,EAAQ,IAAI2C,CAAO,EAEtCxB,EAAQ,KAAKwB,CAAO,EAEhBI,IAAeD,GACjB3B,EAAQ,KAAKT,CAAI,CAErB,CAEA,OAAOQ,EAAeC,CAAO,CAC/B,CAAA,CACD,EAEK6B,EAAejD,EAAO,QAAQ,CAClC,KAAM,GAAGC,EAAQ,oBACjB,KAAM,CAAC,CAAA,IAAO,OACZ,OAAOkB,GAAehB,EAAAF,EAAQ,UAAR,KAAAE,EAAmB,CAAE,CAAA,CAC7C,CAAA,CACD,EAED,OAAO+C,EAAO,OAAO,CACnB,QAAS,CACP,eAAA/B,EACA,eAAAE,EACA,mBAAAE,EACA,kBAAAE,EACA,sBAAAG,EACA,iBAAAE,EACA,kBAAAI,EACA,kBAAAC,EACA,sBAAAC,EACA,sBAAAC,EACA,gBAAAE,EACA,oBAAAC,EACA,mBAAAK,EACA,aAAAI,CACF,EACA,MAAO,CACL,aAAAlC,EACA,kBAAAD,EACA,UAAAE,EACA,cAAAZ,CACF,CAAA,CACD,CACH"}