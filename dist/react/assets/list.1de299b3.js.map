{"version":3,"file":"list.1de299b3.js","sources":["../../../packages/remesh/src/modules/list.ts"],"sourcesContent":["import { Remesh, RemeshDomainContext, Capitalize, SerializableObject, RemeshEntityItemUpdatePayload } from '../index'\n\nexport type ListModuleOptions<T extends SerializableObject> = {\n  name: Capitalize\n  key: (item: T) => string\n  default?: T[]\n}\n\nexport const ListModule = <T extends SerializableObject>(\n  domain: RemeshDomainContext,\n  options: ListModuleOptions<T>,\n) => {\n  const KeyListState = domain.state<string[]>({\n    name: `${options.name}.KeyListState`,\n    default: options.default?.map(options.key) ?? [],\n  })\n\n  const KeyListQuery = domain.query({\n    name: `${options.name}.KeyListQuery`,\n    impl: ({ get }) => {\n      return get(KeyListState())\n    },\n  })\n\n  const ItemEntity = domain.entity<T>({\n    name: `${options.name}.ItemEntity`,\n    key: options.key,\n    injectEntities: options.default,\n  })\n\n  const ItemQuery = domain.query({\n    name: `${options.name}.ItemQuery`,\n    impl: ({ get }, key: string) => {\n      return get(ItemEntity(key))\n    },\n  })\n\n  const ItemListQuery = domain.query({\n    name: `${options.name}.ItemListQuery`,\n    impl: ({ get }) => {\n      const keyList = get(KeyListQuery())\n      return keyList.map((key) => get(ItemEntity(key)))\n    },\n  })\n\n  const SetListCommand = domain.command({\n    name: `${options.name}.SetListCommand`,\n    impl: ({}, newList: T[]) => {\n      const keyList = [] as string[]\n      const itemUpdatePayloadList = [] as RemeshEntityItemUpdatePayload<T>[]\n\n      for (const item of newList) {\n        const key = options.key(item)\n        const itemUpdatePayload = ItemEntity(key).new(item)\n        keyList.push(key)\n        itemUpdatePayloadList.push(itemUpdatePayload)\n      }\n\n      return [KeyListState().new(keyList), itemUpdatePayloadList]\n    },\n  })\n\n  const AddItemCommand = domain.command({\n    name: `${options.name}.AddItemCommand`,\n    impl: ({ get }, newItem: T) => {\n      const keyList = get(KeyListState())\n      const newKey = options.key(newItem)\n\n      if (keyList.includes(newKey)) {\n        return null\n      }\n\n      return [KeyListState().new([...keyList, newKey]), ItemEntity(newKey).new(newItem)]\n    },\n  })\n\n  const AddItemListCommand = domain.command({\n    name: `${options.name}.AddItemListCommand`,\n    impl: ({ get }, newItems: T[]) => {\n      if (newItems.length === 0) {\n        return null\n      }\n\n      const keyList = get(KeyListState())\n\n      const itemUpdatePayloadList = [] as RemeshEntityItemUpdatePayload<T>[]\n      const newKeyList = [...keyList]\n\n      for (const newItem of newItems) {\n        const newItemKey = options.key(newItem)\n\n        if (newKeyList.includes(newItemKey)) {\n          continue\n        }\n\n        itemUpdatePayloadList.push(ItemEntity(newItemKey).new(newItem))\n        newKeyList.push(newItemKey)\n      }\n\n      return [KeyListState().new(newKeyList), itemUpdatePayloadList]\n    },\n  })\n\n  const DeleteItemCommand = domain.command({\n    name: `${options.name}.DeleteItemCommand`,\n    impl: ({ get }, targetKey: string) => {\n      const list = get(ItemListQuery())\n      const newList = list.filter((item) => options.key(item) !== targetKey)\n\n      if (newList.length === list.length) {\n        return null\n      }\n\n      return [SetListCommand(newList)]\n    },\n  })\n\n  const DeleteItemListCommand = domain.command({\n    name: `${options.name}.DeleteItemListCommand`,\n    impl: ({ get }, targetKeys: string[]) => {\n      const list = get(ItemListQuery())\n      const newList = list.filter((item) => !targetKeys.includes(options.key(item)))\n\n      if (newList.length === list.length) {\n        return null\n      }\n\n      return SetListCommand(newList)\n    },\n  })\n\n  const DeleteAllCommand = domain.command({\n    name: `${options.name}.DeleteAllCommand`,\n    impl: ({}) => {\n      return SetListCommand([])\n    },\n  })\n\n  const UpdateItemCommand = domain.command({\n    name: `${options.name}.UpdateItemCommand`,\n    impl: ({ get }, newItem: T) => {\n      const key = options.key(newItem)\n      const keyList = get(KeyListState())\n\n      if (!keyList.includes(key)) {\n        return null\n      }\n\n      return [ItemEntity(key).new(newItem)]\n    },\n  })\n\n  const UpdateItemListCommand = domain.command({\n    name: `${options.name}.UpdateItemListCommand`,\n    impl: ({ get }, newItems: T[]) => {\n      const keyList = get(KeyListState())\n      const newList = [] as RemeshEntityItemUpdatePayload<T>[]\n\n      for (const newItem of newItems) {\n        const itemKey = options.key(newItem)\n\n        if (keyList.includes(itemKey)) {\n          newList.push(ItemEntity(itemKey).new(newItem))\n        }\n      }\n\n      return newList\n    },\n  })\n\n  const InsertAtCommand = domain.command({\n    name: `${options.name}.InsertAtCommand`,\n    impl: ({ get }, { index, item }: { index: number; item: T }) => {\n      const keyList = get(KeyListState())\n\n      if (keyList.includes(options.key(item))) {\n        return null\n      }\n\n      const list = get(ItemListQuery())\n      const newList = list.slice(0, index).concat(item).concat(list.slice(index))\n\n      return SetListCommand(newList)\n    },\n  })\n\n  const InsertBeforeCommand = domain.command({\n    name: `${options.name}.InsertBeforeCommand`,\n    impl: ({ get }, { before, item }: { before: T; item: T }) => {\n      const keyList = get(KeyListState())\n      const itemKey = options.key(item)\n      const beforeKey = options.key(before)\n\n      if (keyList.includes(itemKey)) {\n        return null\n      }\n\n      const list = get(ItemListQuery())\n      const newList = [] as T[]\n\n      for (const current of list) {\n        const currentKey = options.key(current)\n\n        if (currentKey === beforeKey) {\n          newList.push(item)\n        }\n\n        newList.push(current)\n      }\n\n      return SetListCommand(newList)\n    },\n  })\n\n  const InsertAfterCommand = domain.command({\n    name: `${options.name}.InsertAfterCommand`,\n    impl: ({ get }, { after, item }: { after: T; item: T }) => {\n      const keyList = get(KeyListState())\n      const itemKey = options.key(item)\n      const afterKey = options.key(after)\n\n      if (keyList.includes(itemKey)) {\n        return null\n      }\n\n      const list = get(ItemListQuery())\n      const newList = [] as T[]\n\n      for (const current of list) {\n        const currentKey = options.key(current)\n\n        newList.push(current)\n\n        if (currentKey === afterKey) {\n          newList.push(item)\n        }\n      }\n\n      return SetListCommand(newList)\n    },\n  })\n\n  const ResetCommand = domain.command({\n    name: `${options.name}.ResetCommand`,\n    impl: ({}) => {\n      return SetListCommand(options.default ?? [])\n    },\n  })\n\n  return Remesh.module({\n    command: {\n      SetListCommand,\n      AddItemCommand,\n      AddItemListCommand,\n      DeleteItemCommand,\n      DeleteItemListCommand,\n      DeleteAllCommand,\n      UpdateItemCommand,\n      UpdateItemListCommand,\n      InsertAtCommand,\n      InsertBeforeCommand,\n      InsertAfterCommand,\n      ResetCommand,\n    },\n    query: {\n      KeyListQuery,\n      ItemQuery,\n      ItemListQuery,\n    },\n  })\n}\n"],"names":[],"mappings":"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"}