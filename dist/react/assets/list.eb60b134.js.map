{"version":3,"file":"list.eb60b134.js","sources":["../../../packages/remesh/src/modules/list.ts"],"sourcesContent":["import {\r\n  Remesh,\r\n  RemeshDomainContext,\r\n  DomainConceptName,\r\n  SerializableObject,\r\n  RemeshEntityItemUpdatePayload,\r\n} from '../index'\r\n\r\nexport type ListModuleOptions<T extends SerializableObject> = {\r\n  name: DomainConceptName<'ListModule'>\r\n  key: (item: T) => string\r\n  default?: T[]\r\n}\r\n\r\nexport const ListModule = <T extends SerializableObject>(\r\n  domain: RemeshDomainContext,\r\n  options: ListModuleOptions<T>,\r\n) => {\r\n  const KeyListState = domain.state<string[]>({\r\n    name: `${options.name}.KeyListState`,\r\n    default: options.default?.map(options.key) ?? [],\r\n  })\r\n\r\n  const KeyListQuery = domain.query({\r\n    name: `${options.name}.KeyListQuery`,\r\n    impl: ({ get }) => {\r\n      return get(KeyListState())\r\n    },\r\n  })\r\n\r\n  const ItemEntity = domain.entity<T>({\r\n    name: `${options.name}.ItemEntity`,\r\n    key: options.key,\r\n    injectEntities: options.default,\r\n  })\r\n\r\n  const ItemQuery = domain.query({\r\n    name: `${options.name}.ItemQuery`,\r\n    impl: ({ get }, key: string) => {\r\n      return get(ItemEntity(key))\r\n    },\r\n  })\r\n\r\n  const ItemListQuery = domain.query({\r\n    name: `${options.name}.ItemListQuery`,\r\n    impl: ({ get }) => {\r\n      const keyList = get(KeyListQuery())\r\n      return keyList.map((key) => get(ItemEntity(key)))\r\n    },\r\n  })\r\n\r\n  const SetListCommand = domain.command({\r\n    name: `${options.name}.SetListCommand`,\r\n    impl: ({}, newList: T[]) => {\r\n      const keyList = [] as string[]\r\n      const itemUpdatePayloadList = [] as RemeshEntityItemUpdatePayload<T>[]\r\n\r\n      for (const item of newList) {\r\n        const key = options.key(item)\r\n        const itemUpdatePayload = ItemEntity(key).new(item)\r\n        keyList.push(key)\r\n        itemUpdatePayloadList.push(itemUpdatePayload)\r\n      }\r\n\r\n      return [KeyListState().new(keyList), itemUpdatePayloadList]\r\n    },\r\n  })\r\n\r\n  const AddItemCommand = domain.command({\r\n    name: `${options.name}.AddItemCommand`,\r\n    impl: ({ get }, newItem: T) => {\r\n      const keyList = get(KeyListState())\r\n      const newKey = options.key(newItem)\r\n\r\n      if (keyList.includes(newKey)) {\r\n        return UpdateItemCommand(newItem)\r\n      }\r\n\r\n      return [KeyListState().new([...keyList, newKey]), ItemEntity(newKey).new(newItem)]\r\n    },\r\n  })\r\n\r\n  const AddItemListCommand = domain.command({\r\n    name: `${options.name}.AddItemListCommand`,\r\n    impl: ({ get }, newItems: T[]) => {\r\n      if (newItems.length === 0) {\r\n        return null\r\n      }\r\n\r\n      const keyList = get(KeyListState())\r\n\r\n      const itemUpdatePayloadList = [] as RemeshEntityItemUpdatePayload<T>[]\r\n      const newKeyList = [...keyList]\r\n\r\n      for (const newItem of newItems) {\r\n        const newItemKey = options.key(newItem)\r\n\r\n        if (newKeyList.includes(newItemKey)) {\r\n          continue\r\n        }\r\n\r\n        itemUpdatePayloadList.push(ItemEntity(newItemKey).new(newItem))\r\n        newKeyList.push(newItemKey)\r\n      }\r\n\r\n      return [KeyListState().new(newKeyList), itemUpdatePayloadList]\r\n    },\r\n  })\r\n\r\n  const DeleteItemCommand = domain.command({\r\n    name: `${options.name}.DeleteItemCommand`,\r\n    impl: ({ get }, targetKey: string) => {\r\n      const list = get(ItemListQuery())\r\n      const newList = list.filter((item) => options.key(item) !== targetKey)\r\n\r\n      if (newList.length === list.length) {\r\n        return null\r\n      }\r\n\r\n      return [SetListCommand(newList)]\r\n    },\r\n  })\r\n\r\n  const DeleteItemListCommand = domain.command({\r\n    name: `${options.name}.DeleteItemListCommand`,\r\n    impl: ({ get }, targetKeys: string[]) => {\r\n      const list = get(ItemListQuery())\r\n      const newList = list.filter((item) => !targetKeys.includes(options.key(item)))\r\n\r\n      if (newList.length === list.length) {\r\n        return null\r\n      }\r\n\r\n      return SetListCommand(newList)\r\n    },\r\n  })\r\n\r\n  const DeleteAllCommand = domain.command({\r\n    name: `${options.name}.DeleteAllCommand`,\r\n    impl: ({}) => {\r\n      return SetListCommand([])\r\n    },\r\n  })\r\n\r\n  const UpdateItemCommand = domain.command({\r\n    name: `${options.name}.UpdateItemCommand`,\r\n    impl: ({ get }, newItem: T) => {\r\n      const key = options.key(newItem)\r\n      const keyList = get(KeyListState())\r\n\r\n      if (!keyList.includes(key)) {\r\n        return null\r\n      }\r\n\r\n      return [ItemEntity(key).new(newItem)]\r\n    },\r\n  })\r\n\r\n  const UpdateItemListCommand = domain.command({\r\n    name: `${options.name}.UpdateItemListCommand`,\r\n    impl: ({ get }, newItems: T[]) => {\r\n      const keyList = get(KeyListState())\r\n      const newList = [] as RemeshEntityItemUpdatePayload<T>[]\r\n\r\n      for (const newItem of newItems) {\r\n        const itemKey = options.key(newItem)\r\n\r\n        if (keyList.includes(itemKey)) {\r\n          newList.push(ItemEntity(itemKey).new(newItem))\r\n        }\r\n      }\r\n\r\n      return newList\r\n    },\r\n  })\r\n\r\n  const InsertAtCommand = domain.command({\r\n    name: `${options.name}.InsertAtCommand`,\r\n    impl: ({ get }, { index, item }: { index: number; item: T }) => {\r\n      const keyList = get(KeyListState())\r\n\r\n      if (keyList.includes(options.key(item))) {\r\n        return null\r\n      }\r\n\r\n      const list = get(ItemListQuery())\r\n      const newList = list.slice(0, index).concat(item).concat(list.slice(index))\r\n\r\n      return SetListCommand(newList)\r\n    },\r\n  })\r\n\r\n  const InsertBeforeCommand = domain.command({\r\n    name: `${options.name}.InsertBeforeCommand`,\r\n    impl: ({ get }, { before, item }: { before: T; item: T }) => {\r\n      const keyList = get(KeyListState())\r\n      const itemKey = options.key(item)\r\n      const beforeKey = options.key(before)\r\n\r\n      if (keyList.includes(itemKey)) {\r\n        return null\r\n      }\r\n\r\n      const list = get(ItemListQuery())\r\n      const newList = [] as T[]\r\n\r\n      for (const current of list) {\r\n        const currentKey = options.key(current)\r\n\r\n        if (currentKey === beforeKey) {\r\n          newList.push(item)\r\n        }\r\n\r\n        newList.push(current)\r\n      }\r\n\r\n      return SetListCommand(newList)\r\n    },\r\n  })\r\n\r\n  const InsertAfterCommand = domain.command({\r\n    name: `${options.name}.InsertAfterCommand`,\r\n    impl: ({ get }, { after, item }: { after: T; item: T }) => {\r\n      const keyList = get(KeyListState())\r\n      const itemKey = options.key(item)\r\n      const afterKey = options.key(after)\r\n\r\n      if (keyList.includes(itemKey)) {\r\n        return null\r\n      }\r\n\r\n      const list = get(ItemListQuery())\r\n      const newList = [] as T[]\r\n\r\n      for (const current of list) {\r\n        const currentKey = options.key(current)\r\n\r\n        newList.push(current)\r\n\r\n        if (currentKey === afterKey) {\r\n          newList.push(item)\r\n        }\r\n      }\r\n\r\n      return SetListCommand(newList)\r\n    },\r\n  })\r\n\r\n  const ResetCommand = domain.command({\r\n    name: `${options.name}.ResetCommand`,\r\n    impl: ({}) => {\r\n      return SetListCommand(options.default ?? [])\r\n    },\r\n  })\r\n\r\n  return Remesh.module({\r\n    command: {\r\n      SetListCommand,\r\n      AddItemCommand,\r\n      AddItemListCommand,\r\n      DeleteItemCommand,\r\n      DeleteItemListCommand,\r\n      DeleteAllCommand,\r\n      UpdateItemCommand,\r\n      UpdateItemListCommand,\r\n      InsertAtCommand,\r\n      InsertBeforeCommand,\r\n      InsertAfterCommand,\r\n      ResetCommand,\r\n    },\r\n    query: {\r\n      KeyListQuery,\r\n      ItemQuery,\r\n      ItemListQuery,\r\n    },\r\n  })\r\n}\r\n"],"names":["ListModule","domain","options","KeyListState","_b","_a","KeyListQuery","get","ItemEntity","ItemQuery","key","ItemListQuery","SetListCommand","newList","keyList","itemUpdatePayloadList","item","itemUpdatePayload","AddItemCommand","newItem","newKey","UpdateItemCommand","AddItemListCommand","newItems","newKeyList","newItemKey","DeleteItemCommand","targetKey","list","DeleteItemListCommand","targetKeys","DeleteAllCommand","UpdateItemListCommand","itemKey","InsertAtCommand","index","InsertBeforeCommand","before","beforeKey","current","InsertAfterCommand","after","afterKey","currentKey","ResetCommand","Remesh"],"mappings":"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"}