{"version":3,"file":"index.44d6d55c.js","sources":["../../../node_modules/.pnpm/rxjs@7.5.7/node_modules/rxjs/dist/esm5/internal/operators/tap.js","../../../projects/domains/src/todo-mvc/uuid.ts","../../../projects/domains/src/todo-mvc/todo-repo.ts","../../../projects/domains/src/todo-mvc/index.ts","../../../projects/react-demos/src/todo-mvc/hooks.ts","../../../projects/react-demos/src/todo-mvc/TodoItem.tsx","../../../projects/react-demos/src/todo-mvc/TodoList.tsx","../../../projects/react-demos/src/todo-mvc/todoRepo.ts","../../../projects/react-demos/src/todo-mvc/index.tsx"],"sourcesContent":["import { isFunction } from '../util/isFunction';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nexport function tap(observerOrNext, error, complete) {\n    var tapObserver = isFunction(observerOrNext) || error || complete\n        ?\n            { next: observerOrNext, error: error, complete: complete }\n        : observerOrNext;\n    return tapObserver\n        ? operate(function (source, subscriber) {\n            var _a;\n            (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n            var isUnsub = true;\n            source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n                var _a;\n                (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);\n                subscriber.next(value);\n            }, function () {\n                var _a;\n                isUnsub = false;\n                (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n                subscriber.complete();\n            }, function (err) {\n                var _a;\n                isUnsub = false;\n                (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);\n                subscriber.error(err);\n            }, function () {\n                var _a, _b;\n                if (isUnsub) {\n                    (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n                }\n                (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);\n            }));\n        })\n        :\n            identity;\n}\n//# sourceMappingURL=tap.js.map","export const uuid = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8\n    return v.toString(16)\n  })\n","import { Remesh } from 'remesh'\nimport type { Todo } from '.'\n\ntype TodoRepo = {\n  getTodoList: () => Promise<Todo[]>\n  addTodo: (todo: Todo) => void\n  removeTodoByIds: (ids: Todo['id'][]) => void\n  updateTodo: (updateTodo: Todo) => void\n  toggleCompletedByIds: (ids: Todo['id'][], completed: boolean) => void\n}\n\nexport const TodoRepoExtern = Remesh.extern<TodoRepo>({\n  name: 'TodoRepoExtern',\n  default: {\n    async getTodoList() {\n      throw new Error('Not implemented')\n    },\n    async addTodo() {\n      throw new Error('Not implemented')\n    },\n    async removeTodoByIds() {\n      throw new Error('Not implemented')\n    },\n    async updateTodo() {\n      throw new Error('Not implemented')\n    },\n\n    async toggleCompletedByIds() {\n      throw new Error('Not implemented')\n    },\n  },\n})\n","import { Remesh } from 'remesh'\nimport { from, map, merge, tap } from 'rxjs'\nimport { uuid } from './uuid'\nimport { TodoRepoExtern } from './todo-repo'\n\nexport type Todo = {\n  id: string\n  name: string\n  completed: boolean\n}\n\nexport const TodoDomain = Remesh.domain({\n  name: 'TodoDomain',\n  impl: (domain) => {\n    const repo = domain.getExtern(TodoRepoExtern)\n\n    const TodoListState = domain.state<Todo[]>({\n      name: 'TodoListState',\n      default: [],\n    })\n\n    const TodoListQuery = domain.query({\n      name: 'TodoListQuery',\n      impl({ get }, status?: 'completed' | 'active') {\n        const todoList = get(TodoListState())\n        if (status === 'active') {\n          return todoList.filter((todo) => !todo.completed)\n        } else if (status === 'completed') {\n          return todoList.filter((todo) => todo.completed)\n        } else {\n          return todoList\n        }\n      },\n    })\n\n    const HasCompletedQuery = domain.query({\n      name: 'HasCompletedQuery',\n      impl({ get }) {\n        return get(TodoListQuery('completed')).length > 0\n      },\n    })\n\n    const ActiveTodoCountQuery = domain.query({\n      name: 'ActiveTodoCountQuery',\n      impl({ get }) {\n        return get(TodoListQuery('active')).length\n      },\n    })\n\n    const AllCompletedQuery = domain.query({\n      name: 'AllCompletedQuery',\n      impl({ get }) {\n        return get(ActiveTodoCountQuery()) === 0 && get(TodoListQuery()).length > 0\n      },\n    })\n\n    const TodoAddedEvent = domain.event<Todo>({\n      name: 'TodoAddedEvent',\n    })\n\n    const SetTodoListCommand = domain.command({\n      name: 'SetTodoListCommand',\n      impl(_, todoList: Todo[]) {\n        return TodoListState().new(todoList)\n      },\n    })\n\n    const AddTodoFailedEvent = domain.event<string>({\n      name: 'AddTodoFailedEvent',\n    })\n\n    const AddTodoCommand = domain.command({\n      name: 'AddTodoCommand',\n      impl({ get }, todoName: string) {\n        if (todoName.trim() === '') {\n          return [AddTodoFailedEvent('Cannot be empty, please enter the TODO name')]\n        }\n\n        const todoList = get(TodoListState())\n        const newTodo = {\n          id: uuid(),\n          name: todoName,\n          completed: false,\n        }\n\n        return [TodoListState().new([...todoList, newTodo]), TodoAddedEvent(newTodo)]\n      },\n    })\n\n    const RemoveTodoEvent = domain.event<Todo['id'][]>({\n      name: 'RemoveTodoEvent',\n    })\n\n    const RemoveTodoCommand = domain.command({\n      name: 'RemoveTodoCommand',\n      impl({ get }, id: Todo['id']) {\n        const todoList = get(TodoListState())\n        const newTodoList = todoList.filter((todo) => todo.id !== id)\n\n        return [TodoListState().new(newTodoList), RemoveTodoEvent([id])]\n      },\n    })\n\n    const TodoUpdatedEvent = domain.event<Todo>({\n      name: 'TodoUpdatedEvent',\n    })\n\n    const UpdateTodoCommand = domain.command({\n      name: 'UpdateTodoCommand',\n      impl({ get }, payload: { id: Todo['id'] } & Partial<Todo>) {\n        const todoList = get(TodoListState())\n\n        if (payload.name && payload.name.trim() === '') {\n          return RemoveTodoCommand(payload.id)\n        }\n\n        const newTodoList = todoList.map((todo) => {\n          if (todo.id === payload.id) {\n            return {\n              ...todo,\n              ...payload,\n              id: todo.id,\n            }\n          } else {\n            return todo\n          }\n        })\n\n        const targetTodo = newTodoList.find((todo) => todo.id === payload.id)\n\n        if (!targetTodo) {\n          return null\n        }\n\n        return [TodoListState().new(newTodoList), TodoUpdatedEvent(targetTodo)]\n      },\n    })\n\n    const TodoCompletedChangedEvent = domain.event<{ ids: Todo['id'][]; completed: boolean }>({\n      name: 'TodoCompletedChangedEvent',\n    })\n\n    const ToggleTodoCompletedCommand = domain.command({\n      name: 'ToggleTodoCompletedCommand',\n      impl({ get }, targetTodoId: Todo['id']) {\n        const todoList = get(TodoListState())\n\n        const newTodoList = todoList.map((todo) => {\n          if (todo.id === targetTodoId) {\n            return {\n              ...todo,\n              completed: !todo.completed,\n            }\n          }\n          return todo\n        })\n\n        const targetTodo = newTodoList.find((todo) => todo.id === targetTodoId)\n\n        if (!targetTodo) {\n          return null\n        }\n\n        const eventData = {\n          ids: [targetTodoId],\n          completed: targetTodo?.completed,\n        }\n\n        return [TodoListState().new(newTodoList), TodoCompletedChangedEvent(eventData)]\n      },\n    })\n\n    const ToggleAllTodoCompletedCommand = domain.command({\n      name: 'ToggleAllTodoCompletedCommand',\n      impl({ get }, completed: boolean) {\n        const todoList = get(TodoListState())\n\n        if (todoList.length === 0) {\n          return null\n        }\n\n        const newTodoList = todoList.map((todo) => {\n          return { ...todo, completed }\n        })\n\n        return [\n          TodoListState().new(newTodoList),\n          TodoCompletedChangedEvent({\n            ids: newTodoList.map((todo) => todo.id),\n            completed,\n          }),\n        ]\n      },\n    })\n\n    const ClearCompletedCommand = domain.command({\n      name: 'ClearCompletedCommand',\n      impl({ get }) {\n        const todoList = get(TodoListState())\n        const newTodoList = todoList.filter((todo) => !todo.completed)\n        const removedTodoIdList = todoList.filter((todo) => todo.completed).map((todo) => todo.id)\n\n        return [TodoListState().new(newTodoList), RemoveTodoEvent(removedTodoIdList)]\n      },\n    })\n\n    domain.effect({\n      name: 'FromRepoToStateEffect',\n      impl() {\n        return from(repo.getTodoList()).pipe(map((todos) => SetTodoListCommand(todos)))\n      },\n    })\n\n    domain.effect({\n      name: 'FromStateToRepoEffect',\n      impl: ({ fromEvent }) => {\n        const addTodo$ = fromEvent(TodoAddedEvent).pipe(tap((todo) => repo.addTodo(todo)))\n\n        const removeTodo$ = fromEvent(RemoveTodoEvent).pipe(tap((ids) => repo.removeTodoByIds(ids)))\n\n        const updateTodo$ = fromEvent(TodoUpdatedEvent).pipe(tap((todo) => repo.updateTodo(todo)))\n\n        const toggleTodoCompleted$ = fromEvent(TodoCompletedChangedEvent).pipe(\n          tap((eventData) => repo.toggleCompletedByIds(eventData.ids, eventData.completed)),\n        )\n\n        return merge(addTodo$, removeTodo$, updateTodo$, toggleTodoCompleted$).pipe(map(() => null))\n      },\n    })\n\n    return {\n      query: {\n        TodoListQuery,\n        ActiveTodoCountQuery,\n        HasCompletedQuery,\n        AllCompletedQuery,\n      },\n      command: {\n        AddTodoCommand,\n        RemoveTodoCommand,\n        ToggleTodoCompletedCommand,\n        ToggleAllTodoCompletedCommand,\n        UpdateTodoCommand,\n        ClearCompletedCommand,\n      },\n      event: { AddTodoFailedEvent },\n    }\n  },\n})\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\n\nexport function useInputHandler(defaultValue: string) {\n  const [value, setValue] = useState(defaultValue)\n\n  const onChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value)\n  }, [])\n\n  return [value, onChange, setValue] as const\n}\n\nexport function useKeyPressHandler(key: string, callback: (event: React.KeyboardEvent<HTMLInputElement>) => void) {\n  const callbackRef = useRef(callback)\n\n  const handleKeyPress = useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key.toLocaleLowerCase() === key.toLocaleLowerCase()) {\n        event.preventDefault()\n        callbackRef.current(event)\n      }\n    },\n    [key],\n  )\n\n  useEffect(() => {\n    callbackRef.current = callback\n  })\n\n  return handleKeyPress\n}\n","import { useEffect, useRef, useState } from 'react'\nimport { useRemeshDomain, useRemeshSend } from 'remesh-react'\n\nimport { Todo, TodoDomain } from 'remesh-domains-for-demos/dist/todo-mvc'\nimport { useInputHandler, useKeyPressHandler } from './hooks'\n\nexport function TodoItem({ todo }: { todo: Todo }) {\n  const send = useRemeshSend()\n  const domain = useRemeshDomain(TodoDomain())\n\n  const [editing, setEditing] = useState(false)\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [todoName, handleTodoNameChange] = useInputHandler(todo.name)\n\n  const handlePressEnter = useKeyPressHandler('Enter', () => {\n    send(domain.command.UpdateTodoCommand({ ...todo, name: todoName }))\n    setEditing(false)\n  })\n\n  const handleEnableEdit = () => {\n    setEditing(true)\n  }\n\n  const handleSave = () => {\n    send(domain.command.ToggleTodoCompletedCommand(todo.id))\n  }\n\n  const handleDelete = () => {\n    send(domain.command.RemoveTodoCommand(todo.id))\n  }\n\n  useEffect(() => {\n    if (editing) {\n      ref.current?.focus()\n    }\n  }, [editing])\n\n  return (\n    <li onDoubleClick={handleEnableEdit} className={`${editing ? 'editing' : ''} ${todo.completed ? 'completed' : ''}`}>\n      <div className=\"view\">\n        <input type=\"checkbox\" className=\"toggle\" checked={todo.completed} onChange={handleSave} />\n        <label>{todo.name}</label>\n        <button className=\"destroy\" onClick={handleDelete} />\n      </div>\n      {editing && (\n        <input\n          ref={ref}\n          className=\"edit\"\n          value={todoName}\n          onChange={handleTodoNameChange}\n          onKeyPress={handlePressEnter}\n          onBlur={() => {\n            setEditing(false)\n          }}\n        />\n      )}\n    </li>\n  )\n}\n","import { useRemeshDomain, useRemeshEvent, useRemeshQuery, useRemeshSend } from 'remesh-react'\nimport { NavLink, useParams } from 'react-router-dom'\n\nimport { TodoDomain } from 'remesh-domains-for-demos/dist/todo-mvc'\nimport { useInputHandler, useKeyPressHandler } from './hooks'\nimport { TodoItem } from './TodoItem'\n\ntype FilterType = 'completed' | 'active' | undefined\n\nexport const TodoList = () => {\n  const send = useRemeshSend()\n  const { filter } = useParams()\n\n  const domain = useRemeshDomain(TodoDomain())\n\n  const todoList = useRemeshQuery(domain.query.TodoListQuery(filter as FilterType))\n  const activeTodoCount = useRemeshQuery(domain.query.ActiveTodoCountQuery())\n  const hasCompleted = useRemeshQuery(domain.query.HasCompletedQuery())\n  const allCompleted = useRemeshQuery(domain.query.AllCompletedQuery())\n\n  const [newTodo, handleTodoNameInput, setNewTodo] = useInputHandler('')\n\n  const handlePressEnter = useKeyPressHandler('Enter', () => {\n    send(domain.command.AddTodoCommand(newTodo))\n    setNewTodo('')\n  })\n\n  const handleToggleAll = () => {\n    send(domain.command.ToggleAllTodoCompletedCommand(!allCompleted))\n  }\n\n  const handleClearCompleted = () => {\n    send(domain.command.ClearCompletedCommand())\n  }\n\n  useRemeshEvent(domain.event.AddTodoFailedEvent, (message) => {\n    alert(message)\n  })\n\n  console.log('render list')\n\n  return (\n    <div className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={newTodo}\n          onChange={handleTodoNameInput}\n          onKeyDown={handlePressEnter}\n        />\n      </header>\n\n      <section className=\"main\">\n        <input\n          id=\"toggle-all\"\n          type=\"checkbox\"\n          className=\"toggle-all\"\n          checked={allCompleted}\n          onChange={handleToggleAll}\n        />\n        <label htmlFor=\"toggle-all\" />\n        <ul className=\"todo-list\">\n          {todoList.map((todo) => (\n            <TodoItem key={todo.id} todo={todo} />\n          ))}\n        </ul>\n      </section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          <strong>{activeTodoCount}</strong> items left\n        </span>\n        <ul className=\"filters\">\n          <li>\n            <NavLink to=\"/\" className={(navData) => (navData.isActive ? 'selected' : '')}>\n              All\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/active\" className={(navData) => (navData.isActive ? 'selected' : '')}>\n              Active\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/completed\" className={(navData) => (navData.isActive ? 'selected' : '')}>\n              Completed\n            </NavLink>\n          </li>\n        </ul>\n        {hasCompleted && (\n          <button className=\"clear-completed\" onClick={handleClearCompleted}>\n            Clear completed\n          </button>\n        )}\n      </footer>\n    </div>\n  )\n}\n","import localforage from 'localforage'\nimport type { Todo } from 'remesh-domains-for-demos/dist/todo-mvc'\nimport { TodoRepoExtern } from 'remesh-domains-for-demos/dist/todo-mvc/todo-repo'\n\nconst storageKey = 'todo-mvc-data'\nconst getTodoList = () => {\n  return localforage.getItem<Todo[]>(storageKey).then((value) => value ?? [])\n}\n\nexport const TodoRepoExternImpl = TodoRepoExtern.impl({\n  async getTodoList() {\n    return getTodoList()\n  },\n  async addTodo(todo: Todo) {\n    let data = await getTodoList()\n    await localforage.setItem(storageKey, data.concat(todo))\n  },\n  async removeTodoByIds(ids) {\n    let data = await getTodoList()\n    await localforage.setItem(\n      storageKey,\n      data.filter((item) => !ids.includes(item.id)),\n    )\n  },\n  async updateTodo(updateTodo) {\n    let data = await getTodoList()\n    await localforage.setItem(\n      storageKey,\n      data.map((todo) => (todo.id === updateTodo.id ? { ...todo, ...updateTodo } : todo)),\n    )\n  },\n\n  async toggleCompletedByIds(ids, completed) {\n    let data = await getTodoList()\n    await localforage.setItem(\n      storageKey,\n      data.map((todo) => (ids.includes(todo.id) ? { ...todo, completed } : todo)),\n    )\n  },\n})\n","import React, { StrictMode } from 'react'\nimport * as ReactDOMClient from 'react-dom/client'\n\nimport { Remesh } from 'remesh'\nimport { HashRouter, Routes, Route } from 'react-router-dom'\n\nimport { RemeshRoot } from 'remesh-react'\nimport { RemeshReduxDevtools } from 'remesh-redux-devtools'\nimport { RemeshLogger } from 'remesh-logger'\n\nimport { TodoList } from './TodoList'\nimport { TodoRepoExternImpl } from './todoRepo'\n\nconst container = document.getElementById('root')\n\nif (container) {\n  const root = ReactDOMClient.createRoot(container)\n  const store = Remesh.store({\n    externs: [TodoRepoExternImpl],\n    inspectors: [RemeshReduxDevtools(), RemeshLogger()],\n  })\n\n  root.render(\n    <StrictMode>\n      <RemeshRoot store={store}>\n        <HashRouter basename=\"/\">\n          <Routes>\n            <Route path=\"/\" element={<TodoList />} />\n            <Route path=\"/:filter\" element={<TodoList />} />\n          </Routes>\n        </HashRouter>\n      </RemeshRoot>\n    </StrictMode>,\n  )\n}\n"],"names":["tap","observerOrNext","error","complete","tapObserver","isFunction","operate","source","subscriber","_a","isUnsub","createOperatorSubscriber","value","err","_b","identity","uuid","c","r","v","TodoRepoExtern","Remesh","TodoDomain","domain","repo","TodoListState","TodoListQuery","get","status","todoList","todo","HasCompletedQuery","ActiveTodoCountQuery","AllCompletedQuery","TodoAddedEvent","SetTodoListCommand","_","AddTodoFailedEvent","AddTodoCommand","todoName","newTodo","RemoveTodoEvent","RemoveTodoCommand","id","newTodoList","TodoUpdatedEvent","UpdateTodoCommand","payload","targetTodo","TodoCompletedChangedEvent","ToggleTodoCompletedCommand","targetTodoId","eventData","ToggleAllTodoCompletedCommand","completed","ClearCompletedCommand","removedTodoIdList","from","map","todos","fromEvent","addTodo$","removeTodo$","ids","updateTodo$","toggleTodoCompleted$","merge","useInputHandler","defaultValue","setValue","useState","onChange","useCallback","event","useKeyPressHandler","key","callback","callbackRef","useRef","handleKeyPress","useEffect","TodoItem","send","useRemeshSend","useRemeshDomain","editing","setEditing","ref","handleTodoNameChange","name","handlePressEnter","command","handleEnableEdit","handleSave","handleDelete","current","focus","_jsxs","_jsx","TodoList","filter","useParams","useRemeshQuery","query","activeTodoCount","hasCompleted","allCompleted","handleTodoNameInput","setNewTodo","handleToggleAll","handleClearCompleted","message","alert","console","log","NavLink","navData","isActive","storageKey","getTodoList","localforage","TodoRepoExternImpl","data","item","updateTodo","container","document","getElementById","root","ReactDOMClient","store","externs","inspectors","RemeshReduxDevtools","RemeshLogger","render","StrictMode","RemeshRoot","HashRouter","Routes","Route"],"mappings":"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"}