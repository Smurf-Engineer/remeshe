{"version":3,"file":"index.6a5071cd.js","sources":["../../../projects/domains/src/todo-mvc-with-multiple-domains/domain-externs/storage.ts","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/domain-externs-impl/storage.ts","../../../packages/remesh/src/modules/text.ts","../../../projects/domains/src/todo-mvc-with-multiple-domains/domain-modules/sync-storage.ts","../../../projects/domains/src/todo-mvc-with-multiple-domains/domains/TodoInput.ts","../../../projects/domains/src/todo-mvc-with-multiple-domains/utils/uuid.ts","../../../projects/domains/src/todo-mvc-with-multiple-domains/domains/TodoList.ts","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/hooks/useKeyPressHandler.ts","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/components/TodoHeader.tsx","../../../packages/remesh/src/modules/switch.ts","../../../projects/domains/src/todo-mvc-with-multiple-domains/domains/TodoFilter.ts","../../../projects/domains/src/todo-mvc-with-multiple-domains/domains/TodoApp.ts","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/hooks/useInputHandler.ts","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/components/TodoItem.tsx","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/components/TodoList.tsx","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/components/TodoFooter.tsx","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/components/TodoApp.tsx","../../../projects/react-demos/src/todo-mvc-with-multiple-domains/index.tsx"],"sourcesContent":["import { Remesh } from 'remesh'\n\nexport type Storage = {\n  get: <T>(key: string) => Promise<T | null>\n  set: <T>(key: string, value: T) => Promise<void>\n  clear: (key: string) => Promise<void>\n}\n\nexport const Storage = Remesh.extern<Storage>({\n  name: 'Storage',\n  default: {\n    get: () => {\n      throw new Error('Not implemented')\n    },\n    set: () => {\n      throw new Error('Not implemented')\n    },\n    clear: () => {\n      throw new Error('Not implemented')\n    },\n  },\n})\n","import localforage from 'localforage'\r\nimport { Storage } from 'remesh-domains-for-demos/dist/todo-mvc-with-multiple-domains/domain-externs/storage'\r\n\r\nexport const StorageImpl = Storage.impl({\r\n  get: (key) => {\r\n    return localforage.getItem(key)\r\n  },\r\n  set: async (key, value) => {\r\n    await localforage.setItem(key, value)\r\n  },\r\n  clear: (key) => {\r\n    return localforage.removeItem(key)\r\n  },\r\n})\r\n","import { RemeshDomainContext } from '../index'\r\n\r\nexport type TextModuleOptions = {\r\n  name: string\r\n  default?: string\r\n}\r\n\r\nexport const TextModule = (domain: RemeshDomainContext, options: TextModuleOptions) => {\r\n  const TextState = domain.state({\r\n    name: `${options.name}.TextState`,\r\n    default: options.default ?? '',\r\n  })\r\n\r\n  const text = domain.query({\r\n    name: `${options.name}.TextQuery`,\r\n    impl: ({ get }) => get(TextState()),\r\n  })\r\n\r\n  const setText = domain.command({\r\n    name: `${options.name}.setText`,\r\n    impl: ( _ , current: string) => {\r\n      return TextState().new(current)\r\n    },\r\n  })\r\n\r\n  const clearText = domain.command({\r\n    name: `${options.name}.clearText`,\r\n    impl: () => {\r\n      return setText('')\r\n    },\r\n  })\r\n\r\n  const reset = domain.command({\r\n    name: `${options.name}.reset`,\r\n    impl: ( _ ) => {\r\n      return TextState().new(options.default ?? '')\r\n    },\r\n  })\r\n\r\n  return {\r\n    query: {\r\n      text,\r\n    },\r\n    command: {\r\n      setText,\r\n      clearText,\r\n      reset,\r\n    },\r\n  }\r\n}\r\n","import { RemeshDomainContext, RemeshCommandOutput, RemeshEvent } from 'remesh'\n\nimport { from } from 'rxjs'\nimport { filter, map, tap } from 'rxjs/operators'\n\nimport { Storage } from '../domain-externs/storage'\n\nexport type SyncStorageOptions<T, U = T> = {\n  storageKey: string\n  TriggerEvent: RemeshEvent<any, T>\n  saveData: (event: T) => U\n  readData: (value: U) => RemeshCommandOutput\n}\n\nconst createOptions = <R>(storageKey: string, callback: <T, U>(options: SyncStorageOptions<T, U>) => R) => {\n  return {\n    listenTo: <T>(TriggerEvent: RemeshEvent<any, T>) => {\n      return {\n        saveData: <U>(saveData: (event: T) => U) => {\n          return {\n            readData: (readData: (value: U) => RemeshCommandOutput) => {\n              return callback({\n                storageKey,\n                TriggerEvent,\n                saveData: saveData,\n                readData: readData,\n              })\n            },\n          }\n        },\n        readData: (readData: (value: T) => RemeshCommandOutput) => {\n          return callback({\n            storageKey,\n            TriggerEvent,\n            saveData: (event: T) => event,\n            readData: readData,\n          })\n        },\n      }\n    },\n  }\n}\n\nconst createSyncStorage = <T, U = T>(domain: RemeshDomainContext, options: SyncStorageOptions<T, U>) => {\n  const storage = domain.getExtern(Storage)\n\n  const readStorage = domain.command$({\n    name: 'readStorage',\n    impl: () => {\n      return from(storage.get<U>(options.storageKey)).pipe(\n        filter((value): value is U => !!value),\n        map((value) => options.readData(value)),\n      )\n    },\n  })\n\n  const writeStorage = domain.command$({\n    name: 'writeStorage',\n    impl: ({ fromEvent }) => {\n      return fromEvent(options.TriggerEvent).pipe(\n        tap((value) => storage.set(options.storageKey, options.saveData(value))),\n        map(() => null),\n      )\n    },\n  })\n\n  domain.ignite(() => readStorage())\n  domain.ignite(() => writeStorage())\n}\n\nexport const syncStorage = (domain: RemeshDomainContext, storageKey: string) => {\n  return createOptions(storageKey, (options) => createSyncStorage(domain, options))\n}\n","import { Remesh } from 'remesh'\nimport { TextModule } from 'remesh/modules/text'\n\nimport { syncStorage } from '../domain-modules/sync-storage'\n\nexport const TODO_INPUT_STORAGE_KEY = 'remesh-example/todo-input'\n\nexport const TodoInputDomain = Remesh.domain({\n  name: 'TodoInput',\n  impl: (domain) => {\n    const todoInputModule = TextModule(domain, {\n      name: 'TodoInput',\n    })\n\n    const TodoInputChangedEvent = domain.event<string>({\n      name: 'TodoInputChangedEvent',\n    })\n\n    const todoInput = todoInputModule.query.text\n\n    const setTodoInput = domain.command({\n      name: 'setTodoInput',\n      impl: ({}, newTodoInput: string) => {\n        return [todoInputModule.command.setText(newTodoInput), TodoInputChangedEvent(newTodoInput)]\n      },\n    })\n\n    const clearTodoInput = todoInputModule.command.clearText\n\n    syncStorage(domain, TODO_INPUT_STORAGE_KEY)\n      .listenTo(TodoInputChangedEvent)\n      .readData((value) => setTodoInput(value))\n\n    return {\n      query: {\n        todoInput: todoInput,\n      },\n      command: {\n        setTodoInput,\n        clearTodoInput,\n      },\n      event: {\n        TodoInputChangedEvent\n      },\n    }\n  },\n})\n","export const uuid = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8\n    return v.toString(16)\n  })\n","import { Remesh } from 'remesh'\nimport { ListModule } from 'remesh/modules/list'\n\nimport { uuid } from '../utils/uuid'\nimport { syncStorage } from '../domain-modules/sync-storage'\n\nexport const TODO_LIST_STORAGE_KEY = 'remesh-example/todo-list'\n\nexport type Todo = {\n  id: string\n  title: string\n  completed: boolean\n}\n\nexport type Todos = Todo[]\n\nexport const getTodoId = (todo: Todo) => todo.id\n\nexport const TodoListDomain = Remesh.domain({\n  name: 'TodoList',\n  impl: (domain) => {\n    const todoListModule = ListModule<Todo>(domain, {\n      name: 'TodoList',\n      key: getTodoId,\n    })\n\n    const todoListQuery = todoListModule.query.itemList\n\n    const todoQuery = todoListModule.query.item\n\n    const todoKeyListQuery = todoListModule.query.keyList\n\n    const TodoListChangedEvent = domain.event<Todos>({\n      name: 'TodoListChangedEvent',\n    })\n\n    const setTodoList = domain.command({\n      name: 'setTodoList',\n      impl: (_, todos: Todos) => {\n        return [todoListModule.command.setList(todos), TodoListChangedEvent(todos)]\n      },\n    })\n\n    const FailedToAddTodoEvent = domain.event<{ reason: string }>({\n      name: 'FailedToAddTodoEvent',\n    })\n\n    const TodoItemAddedEvent = domain.event<Todo>({\n      name: 'TodoItemAddedEvent',\n    })\n\n    const addTodo = domain.command({\n      name: 'TodoList.addTodo',\n      impl: (_, title: string) => {\n        if (title === '') {\n          return FailedToAddTodoEvent({\n            reason: 'Title cannot be empty',\n          })\n        }\n\n        const todo: Todo = {\n          id: uuid(),\n          title: title,\n          completed: false,\n        }\n\n        return [todoListModule.command.addItem(todo), TodoItemAddedEvent(todo)]\n      },\n    })\n\n    const updateTodo = domain.command({\n      name: 'TodoList.updateTodo',\n      impl: (_, todo: Todo) => {\n        if (todo.title === '') {\n          return deleteTodo(todo.id)\n        }\n        return todoListModule.command.updateItem(todo)\n      },\n    })\n\n    const deleteTodo = todoListModule.command.deleteItem\n\n    const activeTodoList = domain.query({\n      name: 'ActiveTodoListQuery',\n      impl: ({ get }) => {\n        const todos = get(todoListQuery())\n        return todos.filter((todo) => !todo.completed)\n      },\n    })\n\n    const completedTodoList = domain.query({\n      name: 'CompletedTodoListQuery',\n      impl: ({ get }) => {\n        const todos = get(todoListQuery())\n        return todos.filter((todo) => todo.completed)\n      },\n    })\n\n    const activeTodoCount = domain.query({\n      name: 'ActiveTodoCountQuery',\n      impl: ({ get }) => {\n        const todos = get(activeTodoList())\n        return todos.length\n      },\n    })\n\n    const completedTodoCountQuery = domain.query({\n      name: 'CompletedTodoCountQuery',\n      impl: ({ get }) => {\n        const todos = get(completedTodoList())\n        return todos.length\n      },\n    })\n\n    const isAllCompleted = domain.query({\n      name: 'IsAllCompletedQuery',\n      impl: ({ get }) => {\n        const todos = get(todoListQuery())\n\n        if (todos.length === 0) {\n          return false\n        }\n\n        const completedTodoCount = get(completedTodoCountQuery())\n\n        return completedTodoCount === todos.length\n      },\n    })\n\n    const toggleTodo = domain.command({\n      name: 'toggleTodo',\n      impl: ({ get }, id: Todo['id']) => {\n        const todo = get(todoQuery(id))\n        const newTodo: Todo = {\n          ...todo,\n          completed: !todo.completed,\n        }\n\n        return todoListModule.command.updateItem(newTodo)\n      },\n    })\n\n    const toggleAllTodos = domain.command({\n      name: 'toggleAllTodos',\n      impl: ({ get }) => {\n        const todoList = get(todoListQuery())\n\n        if (todoList.length === 0) {\n          return null\n        }\n\n        const activeCount = get(activeTodoCount())\n        const completed = activeCount > 0\n        const newTodoList = todoList.map((todo) => ({\n          ...todo,\n          completed,\n        }))\n\n        return setTodoList(newTodoList)\n      },\n    })\n\n    const clearAllCompletedTodos = domain.command({\n      name: 'clearAllCompletedTodos',\n      impl: ({ get }) => {\n        const todoList = get(todoListQuery())\n\n        if (todoList.length === 0) {\n          return null\n        }\n\n        const newTodoList = todoList.filter((todo) => !todo.completed)\n\n        return setTodoList(newTodoList)\n      },\n    })\n\n    syncStorage(domain, TODO_LIST_STORAGE_KEY)\n      .listenTo(TodoListChangedEvent)\n      .readData((todos) => setTodoList(todos))\n\n    return {\n      query: {\n        todoState: todoQuery,\n        todoKeyList: todoKeyListQuery,\n        todoList: todoListQuery,\n        activeTodoList: activeTodoList,\n        completedTodoList: completedTodoList,\n        activeTodoCount: activeTodoCount,\n        completedTodoCount: completedTodoCountQuery,\n        isAllCompleted: isAllCompleted,\n      },\n      command: {\n        setTodoList,\n        addTodo,\n        updateTodo,\n        deleteTodo,\n        toggleTodo,\n        toggleAllTodos,\n        clearAllCompletedTodos,\n      },\n      event: {\n        FailedToAddTodoEvent,\n        TodoListChangedEvent,\n        TodoItemAddedEvent\n      },\n    }\n  },\n})\n","import React from 'react'\n\nexport function useKeyPressHandler(\n  keys: string | string[],\n  callback: (event: React.KeyboardEvent<HTMLInputElement>, key: string) => void,\n) {\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const keyList = Array.isArray(keys) ? keys : [keys]\n    for (const key of keyList) {\n      if (event.key.toLowerCase() === key.toLowerCase()) {\n        event.preventDefault()\n        callback(event, key)\n      }\n    }\n  }\n\n  return handleKeyPress\n}\n","import React from 'react'\n\nimport { useRemeshDomain, useRemeshEvent, useRemeshQuery } from 'remesh-react'\n\nimport { TodoInputDomain } from 'remesh-domains-for-demos/dist/todo-mvc-with-multiple-domains/domains/TodoInput'\nimport { TodoListDomain } from 'remesh-domains-for-demos/dist/todo-mvc-with-multiple-domains/domains/TodoList'\n\nimport { useKeyPressHandler } from '../hooks/useKeyPressHandler'\n\nexport const TodoHeader = () => {\n  const todoInputDomain = useRemeshDomain(TodoInputDomain())\n  const todoListDomain = useRemeshDomain(TodoListDomain())\n\n  const todoInput = useRemeshQuery(todoInputDomain.query.todoInput())\n\n  const handleTodoInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    todoInputDomain.command.setTodoInput(event.target.value)\n  }\n\n  const handlePressEnter = useKeyPressHandler('Enter', () => {\n    todoListDomain.command.addTodo(todoInput)\n  })\n\n  useRemeshEvent(todoListDomain.event.FailedToAddTodoEvent, (event) => {\n    alert(event.reason)\n  })\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n      <input\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={todoInput}\n        onChange={handleTodoInputChange}\n        onKeyDown={handlePressEnter}\n      />\n    </header>\n  )\n}\n","import { RemeshDomainContext } from '../index'\r\n\r\nexport type SwitchModuleOptions<T> = {\r\n  name: string\r\n  default: T\r\n}\r\n\r\nexport const SwitchModule = <T>(domain: RemeshDomainContext, options: SwitchModuleOptions<T>) => {\r\n  const SwitchState = domain.state({\r\n    name: `${options.name}.SwitchState`,\r\n    default: options.default,\r\n  })\r\n\r\n  const switchState = domain.query({\r\n    name: `${options.name}.SwitchStateQuery`,\r\n    impl: ({ get }) => get(SwitchState()),\r\n  })\r\n\r\n  const switchTo = domain.command({\r\n    name: `${options.name}.switchTo`,\r\n    impl: ( _ , current: T) => {\r\n      return SwitchState().new(current)\r\n    },\r\n  })\r\n\r\n  const reset = domain.command({\r\n    name: `${options.name}.reset`,\r\n    impl: ( _ , defaultValue: T) => {\r\n      return SwitchState().new(defaultValue)\r\n    },\r\n  })\r\n\r\n  return {\r\n    query: {\r\n      switchState,\r\n    },\r\n    command: {\r\n      switchTo,\r\n      reset,\r\n    },\r\n  }\r\n}\r\n","import { Remesh } from 'remesh'\nimport { SwitchModule } from 'remesh/modules/switch'\n\nimport { syncStorage } from '../domain-modules/sync-storage'\n\nexport const TODO_FILTER_STORAGE_KEY = 'remesh-example/todo-filter'\n\nexport type TodoFilter = 'all' | 'active' | 'completed'\n\nexport const getValidTodoFilter = (input: string | undefined): TodoFilter => {\n  if (input === undefined) {\n    return 'all'\n  }\n\n  switch (input) {\n    case 'all':\n    case 'active':\n    case 'completed':\n      return input\n    default:\n      return 'all'\n  }\n}\n\nexport const TodoFilterDomain = Remesh.domain({\n  name: 'TodoFilter',\n  impl: (domain) => {\n    const todoFilterModule = SwitchModule<TodoFilter>(domain, {\n      name: 'TodoFilter',\n      default: 'all',\n    })\n\n    const TodoFilterChangedEvent = domain.event<TodoFilter>({\n      name: 'TodoFilterChangedEvent',\n    })\n\n    const todoFilter = todoFilterModule.query.switchState\n\n    const setFilter = domain.command({\n      name: 'TodoFilter.setFilter',\n      impl: (_, input: string) => {\n        const filter = getValidTodoFilter(input)\n        return [todoFilterModule.command.switchTo(filter), TodoFilterChangedEvent(filter)]\n      },\n    })\n\n    syncStorage(domain, TODO_FILTER_STORAGE_KEY)\n      .listenTo(TodoFilterChangedEvent)\n      .readData((value) => setFilter(value))\n\n    return {\n      query: {\n        todoFilter: todoFilter,\n      },\n      command: {\n        setFilter,\n      },\n      event: {\n        TodoFilterChangedEvent,\n      },\n    }\n  },\n})\n","import { Remesh } from 'remesh'\n\nimport { filter, map } from 'rxjs/operators'\n\nimport { TodoInputDomain } from './TodoInput'\nimport { TodoListDomain, getTodoId } from './TodoList'\nimport { TodoFilterDomain } from './TodoFilter'\n\nexport const TodoAppDomain = Remesh.domain({\n  name: 'TodoApp',\n  impl: (domain) => {\n    const todoHeader = domain.getDomain(TodoInputDomain())\n    const todoList = domain.getDomain(TodoListDomain())\n    const todoFooter = domain.getDomain(TodoFilterDomain())\n\n    const FilteredTodoKeyListQuery = domain.query({\n      name: 'FilteredTodoList',\n      impl: ({ get }) => {\n        const filter = get(todoFooter.query.todoFilter())\n\n        if (filter === 'all') {\n          return get(todoList.query.todoList()).map(getTodoId)\n        }\n\n        if (filter === 'active') {\n          return get(todoList.query.activeTodoList()).map(getTodoId)\n        }\n\n        if (filter === 'completed') {\n          return get(todoList.query.completedTodoList()).map(getTodoId)\n        }\n\n        throw new Error(`Unknown filter: ${filter}`)\n      },\n    })\n\n    const clearTodoInputWhenSubmit = domain.command$({\n      name: 'clearTodoInputWhenSubmit',\n      impl: ({ fromEvent, get }) => {\n        return fromEvent(todoList.event.TodoItemAddedEvent).pipe(\n          filter((todo) => {\n            const todoInput = get(todoHeader.query.todoInput())\n            return todoInput === todo.title\n          }),\n          map(() => todoHeader.command.clearTodoInput()),\n        )\n      },\n    })\n\n    domain.ignite(() => clearTodoInputWhenSubmit())\n\n    return {\n      query: {\n        FilteredTodoKeyListQuery,\n      },\n      command: {},\n      event: {},\n    }\n  },\n})\n","import React, { useCallback, useState } from 'react'\n\nexport function useInputHandler(defaultValue: string) {\n  const [value, setValue] = useState(defaultValue)\n\n  const onChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value)\n  }, [])\n\n  return [value, onChange, setValue] as const\n}\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useRemeshDomain, useRemeshQuery } from 'remesh-react'\n\nimport { TodoListDomain, Todo } from 'remesh-domains-for-demos/dist/todo-mvc-with-multiple-domains/domains/TodoList'\n\nimport { useKeyPressHandler } from '../hooks/useKeyPressHandler'\nimport { useInputHandler } from '../hooks/useInputHandler'\n\nexport type TodoItemProps = {\n  id: Todo['id']\n}\n\nexport function TodoItem(props: TodoItemProps) {\n  const todoListDomain = useRemeshDomain(TodoListDomain())\n\n  const todo = useRemeshQuery(todoListDomain.query.todoState(props.id))\n\n  const [editing, setEditing] = useState(false)\n\n  const [title, handleTitleChange] = useInputHandler(todo.title)\n\n  const save = () => {\n    todoListDomain.command.updateTodo({ ...todo, title })\n    setEditing(false)\n  }\n\n  const handlePress = useKeyPressHandler(['Enter', 'Escape'], () => {\n    save()\n  })\n\n  const handleEnableEdit = () => {\n    setEditing(true)\n  }\n\n  const handleSave = () => {\n    todoListDomain.command.toggleTodo(todo.id)\n  }\n\n  const handleDelete = () => {\n    todoListDomain.command.deleteTodo(todo.id)\n  }\n\n  const handleBlur = () => {\n    save()\n  }\n\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  useEffect(() => {\n    if (editing) {\n      inputRef.current?.focus()\n    }\n  }, [editing])\n\n  return (\n    <li className={`${editing && 'editing'} ${todo.completed && 'completed'}`}>\n      <div className=\"view\">\n        <input type=\"checkbox\" className=\"toggle\" checked={todo.completed} onChange={handleSave} />\n        <label onDoubleClick={handleEnableEdit}>{todo.title}</label>\n        <button className=\"destroy\" onClick={handleDelete} />\n      </div>\n      {editing && (\n        <input\n          ref={inputRef}\n          className=\"edit\"\n          value={title}\n          onChange={handleTitleChange}\n          onKeyDown={handlePress}\n          onBlur={handleBlur}\n        />\n      )}\n    </li>\n  )\n}\n","import React from 'react'\n\nimport { useRemeshDomain, useRemeshQuery } from 'remesh-react'\n\nimport { TodoAppDomain } from 'remesh-domains-for-demos/dist/todo-mvc-with-multiple-domains/domains/TodoApp'\nimport { TodoListDomain } from 'remesh-domains-for-demos/dist/todo-mvc-with-multiple-domains/domains/TodoList'\n\nimport { TodoItem } from './TodoItem'\n\nexport const TodoList = () => {\n  const todoAppDomain = useRemeshDomain(TodoAppDomain())\n  const filteredTodoKeyList = useRemeshQuery(todoAppDomain.query.FilteredTodoKeyListQuery())\n\n  console.log('render list')\n\n  return (\n    <section className=\"main\">\n      <ToggleAllInput />\n      <ul className=\"todo-list\">\n        {filteredTodoKeyList.map((todoId) => (\n          <TodoItem key={todoId} id={todoId} />\n        ))}\n      </ul>\n    </section>\n  )\n}\n\nconst ToggleAllInput = () => {\n  const todoListDomain = useRemeshDomain(TodoListDomain())\n  const isAllCompleted = useRemeshQuery(todoListDomain.query.isAllCompleted())\n\n  const handleToggleAll = () => {\n    todoListDomain.command.toggleAllTodos()\n  }\n  return (\n    <>\n      <input\n        id=\"toggle-all\"\n        type=\"checkbox\"\n        className=\"toggle-all\"\n        checked={isAllCompleted}\n        onChange={handleToggleAll}\n      />\n      <label htmlFor=\"toggle-all\" />\n    </>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { NavLink, useParams } from 'react-router-dom'\n\nimport { useRemeshDomain, useRemeshQuery } from 'remesh-react'\n\nimport { TodoListDomain } from 'remesh-domains-for-demos/dist/todo-mvc-with-multiple-domains/domains/TodoList'\nimport { TodoFilterDomain } from 'remesh-domains-for-demos/dist/todo-mvc-with-multiple-domains/domains/TodoFilter'\n\nexport const TodoFooter = () => {\n  const todoListDomain = useRemeshDomain(TodoListDomain())\n  const todoFilterDomain = useRemeshDomain(TodoFilterDomain())\n\n  const todoFilter = useRemeshQuery(todoFilterDomain.query.todoFilter())\n  const activeTodoCount = useRemeshQuery(todoListDomain.query.activeTodoCount())\n  const completedTodoCount = useRemeshQuery(todoListDomain.query.completedTodoCount())\n\n  const hasCompleted = completedTodoCount > 0\n\n  const handleClearCompleted = () => {\n    todoListDomain.command.clearAllCompletedTodos()\n  }\n\n  const getClassName = (navData: { isActive: boolean }) => {\n    return navData.isActive ? 'selected' : ''\n  }\n\n  const params = useParams<{ filter: string }>()\n\n  useEffect(() => {\n    const filter = params.filter ?? 'all'\n    if (filter !== todoFilter) {\n      todoFilterDomain.command.setFilter(filter)\n    }\n  }, [params, todoFilter])\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        <strong>{activeTodoCount}</strong> item{activeTodoCount !== 1 && 's'} left\n      </span>\n      <ul className=\"filters\">\n        <li>\n          <NavLink to=\"/\" className={getClassName}>\n            All\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/active\" className={getClassName}>\n            Active\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/completed\" className={getClassName}>\n            Completed\n          </NavLink>\n        </li>\n      </ul>\n      {hasCompleted && (\n        <button className=\"clear-completed\" onClick={handleClearCompleted}>\n          Clear completed\n        </button>\n      )}\n    </footer>\n  )\n}\n","import React from 'react'\n\nimport { TodoHeader } from './TodoHeader'\nimport { TodoList } from './TodoList'\nimport { TodoFooter } from './TodoFooter'\n\nexport const TodoApp = () => {\n  return (\n    <div className=\"todoapp\">\n      <TodoHeader />\n      <TodoList />\n      <TodoFooter />\n    </div>\n  )\n}\n","import React, { StrictMode } from 'react'\nimport * as ReactDOMClient from 'react-dom/client'\n\nimport { HashRouter, Routes, Route } from 'react-router-dom'\n\nimport { Remesh } from 'remesh'\nimport { RemeshRoot } from 'remesh-react'\nimport { RemeshReduxDevtools } from 'remesh-redux-devtools'\nimport { RemeshLogger } from 'remesh-logger'\n\nimport { StorageImpl } from './domain-externs-impl/storage'\nimport { TodoApp } from './components/TodoApp'\n\nconst container = document.getElementById('root')\n\nif (container) {\n  const root = ReactDOMClient.createRoot(container)\n  const store = Remesh.store({\n    externs: [StorageImpl],\n    inspectors: [RemeshReduxDevtools(), RemeshLogger()],\n  })\n\n  root.render(\n    <StrictMode>\n      <RemeshRoot store={store}>\n        <HashRouter basename=\"/\">\n          <Routes>\n            <Route path=\"/\" element={<TodoApp />} />\n            <Route path=\"/:filter\" element={<TodoApp />} />\n          </Routes>\n        </HashRouter>\n      </RemeshRoot>\n    </StrictMode>,\n  )\n}\n"],"names":["TodoHeader","todoInputDomain","useRemeshDomain","TodoInputDomain","todoListDomain","TodoListDomain","todoInput","useRemeshQuery","query","handleTodoInputChange","event","command","setTodoInput","target","value","handlePressEnter","useKeyPressHandler","addTodo","FailedToAddTodoEvent","alert","reason","_jsx","useState","useCallback","props","todo","todoState","id","editing","setEditing","title","handleTitleChange","useInputHandler","save","updateTodo","handlePress","handleEnableEdit","handleSave","toggleTodo","handleDelete","deleteTodo","handleBlur","inputRef","useRef","useEffect","current","focus","completed","_jsxs","TodoList","todoAppDomain","TodoAppDomain","filteredTodoKeyList","FilteredTodoKeyListQuery","console","log","map","todoId","ToggleAllInput","isAllCompleted","_Fragment","toggleAllTodos","handleToggleAll","TodoFooter","todoFilterDomain","TodoFilterDomain","todoFilter","activeTodoCount","hasCompleted","completedTodoCount","handleClearCompleted","clearAllCompletedTodos","getClassName","navData","isActive","params","useParams","filter","setFilter","TodoApp","container","document","getElementById","root","ReactDOMClient","store","Remesh","externs","StorageImpl","inspectors","RemeshReduxDevtools","RemeshLogger","render","StrictMode"],"mappings":"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"}