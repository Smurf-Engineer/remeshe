{"version":3,"file":"remesh-logger.8ba02b08.js","sources":["../../../packages/remesh-debugger-helper/src/remesh-debugger-helper.ts","../../../packages/remesh-redux-devtools/src/remesh-redux-devtools.ts","../../../packages/remesh-logger/src/remesh-logger.ts"],"sourcesContent":["export const formatTime = (time: Date) => {\r\n  const hours = time.getHours().toString().padStart(2, '0')\r\n  const minutes = time.getMinutes().toString().padStart(2, '0')\r\n  const seconds = time.getSeconds().toString().padStart(2, '0')\r\n  const milliseconds = time.getMilliseconds().toString().padStart(3, '0')\r\n\r\n  return `${hours}:${minutes}:${seconds}.${milliseconds}`\r\n}\r\n\r\nexport const formatNow = () => {\r\n  const time = new Date()\r\n\r\n  return formatTime(time)\r\n}\r\n\r\nexport type RemeshDebugSource = 'state' | 'query' | 'domain' | 'event' | 'command' | 'entity'\r\n\r\nexport type RemeshDebugOptions = {\r\n  include?: RemeshDebugSource[]\r\n  exclude?: RemeshDebugSource[]\r\n}\r\n\r\nexport const RemeshDebuggerHelper = (options?: RemeshDebugOptions) => {\r\n  const config = {\r\n    include: ['state', 'domain', 'query', 'event', 'command', 'entity'],\r\n    ...options,\r\n  }\r\n\r\n  const onActive = (source: RemeshDebugSource, fn: () => unknown) => {\r\n    if (config.exclude?.includes(source)) {\r\n      return\r\n    }\r\n\r\n    if (config.include) {\r\n      if (config.include.includes(source)) {\r\n        fn()\r\n      }\r\n    } else {\r\n      fn()\r\n    }\r\n  }\r\n\r\n  return {\r\n    onActive,\r\n  }\r\n}\r\n","import {\r\n  Args,\r\n  Remesh,\r\n  RemeshDomainDefinition,\r\n  RemeshDomainAction,\r\n  RemeshInspectorDomain,\r\n  RemeshStoreOptions,\r\n  Serializable,\r\n} from 'remesh'\r\nimport { RemeshDebuggerHelper, RemeshDebugOptions } from 'remesh-debugger-helper'\r\n\r\nimport type { Config as _Config } from '@redux-devtools/extension'\r\nimport type { Action } from 'redux'\r\n\r\nconst getReduxDevtools = () => {\r\n  if (typeof window !== 'undefined') {\r\n    return window.__REDUX_DEVTOOLS_EXTENSION__\r\n  }\r\n}\r\n\r\nexport type RemeshReduxDevtoolsOptions = RemeshDebugOptions\r\n\r\nexport const RemeshReduxDevtools = (options?: RemeshReduxDevtoolsOptions) => {\r\n  const reduxDevtools = getReduxDevtools()\r\n\r\n  if (!reduxDevtools) {\r\n    return\r\n  }\r\n\r\n  return (storeOptions?: RemeshStoreOptions) => {\r\n    const helper = RemeshDebuggerHelper(options)\r\n\r\n    const devtools = reduxDevtools.connect({\r\n      name: storeOptions?.name,\r\n      features: {\r\n        pause: false, // start/pause recording of dispatched actions\r\n        lock: false, // lock/unlock dispatching actions and side effects\r\n        persist: false, // persist states on page reloading\r\n        export: false, // export history of actions in a file\r\n        import: false, // import history of actions from a file\r\n        jump: false, // jump back and forth (time traveling)\r\n        skip: false, // skip (cancel) actions\r\n        reorder: false, // drag and drop actions in the history list\r\n        dispatch: false, // dispatch custom actions or action creators\r\n        test: false, // generate tests for the selected actions\r\n      },\r\n    })\r\n\r\n    const send = (_type: string, action: Action<unknown>) => {\r\n      devtools.send(action, null)\r\n    }\r\n\r\n    const store = Remesh.store({\r\n      name: `RemeshReduxDevtools(${storeOptions?.name ?? ''})`,\r\n    })\r\n\r\n    const inspectorDomain = store.getDomain(RemeshInspectorDomain())\r\n\r\n    const getOwnerInfo = <T extends RemeshDomainDefinition, U extends Args<Serializable>>(\r\n      owner: RemeshDomainAction<T, U>,\r\n    ) => {\r\n      const ownerInfo = {\r\n        domainId: owner.Domain.domainId,\r\n        domainName: owner.Domain.domainName,\r\n      }\r\n\r\n      if (owner.arg !== undefined) {\r\n        return {\r\n          ...ownerInfo,\r\n          domainArg: owner.arg,\r\n        }\r\n      }\r\n\r\n      return ownerInfo\r\n    }\r\n\r\n    helper.onActive('domain', () => {\r\n      store.subscribeEvent(inspectorDomain.event.RemeshDomainStorageEvent, (event) => {\r\n        const Domain = event.storage.Domain\r\n        const info = {\r\n          type: `${event.type}::${Domain.domainName}`,\r\n          domainId: Domain.domainId,\r\n          domainName: Domain.domainName,\r\n        }\r\n\r\n        if (event.storage.arg !== undefined) {\r\n          send(info.type, {\r\n            ...info,\r\n            domainArg: event.storage.arg,\r\n          })\r\n        } else {\r\n          send(info.type, info)\r\n        }\r\n      })\r\n    })\r\n\r\n    helper.onActive('state', () => {\r\n      store.subscribeEvent(inspectorDomain.event.RemeshStateStorageEvent, (event) => {\r\n        const State = event.storage.State\r\n        const info = {\r\n          type: `${event.type}::${State.stateName}`,\r\n          owner: getOwnerInfo(State.owner),\r\n          stateId: State.stateId,\r\n          stateName: State.stateName,\r\n          stateValue: event.storage.currentState,\r\n        }\r\n\r\n        if (event.storage.key !== undefined) {\r\n          send(info.type, {\r\n            ...info,\r\n            stateArg: event.storage.key,\r\n          })\r\n        } else {\r\n          send(info.type, info)\r\n        }\r\n      })\r\n    })\r\n\r\n    helper.onActive('entity', () => {\r\n      store.subscribeEvent(inspectorDomain.event.RemeshEntityStorageEvent, (event) => {\r\n        const Entity = event.storage.Entity\r\n        const info = {\r\n          type: `${event.type}::${Entity.entityName}`,\r\n          owner: getOwnerInfo(Entity.owner),\r\n          entityId: Entity.entityId,\r\n          entityName: Entity.entityName,\r\n          entityValue: event.storage.currentEntity,\r\n          entityKey: event.storage.key,\r\n        }\r\n\r\n        send(info.type, info)\r\n      })\r\n    })\r\n\r\n    helper.onActive('query', () => {\r\n      store.subscribeEvent(inspectorDomain.event.RemeshQueryStorageEvent, (event) => {\r\n        const Query = event.storage.Query\r\n        const info = {\r\n          type: `${event.type}::${Query.queryName}`,\r\n          owner: getOwnerInfo(Query.owner),\r\n          queryId: Query.queryId,\r\n          queryName: Query.queryName,\r\n        }\r\n\r\n        if (event.storage.arg !== undefined) {\r\n          send(info.type, {\r\n            ...info,\r\n            queryArg: event.storage.arg,\r\n          })\r\n        } else {\r\n          send(info.type, info)\r\n        }\r\n      })\r\n    })\r\n\r\n    helper.onActive('command', () => {\r\n      store.subscribeEvent(inspectorDomain.event.RemeshCommandReceivedEvent, (event) => {\r\n        const Command = event.action.Command\r\n        const info = {\r\n          type: `${event.type}::${Command.commandName}`,\r\n          owner: getOwnerInfo(Command.owner),\r\n          commandId: Command.commandId,\r\n          commandName: Command.commandName,\r\n        }\r\n\r\n        if (event.action.arg !== undefined) {\r\n          send(info.type, {\r\n            ...info,\r\n            commandArg: event.action.arg,\r\n          })\r\n        } else {\r\n          send(info.type, info)\r\n        }\r\n      })\r\n    })\r\n\r\n    helper.onActive('event', () => {\r\n      store.subscribeEvent(inspectorDomain.event.RemeshEventEmittedEvent, (event) => {\r\n        const Event = event.action.Event\r\n\r\n        const info = {\r\n          type: `${event.type}::${Event.eventName}`,\r\n          owner: getOwnerInfo(Event.owner),\r\n          eventId: Event.eventId,\r\n          eventName: Event.eventName,\r\n        }\r\n\r\n        if (event.action.arg !== undefined) {\r\n          send(info.type, {\r\n            ...info,\r\n            eventArg: event.action.arg,\r\n          })\r\n        } else {\r\n          send(info.type, info)\r\n        }\r\n      })\r\n    })\r\n\r\n    return store\r\n  }\r\n}\r\n","import {\r\n  Args,\r\n  Remesh,\r\n  RemeshDomainDefinition,\r\n  RemeshDomainAction,\r\n  RemeshInspectorDomain,\r\n  RemeshStoreInspector,\r\n  Serializable,\r\n} from 'remesh'\r\n\r\nimport { RemeshDebugOptions, RemeshDebuggerHelper, formatNow } from 'remesh-debugger-helper'\r\n\r\nexport type RemeshLoggerOptions = RemeshDebugOptions & {\r\n  collapsed?: boolean\r\n  colors?: typeof colors\r\n}\r\n\r\nconst colors = {\r\n  domain: '#bfb1cc',\r\n  event: '#aec6d4',\r\n  state: '#adc7af',\r\n  entity: '#d9bdc5',\r\n  query: '#d6c9ad',\r\n  command: '#debdb6',\r\n}\r\n\r\nexport const RemeshLogger = (options?: RemeshLoggerOptions): RemeshStoreInspector => {\r\n  return (storeOptions) => {\r\n    const config = {\r\n      collapsed: true,\r\n      colors,\r\n      ...options,\r\n    }\r\n\r\n    const helper = RemeshDebuggerHelper(config)\r\n\r\n    const log = (type: string, info: object, color: string) => {\r\n      if (config.collapsed) {\r\n        console.groupCollapsed(\r\n          `%c${type}%c @ ${formatNow()}`,\r\n          `background-color:${color}; color: #000; font-weight: bold`,\r\n          `color:#9E9E9E; font-weight: lighter`,\r\n        )\r\n      }\r\n\r\n      console.log(info)\r\n\r\n      if (config.collapsed) {\r\n        console.groupEnd()\r\n      }\r\n    }\r\n\r\n    const store = Remesh.store({\r\n      ...storeOptions,\r\n      name: `RemeshLogger(${storeOptions?.name ?? ''})`,\r\n    })\r\n\r\n    const inspectorDomain = store.getDomain(RemeshInspectorDomain())\r\n\r\n    const getOwnerInfo = <T extends RemeshDomainDefinition, U extends Args<Serializable>>(\r\n      owner: RemeshDomainAction<T, U>,\r\n    ) => {\r\n      const ownerInfo = {\r\n        domainId: owner.Domain.domainId,\r\n        domainName: owner.Domain.domainName,\r\n      }\r\n\r\n      if (owner.arg !== undefined) {\r\n        return {\r\n          ...ownerInfo,\r\n          domainArg: owner.arg,\r\n        }\r\n      }\r\n\r\n      return ownerInfo\r\n    }\r\n\r\n    helper.onActive('domain', () => {\r\n      store.subscribeEvent(inspectorDomain.event.RemeshDomainStorageEvent, (event) => {\r\n        const Domain = event.storage.Domain\r\n        const info = {\r\n          type: `${event.type}::${Domain.domainName}`,\r\n          domainId: Domain.domainId,\r\n          domainName: Domain.domainName,\r\n        }\r\n\r\n        if (event.storage.arg !== undefined) {\r\n          log(\r\n            info.type,\r\n            {\r\n              ...info,\r\n              domainArg: event.storage.arg,\r\n            },\r\n            config.colors.domain,\r\n          )\r\n        } else {\r\n          log(info.type, info, config.colors.domain)\r\n        }\r\n      })\r\n    })\r\n\r\n    helper.onActive('state', () => {\r\n      store.subscribeEvent(inspectorDomain.event.RemeshStateStorageEvent, (event) => {\r\n        const State = event.storage.State\r\n        const info = {\r\n          type: `${event.type}::${State.stateName}`,\r\n          owner: getOwnerInfo(State.owner),\r\n          stateId: State.stateId,\r\n          stateName: State.stateName,\r\n          stateValue: event.storage.currentState,\r\n        }\r\n\r\n        if (event.storage.key !== undefined) {\r\n          log(\r\n            info.type,\r\n            {\r\n              ...info,\r\n              stateKey: event.storage.key,\r\n            },\r\n            config.colors.state,\r\n          )\r\n        } else {\r\n          log(info.type, info, config.colors.state)\r\n        }\r\n      })\r\n    })\r\n\r\n    helper.onActive('entity', () => {\r\n      store.subscribeEvent(inspectorDomain.event.RemeshEntityStorageEvent, (event) => {\r\n        const Entity = event.storage.Entity\r\n        const info = {\r\n          type: `${event.type}::${Entity.entityName}`,\r\n          owner: getOwnerInfo(Entity.owner),\r\n          entityId: Entity.entityId,\r\n          entityName: Entity.entityName,\r\n          entityValue: event.storage.currentEntity,\r\n          entityKey: event.storage.key,\r\n        }\r\n\r\n        log(info.type, info, config.colors.entity)\r\n      })\r\n    })\r\n\r\n    helper.onActive('query', () => {\r\n      store.subscribeEvent(inspectorDomain.event.RemeshQueryStorageEvent, (event) => {\r\n        const Query = event.storage.Query\r\n        const info = {\r\n          type: `${event.type}::${Query.queryName}`,\r\n          owner: getOwnerInfo(Query.owner),\r\n          queryId: Query.queryId,\r\n          queryName: Query.queryName,\r\n          queryValue: event.storage.currentValue,\r\n        }\r\n\r\n        if (event.storage.arg !== undefined) {\r\n          log(\r\n            info.type,\r\n            {\r\n              ...info,\r\n              queryArg: event.storage.arg,\r\n            },\r\n            config.colors.query,\r\n          )\r\n        } else {\r\n          log(info.type, info, config.colors.query)\r\n        }\r\n      })\r\n    })\r\n\r\n    helper.onActive('command', () => {\r\n      store.subscribeEvent(inspectorDomain.event.RemeshCommandReceivedEvent, (event) => {\r\n        const Command = event.action.Command\r\n        const info = {\r\n          type: `${event.type}::${Command.commandName}`,\r\n          owner: getOwnerInfo(Command.owner),\r\n          commandId: Command.commandId,\r\n          commandName: Command.commandName,\r\n        }\r\n\r\n        if (event.action.arg !== undefined) {\r\n          log(\r\n            info.type,\r\n            {\r\n              ...info,\r\n              commandArg: event.action.arg,\r\n            },\r\n            config.colors.command,\r\n          )\r\n        } else {\r\n          log(info.type, info, config.colors.command)\r\n        }\r\n      })\r\n    })\r\n\r\n    helper.onActive('event', () => {\r\n      store.subscribeEvent(inspectorDomain.event.RemeshEventEmittedEvent, (event) => {\r\n        const Event = event.action.Event\r\n\r\n        const info = {\r\n          type: `${event.type}::${Event.eventName}`,\r\n          owner: getOwnerInfo(Event.owner),\r\n          eventId: Event.eventId,\r\n          eventName: Event.eventName,\r\n        }\r\n\r\n        if (event.action.arg !== undefined) {\r\n          log(\r\n            info.type,\r\n            {\r\n              ...info,\r\n              eventArg: event.action.arg,\r\n            },\r\n            config.colors.event,\r\n          )\r\n        } else {\r\n          log(info.type, info, config.colors.event)\r\n        }\r\n      })\r\n    })\r\n\r\n    return store\r\n  }\r\n}\r\n"],"names":["formatTime","time","hours","minutes","seconds","milliseconds","formatNow","RemeshDebuggerHelper","options","config","source","fn","_a","getReduxDevtools","RemeshReduxDevtools","reduxDevtools","storeOptions","helper","devtools","send","_type","action","store","Remesh","inspectorDomain","RemeshInspectorDomain","getOwnerInfo","owner","ownerInfo","event","Domain","info","State","Entity","Query","Command","Event","colors","RemeshLogger","log","type","color"],"mappings":"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"}