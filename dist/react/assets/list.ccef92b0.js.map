{"version":3,"file":"list.ccef92b0.js","sources":["../../../packages/remesh/src/modules/list.ts"],"sourcesContent":["import { RemeshDomainContext, RemeshEventPayload } from '../index'\n\nexport type ListModuleOptions<T> = {\n  name: string\n  key: (item: T) => string\n  default?: T[]\n}\n\nexport const ListModule = <T>(domain: RemeshDomainContext, options: ListModuleOptions<T>) => {\n  const KeyListState = domain.state<string[]>({\n    name: `${options.name}.KeyListState`,\n    default: [],\n  })\n\n  const ItemState = domain.state<string, T>({\n    name: `${options.name}.ItemState`,\n  })\n\n  const itemList = domain.query({\n    name: `${options.name}.itemList`,\n    impl: ({ get }) => {\n      return get(KeyListState()).map((key) => get(ItemState(key)))\n    },\n  })\n\n  const setList = domain.command({\n    name: `${options.name}.setList`,\n    impl: ({}, newList: T[]) => {\n      const keyList = newList.map(options.key)\n\n      return [newList.map((item, index) => ItemState(keyList[index]).new(item)), KeyListState().new(keyList)]\n    },\n  })\n\n  const addItem = domain.command({\n    name: `${options.name}.addItem`,\n    impl: ({ get }, newItem: T) => {\n      const keyList = get(KeyListState())\n      const list = get(itemList())\n      const newKey = options.key(newItem)\n\n      if (keyList.includes(newKey)) {\n        return null\n      }\n\n      return setList(list.concat(newItem))\n    },\n  })\n\n  const addItems = domain.command({\n    name: `${options.name}.addItems`,\n    impl: ({ get }, newItems: T[]) => {\n      const keyList = get(KeyListState())\n      const list = get(itemList())\n\n      const newList = [] as T[]\n\n      for (const newItem of newItems) {\n        const newItemKey = options.key(newItem)\n\n        if (keyList.includes(newItemKey)) {\n          continue\n        }\n\n        newList.push(newItem)\n      }\n\n      if (newList.length === 0) {\n        return null\n      }\n\n      return setList(list.concat(newList))\n    },\n  })\n\n  const deleteItem = domain.command({\n    name: `${options.name}.deleteItem`,\n    impl: ({ get }, targetKey: string) => {\n      const list = get(itemList())\n      const newList = list.filter((item) => options.key(item) !== targetKey)\n\n      return setList(newList)\n    },\n  })\n\n  const deleteItems = domain.command({\n    name: `${options.name}.deleteItems`,\n    impl: ({ get }, targetKeys: string[]) => {\n      const list = get(itemList())\n      const newList = list.filter((item) => !targetKeys.includes(options.key(item)))\n\n      return setList(newList)\n    },\n  })\n\n  const deleteAll = domain.command({\n    name: `${options.name}.deleteAll`,\n    impl: ({}) => {\n      return setList([])\n    },\n  })\n\n  const updateItem = domain.command({\n    name: `${options.name}.updateItem`,\n    impl: ({ get }, newItem: T) => {\n      const key = options.key(newItem)\n      const keyList = get(KeyListState())\n\n      if (!keyList.includes(key)) {\n        return null\n      }\n\n      const list = get(itemList())\n      const newList = list.map((item) => {\n        if (options.key(item) === key) {\n          return newItem\n        }\n        return item\n      })\n\n      return setList(newList)\n    },\n  })\n\n  const updateItems = domain.command({\n    name: `${options.name}.updateItems`,\n    impl: ({ get }, newItems: T[]) => {\n      const keyList = get(KeyListState())\n      const list = get(itemList())\n\n      const updateItemKeys = newItems.map((item) => options.key(item))\n      const newList = [] as T[]\n\n      for (const [index, key] of keyList.entries()) {\n        const updateItemIndex = updateItemKeys.indexOf(key)\n\n        if (updateItemIndex !== -1) {\n          const newItem = newItems[updateItemIndex]\n          newList.push(newItem)\n        } else {\n          newList.push(list[index])\n        }\n      }\n\n      return setList(newList)\n    },\n  })\n\n  const insertAt = domain.command({\n    name: `${options.name}.insertAt`,\n    impl: ({ get }, { index, item }: { index: number; item: T }) => {\n      const keyList = get(KeyListState())\n\n      if (keyList.includes(options.key(item))) {\n        return null\n      }\n\n      const list = get(itemList())\n      const newList = list.slice(0, index).concat(item).concat(list.slice(index))\n\n      return setList(newList)\n    },\n  })\n\n  const insertBefore = domain.command({\n    name: `${options.name}.insertBefore`,\n    impl: ({ get }, { before, item }: { before: T; item: T }) => {\n      const keyList = get(KeyListState())\n      const itemKey = options.key(item)\n      const beforeKey = options.key(before)\n\n      if (keyList.includes(itemKey)) {\n        return null\n      }\n\n      const list = get(itemList())\n      const newList = [] as T[]\n\n      for (const current of list) {\n        const currentKey = options.key(current)\n\n        if (currentKey === beforeKey) {\n          newList.push(item)\n        }\n\n        newList.push(current)\n      }\n\n      return setList(newList)\n    },\n  })\n\n  const insertAfter = domain.command({\n    name: `${options.name}.insertAfter`,\n    impl: ({ get }, { after, item }: { after: T; item: T }) => {\n      const keyList = get(KeyListState())\n      const itemKey = options.key(item)\n      const afterKey = options.key(after)\n\n      if (keyList.includes(itemKey)) {\n        return null\n      }\n\n      const list = get(itemList())\n      const newList = [] as T[]\n\n      for (const current of list) {\n        const currentKey = options.key(current)\n\n        newList.push(current)\n\n        if (currentKey === afterKey) {\n          newList.push(item)\n        }\n      }\n\n      return setList(newList)\n    },\n  })\n\n  const reset = domain.command({\n    name: `${options.name}.reset`,\n    impl: () => {\n      return setList(options.default ?? [])\n    },\n  })\n\n  /**\n   * sync options.default to item list\n   */\n  domain.ignite(() => {\n    return setList(options.default ?? [])\n  })\n\n  return {\n    command: {\n      setList,\n      addItem,\n      addItems,\n      deleteItem,\n      deleteItems,\n      deleteAll,\n      updateItem,\n      updateItems,\n      insertAt,\n      insertBefore,\n      insertAfter,\n      reset,\n    },\n    query: {\n      keyList: KeyListState.query,\n      item: ItemState.query,\n      itemList,\n    },\n  }\n}\n"],"names":[],"mappings":"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"}