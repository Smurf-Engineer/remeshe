{"version":3,"file":"index.d128e8ec.js","sources":["../../projects/remesh-example/src/todo-mvc/uuid.ts","../../projects/remesh-example/src/todo-mvc/todoRepo.ts","../../projects/remesh-example/src/todo-mvc/todo.ts","../../projects/remesh-example/src/todo-mvc/hooks.ts","../../projects/remesh-example/src/todo-mvc/TodoItem.tsx","../../projects/remesh-example/src/todo-mvc/TodoList.tsx","../../projects/remesh-example/src/todo-mvc/index.tsx"],"sourcesContent":["export const uuid = () =>\r\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n    var r = (Math.random() * 16) | 0,\r\n      v = c == 'x' ? r : (r & 0x3) | 0x8\r\n    return v.toString(16)\r\n  })\r\n","import { Remesh } from 'remesh'\r\nimport localforage from 'localforage'\r\nimport type { Todo } from './todo'\r\n\r\ntype TodoRepo = {\r\n  getTodoList: () => Promise<Todo[]>\r\n  addTodo: (todo: Todo) => void\r\n  removeTodoByIds: (ids: Todo['id'][]) => void\r\n  updateTodo: (updateTodo: Todo) => void\r\n  toggleCompletedByIds: (ids: Todo['id'][], completed: boolean) => void\r\n}\r\n\r\nconst storageKey = 'todo-mvc-data'\r\nconst getTodoList = () => {\r\n  return localforage.getItem<Todo[]>(storageKey).then((value) => value ?? [])\r\n}\r\n\r\nexport const TodoRepoExtern = Remesh.extern<TodoRepo>({\r\n  name: 'TodoRepoExtern',\r\n  default: {\r\n    async getTodoList() {\r\n      return getTodoList()\r\n    },\r\n    async addTodo(todo: Todo) {\r\n      let data = await getTodoList()\r\n      await localforage.setItem(storageKey, data.concat(todo))\r\n    },\r\n    async removeTodoByIds(ids) {\r\n      let data = await getTodoList()\r\n      await localforage.setItem(\r\n        storageKey,\r\n        data.filter((item) => !ids.includes(item.id)),\r\n      )\r\n    },\r\n    async updateTodo(updateTodo) {\r\n      let data = await getTodoList()\r\n      await localforage.setItem(\r\n        storageKey,\r\n        data.map((todo) => (todo.id === updateTodo.id ? { ...todo, ...updateTodo } : todo)),\r\n      )\r\n    },\r\n\r\n    async toggleCompletedByIds(ids, completed) {\r\n      let data = await getTodoList()\r\n      await localforage.setItem(\r\n        storageKey,\r\n        data.map((todo) => (ids.includes(todo.id) ? { ...todo, completed } : todo)),\r\n      )\r\n    },\r\n  },\r\n})\r\n","import { Remesh } from 'remesh'\r\nimport { from, map, merge, tap } from 'rxjs'\r\nimport { uuid } from './uuid'\r\nimport { TodoRepoExtern } from './todoRepo'\r\n\r\nexport type Todo = {\r\n  id: string\r\n  name: string\r\n  completed: boolean\r\n}\r\n\r\nexport const TodoDomain = Remesh.domain({\r\n  name: 'TodoDomain',\r\n  impl: (domain) => {\r\n    const repo = domain.getExtern(TodoRepoExtern)\r\n\r\n    const TodoListState = domain.state<Todo[]>({\r\n      name: 'TodoList',\r\n      default: [],\r\n    })\r\n\r\n    const TodoListQuery = domain.query({\r\n      name: 'TodoListQuery',\r\n      impl({ get }, status?: 'completed' | 'active') {\r\n        const todoList = get(TodoListState())\r\n        if (status === 'active') {\r\n          return todoList.filter((todo) => !todo.completed)\r\n        } else if (status === 'completed') {\r\n          return todoList.filter((todo) => todo.completed)\r\n        } else {\r\n          return todoList\r\n        }\r\n      },\r\n    })\r\n\r\n    const HasCompletedQuery = domain.query({\r\n      name: 'HasCompletedQuery',\r\n      impl({ get }) {\r\n        return get(TodoListQuery('completed')).length > 0\r\n      },\r\n    })\r\n\r\n    const ActiveTodoCountQuery = domain.query({\r\n      name: 'ActiveTodoCountQuery',\r\n      impl({ get }) {\r\n        return get(TodoListQuery('active')).length\r\n      },\r\n    })\r\n\r\n    const AllCompletedQuery = domain.query({\r\n      name: 'AllCompletedQuery',\r\n      impl({ get }) {\r\n        return get(ActiveTodoCountQuery()) === 0 && get(TodoListQuery()).length > 0\r\n      },\r\n    })\r\n\r\n    const TodoAddedEvent = domain.event<Todo>({\r\n      name: 'addTodoEvent',\r\n    })\r\n\r\n    const setTodoList = domain.command({\r\n      name: 'setTodoList',\r\n      impl(_, todoList: Todo[]) {\r\n        return TodoListState().new(todoList)\r\n      },\r\n    })\r\n\r\n    const AddTodoFailedEvent = domain.event<string>({\r\n      name: 'AddTodoFailedEvent',\r\n    })\r\n\r\n    const addTodo = domain.command({\r\n      name: 'addTodo',\r\n      impl({ get }, todoName: string) {\r\n        if (todoName.trim() === '') {\r\n          return [AddTodoFailedEvent('Cannot be empty, please enter the TODO name')]\r\n        }\r\n\r\n        const todoList = get(TodoListState())\r\n        const newTodo = {\r\n          id: uuid(),\r\n          name: todoName,\r\n          completed: false,\r\n        }\r\n\r\n        return [TodoListState().new([newTodo, ...todoList]), TodoAddedEvent(newTodo)]\r\n      },\r\n    })\r\n\r\n    const removeTodoEvent = domain.event<Todo['id'][]>({\r\n      name: 'removeTodoEvent',\r\n    })\r\n\r\n    const removeTodo = domain.command({\r\n      name: 'removeTodo',\r\n      impl({ get }, id: Todo['id']) {\r\n        const todoList = get(TodoListState())\r\n        const newTodoList = todoList.filter((todo) => todo.id !== id)\r\n\r\n        return [TodoListState().new(newTodoList), removeTodoEvent([id])]\r\n      },\r\n    })\r\n\r\n    const TodoUpdatedEvent = domain.event<Todo>({\r\n      name: 'TodoUpdatedEvent',\r\n    })\r\n\r\n    const updateTodo = domain.command({\r\n      name: 'updateTodo',\r\n      impl({ get }, payload: { id: Todo['id'] } & Partial<Todo>) {\r\n        const todoList = get(TodoListState())\r\n\r\n        if (payload.name && payload.name.trim() === '') {\r\n          return removeTodo(payload.id)\r\n        }\r\n\r\n        const newTodoList = todoList.map((todo) => {\r\n          if (todo.id === payload.id) {\r\n            return {\r\n              ...todo,\r\n              ...payload,\r\n              id: todo.id,\r\n            }\r\n          } else {\r\n            return todo\r\n          }\r\n        })\r\n\r\n        const targetTodo = newTodoList.find((todo) => todo.id === payload.id)\r\n\r\n        if (!targetTodo) {\r\n          return null\r\n        }\r\n\r\n        return [TodoListState().new(newTodoList), TodoUpdatedEvent(targetTodo)]\r\n      },\r\n    })\r\n\r\n    const TodoCompletedChangedEvent = domain.event<{ ids: Todo['id'][]; completed: boolean }>({\r\n      name: 'TodoCompletedChangedEvent',\r\n    })\r\n\r\n    const toggleTodoCompleted = domain.command({\r\n      name: 'toggleTodoCompleted',\r\n      impl({ get }, targetTodoId: Todo['id']) {\r\n        const todoList = get(TodoListState())\r\n\r\n        const newTodoList = todoList.map((todo) => {\r\n          if (todo.id === targetTodoId) {\r\n            return {\r\n              ...todo,\r\n              completed: !todo.completed,\r\n            }\r\n          }\r\n          return todo\r\n        })\r\n\r\n        const targetTodo = newTodoList.find((todo) => todo.id === targetTodoId)\r\n\r\n        if (!targetTodo) {\r\n          return null\r\n        }\r\n\r\n        const eventData = {\r\n          ids: [targetTodoId],\r\n          completed: targetTodo?.completed,\r\n        }\r\n\r\n        return [TodoListState().new(newTodoList), TodoCompletedChangedEvent(eventData)]\r\n      },\r\n    })\r\n\r\n    const toggleAllTodoCompleted = domain.command({\r\n      name: 'toggleAllTodoCompleted',\r\n      impl({ get }, completed: boolean) {\r\n        const todoList = get(TodoListState())\r\n\r\n        if (todoList.length === 0) {\r\n          return null\r\n        }\r\n\r\n        const newTodoList = todoList.map((todo) => {\r\n          return { ...todo, completed }\r\n        })\r\n\r\n        return [\r\n          TodoListState().new(newTodoList),\r\n          TodoCompletedChangedEvent({\r\n            ids: newTodoList.map((todo) => todo.id),\r\n            completed,\r\n          }),\r\n        ]\r\n      },\r\n    })\r\n\r\n    const clearCompleted = domain.command({\r\n      name: 'clearCompleted',\r\n      impl({ get }) {\r\n        const todoList = get(TodoListState())\r\n        const newTodoList = todoList.filter((todo) => !todo.completed)\r\n        const removedTodoIdList = todoList.filter((todo) => todo.completed).map((todo) => todo.id)\r\n\r\n        return [TodoListState().new(newTodoList), removeTodoEvent(removedTodoIdList)]\r\n      },\r\n    })\r\n\r\n    domain.command$({\r\n      name: 'fromRepoToState',\r\n      impl() {\r\n        return from(repo.getTodoList()).pipe(map((todos) => setTodoList(todos)))\r\n      },\r\n    })\r\n\r\n    domain.command$({\r\n      name: 'fromStateToRepo',\r\n      impl: ({ fromEvent }) => {\r\n        const addTodo$ = fromEvent(TodoAddedEvent).pipe(tap((todo) => repo.addTodo(todo)))\r\n\r\n        const removeTodo$ = fromEvent(removeTodoEvent).pipe(tap((ids) => repo.removeTodoByIds(ids)))\r\n\r\n        const updateTodo$ = fromEvent(TodoUpdatedEvent).pipe(tap((todo) => repo.updateTodo(todo)))\r\n\r\n        const toggleTodoCompleted$ = fromEvent(TodoCompletedChangedEvent).pipe(\r\n          tap((eventData) => repo.toggleCompletedByIds(eventData.ids, eventData.completed)),\r\n        )\r\n\r\n        return merge(addTodo$, removeTodo$, updateTodo$, toggleTodoCompleted$).pipe(map(() => null))\r\n      },\r\n    })\r\n\r\n    return {\r\n      query: {\r\n        TodoListQuery,\r\n        ActiveTodoCountQuery,\r\n        HasCompletedQuery,\r\n        AllCompletedQuery,\r\n      },\r\n      command: {\r\n        addTodo,\r\n        removeTodo,\r\n        toggleTodoCompleted,\r\n        toggleAllTodoCompleted,\r\n        updateTodo,\r\n        clearCompleted,\r\n      },\r\n      event: { AddTodoFailedEvent },\r\n    }\r\n  },\r\n})\r\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\r\n\r\nexport function useInputHandler(defaultValue: string) {\r\n  const [value, setValue] = useState(defaultValue)\r\n\r\n  const onChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setValue(event.target.value)\r\n  }, [])\r\n\r\n  return [value, onChange, setValue] as const\r\n}\r\n\r\nexport function useKeyPressHandler(key: string, callback: (event: React.KeyboardEvent<HTMLInputElement>) => void) {\r\n  const callbackRef = useRef(callback)\r\n\r\n  const handleKeyPress = useCallback(\r\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n      if (event.key.toLocaleLowerCase() === key.toLocaleLowerCase()) {\r\n        event.preventDefault()\r\n        callbackRef.current(event)\r\n      }\r\n    },\r\n    [key],\r\n  )\r\n\r\n  useEffect(() => {\r\n    callbackRef.current = callback\r\n  })\r\n\r\n  return handleKeyPress\r\n}\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useRemeshDomain } from 'remesh-react'\r\n\r\nimport { Todo, TodoDomain } from './todo'\r\nimport { useInputHandler, useKeyPressHandler } from './hooks'\r\n\r\nexport function TodoItem({ todo }: { todo: Todo }) {\r\n  const domain = useRemeshDomain(TodoDomain())\r\n\r\n  const [editing, setEditing] = useState(false)\r\n\r\n  const ref = useRef<HTMLInputElement>(null)\r\n\r\n  const [todoName, handleTodoNameChange] = useInputHandler(todo.name)\r\n\r\n  const handlePressEnter = useKeyPressHandler('Enter', () => {\r\n    domain.command.updateTodo({ ...todo, name: todoName })\r\n    setEditing(false)\r\n  })\r\n\r\n  const handleEnableEdit = () => {\r\n    setEditing(true)\r\n  }\r\n\r\n  const handleSave = () => {\r\n    domain.command.toggleTodoCompleted(todo.id)\r\n  }\r\n\r\n  const handleDelete = () => {\r\n    domain.command.removeTodo(todo.id)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (editing) {\r\n      ref.current?.focus()\r\n    }\r\n  }, [editing])\r\n\r\n  return (\r\n    <li onDoubleClick={handleEnableEdit} className={`${editing ? 'editing' : ''} ${todo.completed ? 'completed' : ''}`}>\r\n      <div className=\"view\">\r\n        <input type=\"checkbox\" className=\"toggle\" checked={todo.completed} onChange={handleSave} />\r\n        <label>{todo.name}</label>\r\n        <button className=\"destroy\" onClick={handleDelete} />\r\n      </div>\r\n      {editing && (\r\n        <input\r\n          ref={ref}\r\n          className=\"edit\"\r\n          value={todoName}\r\n          onChange={handleTodoNameChange}\r\n          onKeyPress={handlePressEnter}\r\n          onBlur={() => {\r\n            setEditing(false)\r\n          }}\r\n        />\r\n      )}\r\n    </li>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useRemeshDomain, useRemeshEvent, useRemeshQuery } from 'remesh-react'\r\nimport { NavLink, useParams } from 'react-router-dom'\r\n\r\nimport { TodoDomain } from './todo'\r\nimport { useInputHandler, useKeyPressHandler } from './hooks'\r\nimport { TodoItem } from './TodoItem'\r\n\r\ntype FilterType = 'completed' | 'active' | undefined\r\n\r\nexport const TodoList = () => {\r\n  const { filter } = useParams()\r\n\r\n  const domain = useRemeshDomain(TodoDomain())\r\n\r\n  const todoList = useRemeshQuery(domain.query.TodoListQuery(filter as FilterType))\r\n  const activeTodoCount = useRemeshQuery(domain.query.ActiveTodoCountQuery())\r\n  const hasCompleted = useRemeshQuery(domain.query.HasCompletedQuery())\r\n  const allCompleted = useRemeshQuery(domain.query.AllCompletedQuery())\r\n\r\n  const [newTodo, handleTodoNameInput, setNewTodo] = useInputHandler('')\r\n\r\n  const handlePressEnter = useKeyPressHandler('Enter', () => {\r\n    domain.command.addTodo(newTodo)\r\n    setNewTodo('')\r\n  })\r\n\r\n  const handleToggleAll = () => {\r\n    domain.command.toggleAllTodoCompleted(!allCompleted)\r\n  }\r\n\r\n  const handleClearCompleted = () => {\r\n    domain.command.clearCompleted()\r\n  }\r\n  \r\n  useRemeshEvent(domain.event.AddTodoFailedEvent, (message) => {\r\n    alert(message)\r\n  })\r\n\r\n  console.log('render list')\r\n\r\n  return (\r\n    <div className=\"todoapp\">\r\n      <header className=\"header\">\r\n        <h1>todos</h1>\r\n        <input\r\n          className=\"new-todo\"\r\n          placeholder=\"What needs to be done?\"\r\n          value={newTodo}\r\n          onChange={handleTodoNameInput}\r\n          onKeyDown={handlePressEnter}\r\n        />\r\n      </header>\r\n\r\n      <section className=\"main\">\r\n        <input id=\"toggle-all\" type=\"checkbox\" className=\"toggle-all\" checked={allCompleted} onChange={handleToggleAll} />\r\n        <label htmlFor=\"toggle-all\" />\r\n        <ul className=\"todo-list\">\r\n          {todoList.map((todo) => (\r\n            <TodoItem key={todo.id} todo={todo} />\r\n          ))}\r\n        </ul>\r\n      </section>\r\n\r\n      <footer className=\"footer\">\r\n        <span className=\"todo-count\">\r\n          <strong>{activeTodoCount}</strong> items left\r\n        </span>\r\n        <ul className=\"filters\">\r\n          <li>\r\n            <NavLink to=\"/\" className={(navData) => (navData.isActive ? 'selected' : '')}>\r\n              All\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/active\" className={(navData) => (navData.isActive ? 'selected' : '')}>\r\n              Active\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/completed\" className={(navData) => (navData.isActive ? 'selected' : '')}>\r\n              Completed\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n        {hasCompleted && (\r\n          <button className=\"clear-completed\" onClick={handleClearCompleted}>\r\n            Clear completed\r\n          </button>\r\n        )}\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n","import React, { StrictMode } from 'react'\r\nimport * as ReactDOMClient from 'react-dom/client'\r\n\r\nimport { Remesh } from 'remesh'\r\nimport { HashRouter, Routes, Route } from 'react-router-dom'\r\n\r\nimport { RemeshRoot } from 'remesh-react'\r\nimport { RemeshReduxDevtools } from 'remesh-redux-devtools'\r\nimport { RemeshLogger } from 'remesh-logger'\r\n\r\nimport { TodoList } from './TodoList'\r\n\r\nconst container = document.getElementById('root')\r\n\r\nif (container) {\r\n  const root = ReactDOMClient.createRoot(container)\r\n  const store = Remesh.store({\r\n    inspectors: [RemeshReduxDevtools(), RemeshLogger({\r\n      include: ['command', 'query', 'event', 'domain', 'command$', 'state'],\r\n    })],\r\n  })\r\n\r\n  root.render(\r\n    <StrictMode>\r\n      <RemeshRoot store={store}>\r\n        <HashRouter basename=\"/\">\r\n          <Routes>\r\n            <Route path=\"/\" element={<TodoList />} />\r\n            <Route path=\"/:filter\" element={<TodoList />} />\r\n          </Routes>\r\n        </HashRouter>\r\n      </RemeshRoot>\r\n    </StrictMode>,\r\n  )\r\n}\r\n"],"names":["useState","useCallback","useRef","useEffect","ReactDOMClient.createRoot","StrictMode"],"mappings":"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"}