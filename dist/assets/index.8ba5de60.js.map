{"version":3,"file":"index.8ba5de60.js","sources":["../../packages/remesh/src/schedulers/debounce.ts","../../packages/remesh/src/schedulers/throttle.ts","../../projects/remesh-example/src/others/index.tsx"],"sourcesContent":["import { debounceTime as debounceTimeOperator, tap } from 'rxjs/operators'\n\nimport { RemeshScheduler } from '../remesh'\n\nexport const debounce = <T = unknown>(...args: Parameters<typeof debounceTimeOperator>): RemeshScheduler<T> => {\n  return (_, value$) => {\n    return value$.pipe(debounceTimeOperator(...args))\n  }\n}\n","import { tap, throttleTime as throttleTimeOperator } from 'rxjs/operators'\n\nimport { RemeshScheduler } from '../remesh'\n\nexport const throttle = <T = unknown>(...args: Parameters<typeof throttleTimeOperator>): RemeshScheduler<T> => {\n  return (_, value$) => {\n    return value$.pipe(throttleTimeOperator(...args))\n  }\n}\n","import React, { StrictMode, Suspense, useEffect, useTransition } from 'react'\r\nimport * as ReactDOMClient from 'react-dom/client'\r\n\r\nimport { Remesh } from 'remesh'\r\n\r\nimport { ListModule } from 'remesh/modules/list'\r\n\r\nimport { debounce } from 'remesh/schedulers/debounce'\r\nimport { throttle } from 'remesh/schedulers/throttle'\r\n\r\nimport { RemeshRoot, useRemeshAsyncQuery, useRemeshDomain, useRemeshQuery, useRemeshSuspenseQuery } from 'remesh-react'\r\nimport { RemeshReduxDevtools } from 'remesh-redux-devtools'\r\nimport { RemeshLogger } from 'remesh-logger'\r\n\r\nconst delay = (ms: number) => new Promise<void>((resolve) => setTimeout(resolve, ms))\r\n\r\ntype Pagination = {\r\n  offset: number\r\n  pageSize: number\r\n}\r\n\r\nconst TestDomain = Remesh.domain({\r\n  name: 'test',\r\n  impl: (domain) => {\r\n    const CountState = domain.state({\r\n      name: 'CountState',\r\n      default: 0,\r\n    })\r\n\r\n    const CountIncreQuery = domain.query({\r\n      name: 'CountIncreQuery',\r\n      impl: async ({ get }) => {\r\n        const count = get(CountState())\r\n        await delay(1000)\r\n        return count + 1\r\n      },\r\n    })\r\n\r\n    const CountDecreQuery = domain.query({\r\n      name: 'CountDecreQuery',\r\n      impl: async ({ get }) => {\r\n        const count = get(CountState())\r\n        await delay(1000)\r\n        return count - 1\r\n      },\r\n    })\r\n\r\n    const CountDoubleQuery = domain.query({\r\n      name: 'CountDoubleQuery',\r\n      impl: async ({ get }) => {\r\n        const count = await get(CountState())\r\n        await delay(1000)\r\n        return count * 2\r\n      },\r\n    })\r\n\r\n    const CountQuery = domain.query({\r\n      name: 'CountQuery',\r\n      scheduler: debounce(0),\r\n      impl: async ({ get }) => {\r\n        const [incre, decre, double] = await Promise.all([\r\n          get(CountIncreQuery()),\r\n          get(CountDecreQuery()),\r\n          get(CountDoubleQuery()),\r\n        ])\r\n        return { incre, decre, double }\r\n      },\r\n    })\r\n\r\n    const UnwrappedCountQuery = domain.query({\r\n      name: 'UnwrappedCountQuery',\r\n      scheduler: throttle(0),\r\n      impl: ({ unwrap }) => {\r\n        const data = unwrap(CountQuery())\r\n        return data\r\n      },\r\n    })\r\n\r\n    const incre = domain.command({\r\n      name: 'incre',\r\n      impl: ({ get }) => {\r\n        const count = get(CountState())\r\n        return CountState().new(count + 1)\r\n      },\r\n    })\r\n\r\n    const decre = domain.command({\r\n      name: 'decre',\r\n      impl: ({ get }) => {\r\n        const count = get(CountState())\r\n        return CountState().new(count - 1)\r\n      },\r\n    })\r\n\r\n    const paginationListModule = ListModule<Pagination>(domain, {\r\n      name: 'PaginationListState',\r\n      key: (state) => `${state.offset}-${state.pageSize}`,\r\n      default: [\r\n        {\r\n          offset: 0,\r\n          pageSize: 10,\r\n        },\r\n      ],\r\n    })\r\n\r\n    const UsersQuery = domain.query({\r\n      name: 'UsersQuery',\r\n      impl: async (_, pagination: Pagination) => {\r\n        const response = await fetch(\r\n          `https://api.github.com/users?since=${pagination.offset}&per_page=${pagination.pageSize}`,\r\n        )\r\n        const json = await response.json()\r\n        return json\r\n      },\r\n    })\r\n\r\n    const UserListQuery = domain.query({\r\n      name: 'UserListQuery',\r\n      impl: async ({ get }) => {\r\n        const paginationList = get(paginationListModule.query.ItemListQuery())\r\n        const usersList = await Promise.all(paginationList.map((pagination) => get(UsersQuery(pagination))))\r\n        return usersList.flat(Number.POSITIVE_INFINITY)\r\n      },\r\n    })\r\n\r\n    const NextPaginationQuery = domain.query({\r\n      name: 'NextPaginationQuery',\r\n      impl: async ({ get }): Promise<Pagination> => {\r\n        const paginationList = get(paginationListModule.query.ItemListQuery())\r\n\r\n        if (paginationList.length === 0) {\r\n          return {\r\n            offset: 0,\r\n            pageSize: 10,\r\n          }\r\n        }\r\n\r\n        const lastPagination = paginationList[paginationList.length - 1]\r\n        const users = await get(UsersQuery(lastPagination))\r\n        const lastUser = users[users.length - 1]\r\n\r\n        const nextPagination = {\r\n          offset: lastUser.id + 1,\r\n          pageSize: lastPagination.pageSize,\r\n        }\r\n\r\n        return nextPagination\r\n      },\r\n    })\r\n\r\n    const loadMoreUsers = domain.command({\r\n      name: 'loadMoreUsers',\r\n      impl: ({}, nextPagination: Pagination) => {\r\n        return paginationListModule.command.addItem(nextPagination)\r\n      },\r\n    })\r\n\r\n    return {\r\n      query: {\r\n        CountQuery,\r\n        UnwrappedCountQuery,\r\n        UserListQuery,\r\n        NextPaginationQuery,\r\n      },\r\n      command: {\r\n        incre,\r\n        decre,\r\n        loadMoreUsers,\r\n      },\r\n    }\r\n  },\r\n})\r\n\r\nconst App = () => {\r\n  const testDomain = useRemeshDomain(TestDomain())\r\n\r\n  const count = useRemeshAsyncQuery(testDomain.query.CountQuery())\r\n  const unwrappedCount = useRemeshQuery(testDomain.query.UnwrappedCountQuery())\r\n\r\n  return (\r\n    <div>\r\n      <h3>Commands</h3>\r\n      <button onClick={() => testDomain.command.incre()}>Increment</button>{' '}\r\n      <button onClick={() => testDomain.command.decre()}>Decrement</button>\r\n      <div>\r\n        <h3>Async Query</h3>\r\n        <pre>{JSON.stringify(count, null, 2)}</pre>\r\n      </div>\r\n      <div>\r\n        <h3>Unwrapped Query</h3>\r\n        <pre>{JSON.stringify(unwrappedCount, null, 2)}</pre>\r\n      </div>\r\n      <div>\r\n        <h3>Suspense Query</h3>\r\n        <Suspense fallback=\"loading...\">\r\n          <Count />\r\n        </Suspense>\r\n      </div>\r\n      <div>\r\n        <h3>User List Query</h3>\r\n        <Suspense fallback=\"loading...\">\r\n          <UserList />\r\n        </Suspense>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst UserList = () => {\r\n  const [pending, transition] = useTransition()\r\n  const testDomain = useRemeshDomain(TestDomain())\r\n\r\n  const userList = useRemeshSuspenseQuery(testDomain.query.UserListQuery())\r\n  const nextPagination = useRemeshSuspenseQuery(testDomain.query.NextPaginationQuery())\r\n\r\n  const loadMoreUsers = () => {\r\n    transition(() => {\r\n      testDomain.command.loadMoreUsers(nextPagination)\r\n    })\r\n  }\r\n\r\n  console.log('pending', pending)\r\n\r\n  return (\r\n    <>\r\n      <button onClick={loadMoreUsers}>load more</button>\r\n      <div style={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'space-around' }}>\r\n        {userList.map((user) => {\r\n          return (\r\n            <div style={{ width: 100, margin: 10 }} key={user.html_url}>\r\n              <img style={{ width: 100 }} src={user.avatar_url} />\r\n              <p>\r\n                <a href={user.html_url}>{user.login}</a>\r\n              </p>\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Count = () => {\r\n  const testDomain = useRemeshDomain(TestDomain())\r\n\r\n  const count = useRemeshSuspenseQuery(testDomain.query.CountQuery())\r\n\r\n  return <pre>{JSON.stringify(count, null, 2)}</pre>\r\n}\r\n\r\nconst rootElem = document.getElementById('root')\r\n\r\nif (rootElem) {\r\n  const root = ReactDOMClient.createRoot(rootElem)\r\n  const store = Remesh.store({\r\n    inspectors: [\r\n      RemeshReduxDevtools(),\r\n      RemeshLogger({\r\n        include: ['command', 'query', 'event', 'domain', 'command$', 'state'],\r\n      }),\r\n    ],\r\n  })\r\n\r\n  root.render(\r\n    <StrictMode>\r\n      <RemeshRoot store={store}>\r\n        <App />\r\n      </RemeshRoot>\r\n      ,\r\n    </StrictMode>,\r\n  )\r\n}\r\n"],"names":["debounceTimeOperator","throttleTimeOperator","Suspense","useTransition","ReactDOMClient.createRoot","StrictMode"],"mappings":"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"}