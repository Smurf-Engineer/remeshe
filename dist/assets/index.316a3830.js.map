{"version":3,"file":"index.316a3830.js","sources":["../../projects/remesh-example/src/7guis/Counter.tsx","../../projects/remesh-example/src/7guis/TemperatureConverter.tsx","../../projects/remesh-example/src/7guis/FlightBooker.tsx","../../projects/remesh-example/src/7guis/Timer.tsx","../../projects/remesh-example/src/7guis/OuterClickWrapper.tsx","../../projects/remesh-example/src/7guis/CRUD.tsx","../../projects/remesh-example/src/7guis/CircleDrawer.tsx","../../projects/remesh-example/src/7guis/Cells.tsx","../../projects/remesh-example/src/7guis/index.tsx"],"sourcesContent":["import React from 'react';\r\n\r\nimport { Remesh } from 'remesh';\r\nimport {\r\n  useRemeshDomain,\r\n  useRemeshQuery,\r\n} from \"remesh-react\";\r\n\r\nconst Counter = Remesh.domain({\r\n  name: 'Counter',\r\n  impl: (domain) => {\r\n    const CounterState = domain.state({\r\n      name: 'CounterState',\r\n      default: 0,\r\n    });\r\n\r\n    const incre = domain.command({\r\n      name: 'increCommand',\r\n      impl: ({ get }) => {\r\n        const count = get(CounterState());\r\n        return CounterState().new(count + 1);\r\n      },\r\n    });\r\n\r\n    return {\r\n      query: {\r\n        count: CounterState.query,\r\n      },\r\n      command: {\r\n        incre,\r\n      },\r\n    };\r\n  },\r\n});\r\n\r\nexport const CounterApp = () => {\r\n  const counter = useRemeshDomain(Counter());\r\n  const count = useRemeshQuery(counter.query.count());\r\n\r\n  const handleIncre = () => {\r\n    counter.command.incre();\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: 400,\r\n        border: '1px solid #eaeaea',\r\n        boxSizing: 'border-box',\r\n        padding: 10,\r\n      }}\r\n    >\r\n      <h2>Counter</h2>\r\n      <input type=\"number\" readOnly value={count} />\r\n      <label>\r\n        <button onClick={handleIncre}>Count </button>{' '}\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Remesh } from 'remesh';\r\nimport { useRemeshDomain, useRemeshQuery } from \"remesh-react\";\r\n\r\nconst TemperatureConverter = Remesh.domain({\r\n  name: 'TemperatureConverter',\r\n  impl: (domain) => {\r\n    const CelsiusState = domain.state({\r\n      name: 'CelsiusState',\r\n      default: '',\r\n    });\r\n\r\n    const FahrenheitState = domain.state({\r\n      name: 'FahrenheitState',\r\n      default: '',\r\n    });\r\n\r\n    const resetBoth = domain.command({\r\n      name: 'resetBoth',\r\n      impl: () => {\r\n        return [CelsiusState().new(''), FahrenheitState().new('')];\r\n      },\r\n    });\r\n\r\n    const updateCelsius = domain.command({\r\n      name: 'updateCelsius',\r\n      impl: ({}, input: string) => {\r\n        if (input === '') {\r\n          return resetBoth();\r\n        }\r\n\r\n        const celsius = parseFloat(input);\r\n\r\n        if (Number.isNaN(celsius)) {\r\n          return CelsiusState().new(input);\r\n        }\r\n\r\n        const fahrenheit = celsius * (9 / 5) + 32;\r\n\r\n        return [\r\n          CelsiusState().new(input),\r\n          FahrenheitState().new(fahrenheit.toString()),\r\n        ];\r\n      },\r\n    });\r\n\r\n    const updateFahrenheit = domain.command({\r\n      name: 'updateFahrenheit',\r\n      impl: ({}, input: string) => {\r\n        if (input === '') {\r\n          return resetBoth();\r\n        }\r\n\r\n        const fahrenheit = parseFloat(input);\r\n\r\n        if (Number.isNaN(fahrenheit)) {\r\n          return FahrenheitState().new(input);\r\n        }\r\n\r\n        const celsius = (fahrenheit - 32) * (5 / 9);\r\n\r\n        return [\r\n          CelsiusState().new(celsius.toString()),\r\n          FahrenheitState().new(input),\r\n        ];\r\n      },\r\n    });\r\n\r\n    return {\r\n      query: {\r\n        celsius: CelsiusState.query,\r\n        fahrenheit: FahrenheitState.query,\r\n      },\r\n      command: {\r\n        updateCelsius: updateCelsius,\r\n        updateFahrenheit: updateFahrenheit,\r\n      },\r\n    };\r\n  },\r\n});\r\n\r\nexport const TemperatureConverterApp = () => {\r\n  const temperatureConverter = useRemeshDomain(TemperatureConverter());\r\n  const celsius = useRemeshQuery(temperatureConverter.query.celsius());\r\n  const fahrenheit = useRemeshQuery(\r\n    temperatureConverter.query.fahrenheit()\r\n  );\r\n\r\n  const handleCelsius = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    temperatureConverter.command.updateCelsius(event.target.value);\r\n  };\r\n\r\n  const handleFahrenheit = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    temperatureConverter.command.updateFahrenheit(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        border: '1px solid #eaeaea',\r\n        boxSizing: 'border-box',\r\n        padding: 10,\r\n      }}\r\n    >\r\n      <h2>Temperature Converter</h2>\r\n      <div>\r\n        <input type=\"text\" value={celsius} onChange={handleCelsius} />\r\n        <label htmlFor=\"\">Celsius</label>=\r\n        <input type=\"text\" value={fahrenheit} onChange={handleFahrenheit} />\r\n        <label htmlFor=\"\">Fahrenheit</label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react'\r\n\r\nimport { Remesh } from 'remesh'\r\nimport { useRemeshDomain, useRemeshQuery } from 'remesh-react'\r\n\r\ntype FlightBookerOption = 'one-way' | 'return'\r\n\r\ntype FlightBookerStatus = {\r\n  startDate: 'valid' | 'invalid'\r\n  endDate: 'valid' | 'invalid' | 'disabled' | 'enabled'\r\n  bookButton: 'disabled' | 'enabled'\r\n}\r\n\r\nconst getDate = (dateInput: string) => {\r\n  const list = dateInput.split('.')\r\n\r\n  if (list.length !== 3) {\r\n    return null\r\n  }\r\n\r\n  const date = new Date(`${list[2]}.${list[1]}.${list[0]}`)\r\n\r\n  if (date.toString() === 'Invalid Date') {\r\n    return null\r\n  }\r\n\r\n  return date\r\n}\r\n\r\nconst toDateInput = (date: Date) => {\r\n  const list = date.toLocaleDateString().split('/')\r\n\r\n  return `${list[2]}.${list[1]}.${list[0]}`\r\n}\r\n\r\nconst compareDate = (date1: Date, date2: Date) => {\r\n  if (date1.getFullYear() !== date2.getFullYear()) {\r\n    return date1.getFullYear() - date2.getFullYear()\r\n  }\r\n\r\n  if (date1.getMonth() !== date2.getMonth()) {\r\n    return date1.getMonth() - date2.getMonth()\r\n  }\r\n\r\n  return date1.getDate() - date2.getDate()\r\n}\r\n\r\nconst FlightBooker = Remesh.domain({\r\n  name: 'FlightBooker',\r\n  impl: (domain) => {\r\n    const OptionState = domain.state<FlightBookerOption>({\r\n      name: 'OptionState',\r\n      default: 'one-way',\r\n    })\r\n\r\n    const StartDateInputState = domain.state({\r\n      name: 'StartDateInputState',\r\n      default: toDateInput(new Date()),\r\n    })\r\n\r\n    const EndDateInputState = domain.state({\r\n      name: 'EndDateInputState',\r\n      default: toDateInput(new Date()),\r\n    })\r\n\r\n    const startDateQuery = domain.query({\r\n      name: 'StartDateQuery',\r\n      impl: ({ get }) => {\r\n        const startDateInput = get(StartDateInputState())\r\n        return getDate(startDateInput)\r\n      },\r\n    })\r\n\r\n    const endDateQuery = domain.query({\r\n      name: 'EndDateQuery',\r\n      impl: ({ get }) => {\r\n        const endDateInput = get(EndDateInputState())\r\n        return getDate(endDateInput)\r\n      },\r\n    })\r\n\r\n    const updateOption = domain.command({\r\n      name: 'updateOption',\r\n      impl: ({}, option: FlightBookerOption) => {\r\n        return OptionState().new(option)\r\n      },\r\n    })\r\n\r\n    const updateStartDate = domain.command({\r\n      name: 'updateStartDate',\r\n      impl: ({}, dateInput: string) => {\r\n        return StartDateInputState().new(dateInput)\r\n      },\r\n    })\r\n\r\n    const updateEndDate = domain.command({\r\n      name: 'updateEndDate',\r\n      impl: ({}, dateInput: string) => {\r\n        return EndDateInputState().new(dateInput)\r\n      },\r\n    })\r\n\r\n    const status = domain.query({\r\n      name: 'StatusQuery',\r\n      impl: ({ get }): FlightBookerStatus => {\r\n        const option = get(OptionState())\r\n        const startDate = get(startDateQuery())\r\n        const endDate = get(endDateQuery())\r\n\r\n        const startDateStatus = !!startDate ? 'valid' : 'invalid'\r\n        const endDateStatus = option === 'return' ? (!!endDate ? 'valid' : 'invalid') : 'disabled'\r\n\r\n        const bookButtonStatus =\r\n          option === 'one-way'\r\n            ? !!startDate\r\n              ? 'enabled'\r\n              : 'disabled'\r\n            : !!startDate && !!endDate && compareDate(startDate, endDate) <= 0\r\n            ? 'enabled'\r\n            : 'disabled'\r\n\r\n        return {\r\n          startDate: startDateStatus,\r\n          endDate: endDateStatus,\r\n          bookButton: bookButtonStatus,\r\n        }\r\n      },\r\n    })\r\n\r\n    return {\r\n      query: {\r\n        status: status,\r\n        option: OptionState.query,\r\n        startDate: startDateQuery,\r\n        endDate: endDateQuery,\r\n        startDateInput: StartDateInputState.query,\r\n        endDateInput: EndDateInputState.query,\r\n      },\r\n      command: {\r\n        updateOption: updateOption,\r\n        updateStartDate: updateStartDate,\r\n        updateEndDate: updateEndDate,\r\n      },\r\n    }\r\n  },\r\n})\r\n\r\nexport const FlightBookerApp = () => {\r\n  const flightBooker = useRemeshDomain(FlightBooker())\r\n  const option = useRemeshQuery(flightBooker.query.option())\r\n  const status = useRemeshQuery(flightBooker.query.status())\r\n\r\n  const startDateInput = useRemeshQuery(flightBooker.query.startDateInput())\r\n  const endDateInput = useRemeshQuery(flightBooker.query.endDateInput())\r\n\r\n  const handleOptionChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n    flightBooker.command.updateOption(event.target.value as FlightBookerOption)\r\n  }\r\n\r\n  const handleStartDateChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    flightBooker.command.updateStartDate(event.target.value)\r\n  }\r\n\r\n  const handleEndDateChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    flightBooker.command.updateEndDate(event.target.value)\r\n  }\r\n\r\n  const handleBookButtonClick = () => {\r\n    if (status.bookButton === 'enabled') {\r\n      if (option === 'one-way') {\r\n        alert(`You have booked a one-way flight on ${startDateInput}`)\r\n      } else {\r\n        alert(`You have booked return flight from ${startDateInput} to ${endDateInput}`)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: 400,\r\n        border: '1px solid #eaeaea',\r\n        boxSizing: 'border-box',\r\n        padding: 10,\r\n      }}\r\n    >\r\n      <h2>Flight Booker</h2>\r\n      <div>\r\n        <select value={option} onChange={handleOptionChange}>\r\n          <option value=\"one-way\">One-way flight</option>\r\n          <option value=\"return\">Return flight</option>\r\n        </select>\r\n      </div>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          style={{\r\n            backgroundColor: status.startDate === 'invalid' ? 'red' : '',\r\n          }}\r\n          value={startDateInput}\r\n          onChange={handleStartDateChange}\r\n        />\r\n      </div>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          style={{\r\n            backgroundColor: status.endDate === 'invalid' ? 'red' : '',\r\n          }}\r\n          disabled={status.endDate === 'disabled'}\r\n          value={endDateInput}\r\n          onChange={handleEndDateChange}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button disabled={status.bookButton === 'disabled'} onClick={handleBookButtonClick}>\r\n          Book\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { merge, animationFrames, of, NEVER } from 'rxjs';\r\nimport {\r\n  distinctUntilChanged,\r\n  map,\r\n  mapTo,\r\n  pairwise,\r\n  switchMap,\r\n  takeUntil,\r\n} from 'rxjs/operators';\r\n\r\nimport { Remesh } from 'remesh';\r\n\r\nimport {\r\n  useRemeshDomain,\r\n  useRemeshQuery,\r\n} from \"remesh-react\";\r\n\r\nconst Timer = Remesh.domain({\r\n  name: 'timer',\r\n  inspectable: false,\r\n  impl: (domain) => {\r\n    const DurationState = domain.state({\r\n      name: 'duration',\r\n      default: 15000,\r\n    });\r\n\r\n    const ElapsedState = domain.state({\r\n      name: 'elapsed',\r\n      default: 0,\r\n    });\r\n\r\n    const StartEvent = domain.event({\r\n      name: 'StartEvent',\r\n    });\r\n\r\n    const StopEvent = domain.event({\r\n      name: 'StopEvent',\r\n    });\r\n\r\n    const updateElapsed = domain.command({\r\n      name: 'updateElapsed',\r\n      impl: ({ get }, increment: number) => {\r\n        const duration = get(DurationState());\r\n        const elapsed = get(ElapsedState());\r\n\r\n        if (elapsed > duration) {\r\n          return StopEvent();\r\n        }\r\n\r\n        return ElapsedState().new(elapsed + increment);\r\n      },\r\n    });\r\n\r\n    const updateDuration = domain.command({\r\n      name: 'updateDuration',\r\n      impl: ({ get }, newDuration: number) => {\r\n        const elapsed = get(ElapsedState());\r\n\r\n        if (newDuration > elapsed) {\r\n          return [DurationState().new(newDuration), StartEvent()];\r\n        }\r\n\r\n        return DurationState().new(newDuration);\r\n      },\r\n    });\r\n\r\n    const resetElapsed = domain.command({\r\n      name: 'resetElapsed',\r\n      impl: ({}) => {\r\n        return [ElapsedState().new(0), StartEvent()];\r\n      },\r\n    });\r\n\r\n    domain.command$({\r\n      name: 'updateElapsed$',\r\n      impl: ({ fromEvent }) => {\r\n        const event$ = merge(\r\n          fromEvent(StartEvent).pipe(mapTo(1)),\r\n          fromEvent(StopEvent).pipe(mapTo(0))\r\n        ).pipe(distinctUntilChanged());\r\n\r\n        const main$ = event$.pipe(\r\n          switchMap((signal) => {\r\n            if (signal === 0) {\r\n              return NEVER;\r\n            }\r\n            return animationFrames().pipe(\r\n              pairwise(),\r\n              map(([a, b]) => b.elapsed - a.elapsed),\r\n              map((increment) => updateElapsed(increment)),\r\n              takeUntil(fromEvent(StopEvent))\r\n            );\r\n          })\r\n        );\r\n\r\n        return merge(main$, of(StartEvent()));\r\n      },\r\n    });\r\n\r\n    return {\r\n      query: {\r\n        duration: DurationState.query,\r\n        elapsed: ElapsedState.query,\r\n      },\r\n      command: {\r\n        resetElapsed,\r\n        updateDuration,\r\n      },\r\n    };\r\n  },\r\n});\r\n\r\nexport const TimerApp = () => {\r\n  const timer = useRemeshDomain(Timer());\r\n  const elapsed = useRemeshQuery(timer.query.elapsed());\r\n  const duration = useRemeshQuery(timer.query.duration());\r\n\r\n  const handleDurationChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const duration = parseInt(event.target.value, 10);\r\n    if (!isNaN(duration)) {\r\n      timer.command.updateDuration(duration);\r\n    }\r\n  };\r\n\r\n  const handleResetElapsed = () => {\r\n    timer.command.resetElapsed();\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: 400,\r\n        border: '1px solid #eaeaea',\r\n        boxSizing: 'border-box',\r\n        padding: 10,\r\n      }}\r\n    >\r\n      <h2>Timer</h2>\r\n      <div style={{ display: 'flex' }}>\r\n        <label style={{ marginRight: 10, whiteSpace: 'nowrap' }}>\r\n          Elapsed Timer:\r\n        </label>\r\n        <div style={{ width: '100%' }}>\r\n          <span\r\n            style={{\r\n              display: 'inline-block',\r\n              height: 10,\r\n              background: 'green',\r\n              width: `${Math.min(elapsed / duration, 1) * 100}%`,\r\n              verticalAlign: 'middle',\r\n              borderRadius: 5,\r\n            }}\r\n          ></span>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        {elapsed > duration\r\n          ? (duration / 1000).toFixed(1)\r\n          : (elapsed / 1000).toFixed(1)}\r\n        s\r\n      </div>\r\n      <div style={{ display: 'flex' }}>\r\n        <label style={{ width: 100, marginRight: 10 }}>Duration:</label>\r\n        <input\r\n          style={{ width: '100%' }}\r\n          type=\"range\"\r\n          min={0}\r\n          max={30000}\r\n          value={duration}\r\n          onChange={handleDurationChange}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button style={{ width: '100% ' }} onClick={handleResetElapsed}>\r\n          Reset Timer\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { ComponentPropsWithoutRef, useEffect, useRef } from 'react'\r\n\r\nexport const OuterClickWrapper = (props: OuterClickWrapperProps) => {\r\n  const { onOuterClick, ...restProps } = props\r\n  const containerRef = useRef<HTMLDivElement | null>(null)\r\n\r\n  useEffect(() => {\r\n    const handleClick = (event: MouseEvent) => {\r\n      if (!(event.target as Node)?.parentElement) {\r\n        return\r\n      }\r\n\r\n      const isOuterClick = !!(containerRef.current && !containerRef.current.contains(event.target as Node))\r\n\r\n      if (isOuterClick) {\r\n        onOuterClick?.(event)\r\n      }\r\n    }\r\n\r\n    document.addEventListener('click', handleClick, false)\r\n    return () => {\r\n      document.removeEventListener('click', handleClick, false)\r\n    }\r\n  }, [])\r\n\r\n  return <div ref={containerRef} {...restProps}></div>\r\n}\r\ntype OuterClickWrapperProps = ComponentPropsWithoutRef<'div'> & {\r\n  onOuterClick?: (event: MouseEvent) => void\r\n}\r\n","import React from 'react'\r\n\r\nimport { Remesh } from 'remesh'\r\nimport { useRemeshDomain, useRemeshQuery } from 'remesh-react'\r\n\r\nimport { ListModule } from 'remesh/modules/list'\r\nimport { OuterClickWrapper } from './OuterClickWrapper'\r\n\r\ntype Name = {\r\n  name: string\r\n  surname: string\r\n}\r\n\r\ntype NameItem = {\r\n  id: string\r\n} & Name\r\n\r\nexport const CRUD = Remesh.domain({\r\n  name: 'CRUD',\r\n  impl: (domain) => {\r\n    let nameUid = 0\r\n\r\n    const nameListDomain = ListModule<NameItem>(domain, {\r\n      name: 'Name',\r\n      key: (item) => item.id,\r\n    })\r\n\r\n    const FilterPrefixState = domain.state({\r\n      name: 'FilterPrefix',\r\n      default: '',\r\n    })\r\n\r\n    const updateFilterPrefix = domain.command({\r\n      name: 'updateFilterPrefix',\r\n      impl: ({}, prefix: string) => {\r\n        return FilterPrefixState().new(prefix)\r\n      },\r\n    })\r\n\r\n    const CreatedState = domain.state<Name>({\r\n      name: 'Created',\r\n      default: {\r\n        name: '',\r\n        surname: '',\r\n      },\r\n    })\r\n\r\n    const updateCreated = domain.command({\r\n      name: 'UpdateCreated',\r\n      impl: ({ get }, name: Partial<Name>) => {\r\n        const currentName = get(CreatedState())\r\n        return CreatedState().new({\r\n          ...currentName,\r\n          ...name,\r\n        })\r\n      },\r\n    })\r\n\r\n    const SelectedState = domain.state<NameItem | null>({\r\n      name: 'Selected',\r\n      default: null,\r\n    })\r\n\r\n    const selectItem = domain.command({\r\n      name: 'Select',\r\n      impl: ({ get }, targetItemId: string | null) => {\r\n        const currentSelected = get(SelectedState())\r\n\r\n        if (targetItemId === null) {\r\n          if (currentSelected === null) {\r\n            return null\r\n          } else {\r\n            return SelectedState().new(null)\r\n          }\r\n        }\r\n\r\n        if (currentSelected && currentSelected.id === targetItemId) {\r\n          return SelectedState().new(null)\r\n        }\r\n\r\n        const targetItem = get(nameListDomain.query.item(targetItemId))\r\n\r\n        return SelectedState().new(targetItem)\r\n      },\r\n    })\r\n\r\n    const updateSelectedName = domain.command({\r\n      name: 'UpdateSelectedName',\r\n      impl: ({ get }, name: Partial<Name>) => {\r\n        const selected = get(SelectedState())\r\n\r\n        if (selected === null) {\r\n          return []\r\n        }\r\n\r\n        return SelectedState().new({\r\n          ...selected,\r\n          ...name,\r\n        })\r\n      },\r\n    })\r\n\r\n    const filteredList = domain.query({\r\n      name: 'FilteredListQuery',\r\n      impl: ({ get }) => {\r\n        const filterPrefix = get(FilterPrefixState())\r\n        const nameList = get(nameListDomain.query.itemList())\r\n\r\n        if (filterPrefix === '') {\r\n          return nameList\r\n        }\r\n\r\n        return nameList.filter((item) => item.surname.startsWith(filterPrefix))\r\n      },\r\n    })\r\n\r\n    const syncSelected = domain.command({\r\n      name: 'SyncSelected',\r\n      impl: ({ get }) => {\r\n        const selected = get(SelectedState())\r\n\r\n        if (selected === null) {\r\n          return []\r\n        }\r\n\r\n        return nameListDomain.command.updateItem(selected)\r\n      },\r\n    })\r\n\r\n    const createNameItem = domain.command({\r\n      name: 'CreateNameItem',\r\n      impl: ({ get }) => {\r\n        const created = get(CreatedState())\r\n        const newItem = {\r\n          id: `${nameUid++}`,\r\n          ...created,\r\n        }\r\n\r\n        return [nameListDomain.command.addItem(newItem), updateCreated({ name: '', surname: '' })]\r\n      },\r\n    })\r\n\r\n    return {\r\n      query: {\r\n        ...nameListDomain.query,\r\n        filteredList: filteredList,\r\n        selected: SelectedState.query,\r\n        filterPrefix: FilterPrefixState.query,\r\n        created: CreatedState.query,\r\n      },\r\n      command: {\r\n        ...nameListDomain.command,\r\n        updateFilterPrefix: updateFilterPrefix,\r\n        selectItem: selectItem,\r\n        updateCreated: updateCreated,\r\n        updateSelectedName: updateSelectedName,\r\n        createNameItem: createNameItem,\r\n        syncSelected: syncSelected,\r\n      },\r\n    }\r\n  },\r\n})\r\n\r\nexport const CRUDApp = () => {\r\n  const domain = useRemeshDomain(CRUD())\r\n  const filteredList = useRemeshQuery(domain.query.filteredList())\r\n  const filter = useRemeshQuery(domain.query.filterPrefix())\r\n  const created = useRemeshQuery(domain.query.created())\r\n  const selected = useRemeshQuery(domain.query.selected())\r\n\r\n  const handleFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    domain.command.updateFilterPrefix(e.target.value)\r\n  }\r\n\r\n  const handleSelect = (itemId: string | null) => {\r\n    domain.command.selectItem(itemId)\r\n  }\r\n\r\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (selected) {\r\n      domain.command.updateSelectedName({\r\n        name: e.target.value,\r\n      })\r\n    } else {\r\n      domain.command.updateCreated({ name: e.target.value })\r\n    }\r\n  }\r\n\r\n  const handleSurnameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (selected) {\r\n      domain.command.updateSelectedName({\r\n        surname: e.target.value,\r\n      })\r\n    } else {\r\n      domain.command.updateCreated({ surname: e.target.value })\r\n    }\r\n  }\r\n\r\n  const handleCreate = () => {\r\n    if (selected === null) {\r\n      domain.command.createNameItem()\r\n    }\r\n  }\r\n\r\n  const handleSync = () => {\r\n    if (selected) {\r\n      domain.command.syncSelected()\r\n    }\r\n  }\r\n\r\n  const handleDelete = () => {\r\n    if (selected) {\r\n      domain.command.deleteItem(selected.id)\r\n      domain.command.selectItem(null)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <OuterClickWrapper\r\n      style={{\r\n        width: 400,\r\n        border: '1px solid #eaeaea',\r\n        boxSizing: 'border-box',\r\n        padding: 10,\r\n      }}\r\n      onOuterClick={() => {\r\n        handleSelect(null)\r\n      }}\r\n    >\r\n      <h2>CRUD</h2>\r\n      <div>\r\n        <label htmlFor=\"\">Filter prefix</label>\r\n        <input type=\"text\" value={filter} onChange={handleFilterChange} />\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            width: '50%',\r\n            height: 100,\r\n            border: '1px solid #eaeaea',\r\n            overflow: 'scroll',\r\n          }}\r\n        >\r\n          {filteredList.map((item) => {\r\n            const fullName = item.name + ', ' + item.surname\r\n\r\n            return (\r\n              <div\r\n                key={item.id}\r\n                style={{\r\n                  background: selected?.id === item.id ? 'blue' : '',\r\n                  color: selected?.id === item.id ? 'white' : '',\r\n                }}\r\n                onClick={() => {\r\n                  handleSelect(item.id)\r\n                }}\r\n              >\r\n                {fullName}\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n        <div style={{ width: '50%', padding: 10 }}>\r\n          <div>\r\n            <label>Name:</label>\r\n            <input type=\"text\" value={selected ? selected.name : created.name} onChange={handleNameChange} />\r\n          </div>\r\n          <div>\r\n            <label>Surname:</label>\r\n            <input type=\"text\" value={selected ? selected.surname : created.surname} onChange={handleSurnameChange} />\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <button disabled={selected !== null} style={{ marginRight: 10 }} onClick={handleCreate}>\r\n            Create\r\n          </button>\r\n          <button disabled={selected === null} style={{ marginRight: 10 }} onClick={handleSync}>\r\n            Update\r\n          </button>\r\n          <button disabled={selected === null} style={{ marginRight: 10 }} onClick={handleDelete}>\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </OuterClickWrapper>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { Remesh } from 'remesh'\r\nimport { useRemeshDomain, useRemeshQuery } from 'remesh-react'\r\n\r\nimport { OuterClickWrapper } from './OuterClickWrapper'\r\n\r\ntype Position = { x: number; y: number }\r\n\r\ntype DrawAction = {\r\n  position: Position\r\n  diameter: number\r\n}\r\n\r\ntype AdjustAction = {\r\n  index: number\r\n  diameter: number\r\n}\r\n\r\ntype Circle = {\r\n  position: Position\r\n  diameter: number\r\n}\r\n\r\ntype DrawState = {\r\n  circles: Circle[]\r\n}\r\n\r\ntype TooltipsState =\r\n  | {\r\n      type: 'default'\r\n    }\r\n  | {\r\n      type: 'show-tips'\r\n      index: number\r\n      circle: Circle\r\n      pageX: number\r\n      pageY: number\r\n    }\r\n  | {\r\n      type: 'open-slider'\r\n      index: number\r\n      circle: Circle\r\n      pageX: number\r\n      pageY: number\r\n    }\r\n\r\ntype HistoryStateItem =\r\n  | {\r\n      action: 'add-circle'\r\n      state: DrawState\r\n    }\r\n  | {\r\n      action: 'adjust-circle'\r\n      index: number\r\n      state: DrawState\r\n    }\r\n\r\ntype HistoryState = {\r\n  items: HistoryStateItem[]\r\n  currentIndex: number\r\n}\r\n\r\nconst CircleDrawer = Remesh.domain({\r\n  name: 'CircleDrawer',\r\n  impl: (domain) => {\r\n    const HistoryState = domain.state<HistoryState>({\r\n      name: 'HistoryState',\r\n      default: {\r\n        items: [],\r\n        currentIndex: -1,\r\n      },\r\n    })\r\n\r\n    const recordHistoryState = domain.command({\r\n      name: 'recordHistoryState',\r\n      impl: ({ get }, state: HistoryStateItem) => {\r\n        const history = get(HistoryState())\r\n\r\n        const previousItems = history.items.slice(0, history.currentIndex + 1)\r\n\r\n        /**\r\n         * If the current state is the same as the last state,\r\n         * then we don't need to record it.\r\n         * This is because we are going to replace the last state\r\n         * with the current state.\r\n         *\r\n         * This is a bit of a hack, but it works.\r\n         *\r\n         * TODO: Find a better way to do this.\r\n         */\r\n        if (state.action === 'adjust-circle') {\r\n          const lastState = previousItems[previousItems.length - 1]\r\n          if (lastState.action === 'adjust-circle' && lastState.index === state.index) {\r\n            previousItems.pop()\r\n          }\r\n        }\r\n\r\n        const newItems = [...previousItems, state]\r\n        const newIndex = newItems.length - 1\r\n\r\n        return HistoryState().new({\r\n          items: newItems,\r\n          currentIndex: newIndex,\r\n        })\r\n      },\r\n    })\r\n\r\n    const DrawState = domain.state<DrawState>({\r\n      name: 'DrawState',\r\n      default: {\r\n        circles: [],\r\n      },\r\n    })\r\n\r\n    const undo = domain.command({\r\n      name: 'undo',\r\n      impl: ({ get }) => {\r\n        const history = get(HistoryState())\r\n        const canUndo = get(canUndoQuery())\r\n        const newIndex = history.currentIndex - 1\r\n\r\n        if (!canUndo || newIndex < 0) {\r\n          return [\r\n            DrawState().new({\r\n              circles: [],\r\n            }),\r\n            HistoryState().new({\r\n              items: history.items,\r\n              currentIndex: -1,\r\n            }),\r\n          ]\r\n        }\r\n\r\n        return [\r\n          DrawState().new(history.items[newIndex].state),\r\n          HistoryState().new({\r\n            items: history.items,\r\n            currentIndex: newIndex,\r\n          }),\r\n        ]\r\n      },\r\n    })\r\n\r\n    const redo = domain.command({\r\n      name: 'redo',\r\n      impl: ({ get }) => {\r\n        const history = get(HistoryState())\r\n        const canRedo = get(canRedoQuery())\r\n\r\n        if (!canRedo) {\r\n          return []\r\n        }\r\n\r\n        const newIndex = history.currentIndex + 1\r\n\r\n        return [\r\n          DrawState().new(history.items[newIndex].state),\r\n          HistoryState().new({\r\n            items: history.items,\r\n            currentIndex: newIndex,\r\n          }),\r\n        ]\r\n      },\r\n    })\r\n\r\n    const canUndoQuery = domain.query({\r\n      name: 'CanUndoQuery',\r\n      impl: ({ get }) => {\r\n        const history = get(HistoryState())\r\n        return history.currentIndex >= 0\r\n      },\r\n    })\r\n\r\n    const canRedoQuery = domain.query({\r\n      name: 'CanRedoQuery',\r\n      impl: ({ get }) => {\r\n        const history = get(HistoryState())\r\n        return history.currentIndex < history.items.length - 1\r\n      },\r\n    })\r\n\r\n    const SelectedIndexState = domain.state<number>({\r\n      name: 'SelectedIndexState',\r\n      default: -1,\r\n    })\r\n\r\n    const setSelectedIndex = domain.command({\r\n      name: 'setSelectedIndex',\r\n      impl: ({}, index: number) => {\r\n        return SelectedIndexState().new(index)\r\n      },\r\n    })\r\n\r\n    const SelectedCircleInfoQuery = domain.query({\r\n      name: 'SelectedCircleInfoQuery',\r\n      impl: ({ get }) => {\r\n        const index = get(SelectedIndexState())\r\n        const circles = get(DrawState()).circles\r\n\r\n        if (index === -1) {\r\n          return null\r\n        }\r\n\r\n        return {\r\n          index,\r\n          circle: circles[index],\r\n        }\r\n      },\r\n    })\r\n\r\n    const draw = domain.command({\r\n      name: 'draw',\r\n      impl: ({ get }, action: DrawAction) => {\r\n        const state = get(DrawState())\r\n        const newState = {\r\n          circles: [...state.circles, { position: action.position, diameter: action.diameter }],\r\n        }\r\n        return [\r\n          DrawState().new(newState),\r\n          recordHistoryState({\r\n            action: 'add-circle',\r\n            state: newState,\r\n          }),\r\n        ]\r\n      },\r\n    })\r\n\r\n    const adjust = domain.command({\r\n      name: 'adjust',\r\n      impl: ({ get }, action: AdjustAction) => {\r\n        const state = get(DrawState())\r\n        const circles = state.circles.map((circle, index) => {\r\n          if (index === action.index) {\r\n            return {\r\n              position: circle.position,\r\n              diameter: action.diameter,\r\n            }\r\n          }\r\n          return circle\r\n        })\r\n\r\n        const newState = {\r\n          circles,\r\n        }\r\n\r\n        return [\r\n          DrawState().new(newState),\r\n          recordHistoryState({\r\n            action: 'adjust-circle',\r\n            index: action.index,\r\n            state: newState,\r\n          }),\r\n        ]\r\n      },\r\n    })\r\n\r\n    const TooltipsState = domain.state<TooltipsState>({\r\n      name: 'TooltipsState',\r\n      default: {\r\n        type: 'default',\r\n      },\r\n    })\r\n\r\n    const updateTooltips = domain.command({\r\n      name: 'updateTooltips',\r\n      impl: ({}, newState: TooltipsState) => {\r\n        return TooltipsState().new(newState)\r\n      },\r\n    })\r\n\r\n    return {\r\n      query: {\r\n        historyState: HistoryState.query,\r\n        drawState: DrawState.query,\r\n        tooltipsState: TooltipsState.query,\r\n        selectedIndex: SelectedIndexState.query,\r\n        selectedCircleInfo: SelectedCircleInfoQuery,\r\n        canUndo: canUndoQuery,\r\n        canRedo: canRedoQuery,\r\n      },\r\n      command: {\r\n        draw,\r\n        adjust,\r\n        updateTooltips,\r\n        undo,\r\n        redo,\r\n        setSelectedIndex,\r\n      },\r\n    }\r\n  },\r\n})\r\n\r\nconst positionInCircle = (position: Position, circle: Circle): boolean => {\r\n  const { x, y } = position\r\n  const { diameter, position: circlePosition } = circle\r\n  const { x: circleX, y: circleY } = circlePosition\r\n  const radius = diameter / 2\r\n  const dx = x - circleX\r\n  const dy = y - circleY\r\n\r\n  return dx * dx + dy * dy < radius * radius\r\n}\r\n\r\nexport const CircleDrawerApp = () => {\r\n  const domain = useRemeshDomain(CircleDrawer())\r\n  const drawState = useRemeshQuery(domain.query.drawState())\r\n  const tooltipsState = useRemeshQuery(domain.query.tooltipsState())\r\n  const selectedCircleInfo = useRemeshQuery(domain.query.selectedCircleInfo())\r\n  const canUndo = useRemeshQuery(domain.query.canUndo())\r\n  const canRedo = useRemeshQuery(domain.query.canRedo())\r\n\r\n  const getCircleInfo = (position: Position) => {\r\n    const circle = drawState.circles.find((circle) => {\r\n      return positionInCircle(position, circle)\r\n    })\r\n\r\n    if (!circle) {\r\n      return null\r\n    }\r\n\r\n    const index = drawState.circles.indexOf(circle)\r\n\r\n    return {\r\n      index,\r\n      circle,\r\n    }\r\n  }\r\n\r\n  const handleRightClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    e.preventDefault()\r\n    const position = { x: e.pageX, y: e.pageY }\r\n\r\n    const circleInfo = getCircleInfo(position)\r\n\r\n    if (circleInfo) {\r\n      domain.command.setSelectedIndex(circleInfo.index)\r\n      domain.command.updateTooltips({\r\n        type: 'show-tips',\r\n        index: circleInfo.index,\r\n        circle: circleInfo.circle,\r\n        pageX: e.pageX,\r\n        pageY: e.pageY,\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleLeftClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    if (tooltipsState.type !== 'default') {\r\n      return\r\n    }\r\n\r\n    const position = { x: e.pageX, y: e.pageY }\r\n    const circleInfo = getCircleInfo(position)\r\n\r\n    if (!circleInfo) {\r\n      domain.command.draw({ position, diameter: 30 })\r\n    }\r\n  }\r\n\r\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    if (tooltipsState.type !== 'default') {\r\n      return\r\n    }\r\n\r\n    const position = { x: e.pageX, y: e.pageY }\r\n    const circleInfo = getCircleInfo(position)\r\n\r\n    if (circleInfo) {\r\n      domain.command.setSelectedIndex(circleInfo.index)\r\n    } else {\r\n      domain.command.setSelectedIndex(-1)\r\n    }\r\n  }\r\n\r\n  const handleOpenSlider = () => {\r\n    if (tooltipsState.type === 'show-tips') {\r\n      domain.command.updateTooltips({\r\n        type: 'open-slider',\r\n        index: tooltipsState.index,\r\n        circle: tooltipsState.circle,\r\n        pageX: tooltipsState.pageX,\r\n        pageY: tooltipsState.pageY,\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleCloseSlider = () => {\r\n    console.log('handleCloseSlider')\r\n    domain.command.updateTooltips({\r\n      type: 'default',\r\n    })\r\n  }\r\n\r\n  const handleAdust = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = parseInt(event.target.value, 10)\r\n\r\n    if (selectedCircleInfo && !isNaN(value)) {\r\n      domain.command.adjust({\r\n        index: selectedCircleInfo.index,\r\n        diameter: value,\r\n      })\r\n    }\r\n  }\r\n\r\n  console.log('tooltipsState', tooltipsState)\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        border: '1px solid #eaeaea',\r\n        boxSizing: 'border-box',\r\n        padding: 10,\r\n      }}\r\n    >\r\n      <h2>Circle Drawer</h2>\r\n      <div\r\n        style={{\r\n          width: 400,\r\n          textAlign: 'center',\r\n          padding: 10,\r\n        }}\r\n      >\r\n        <button\r\n          onClick={() => domain.command.undo()}\r\n          style={{\r\n            margin: '0 10px',\r\n          }}\r\n          disabled={!canUndo}\r\n        >\r\n          Undo\r\n        </button>\r\n        <button\r\n          onClick={() => domain.command.redo()}\r\n          style={{\r\n            margin: '0 10px',\r\n          }}\r\n          disabled={!canRedo}\r\n        >\r\n          Redo\r\n        </button>\r\n      </div>\r\n      <div\r\n        style={{\r\n          width: 400,\r\n          height: 400,\r\n          border: '1px solid #eaeaea',\r\n          boxSizing: 'border-box',\r\n          overflow: 'hidden',\r\n        }}\r\n        onClick={handleLeftClick}\r\n        onMouseMove={handleMouseMove}\r\n      >\r\n        {drawState.circles.map((circle, index) => {\r\n          return (\r\n            <div\r\n              key={circle.position.x + '-' + circle.position.y + '-' + circle.diameter}\r\n              style={{\r\n                position: 'absolute',\r\n                left: circle.position.x - circle.diameter / 2,\r\n                top: circle.position.y - circle.diameter / 2,\r\n                width: circle.diameter,\r\n                height: circle.diameter,\r\n                borderRadius: circle.diameter / 2,\r\n                border: '1px solid #666',\r\n                backgroundColor: selectedCircleInfo?.index === index ? '#eaeaea' : '',\r\n              }}\r\n              onContextMenu={handleRightClick}\r\n            ></div>\r\n          )\r\n        })}\r\n      </div>\r\n      {tooltipsState.type === 'show-tips' && (\r\n        <OuterClickWrapper\r\n          key=\"show-tips\"\r\n          style={{\r\n            position: 'absolute',\r\n            left: tooltipsState.pageX,\r\n            top: tooltipsState.pageY,\r\n            zIndex: 100,\r\n            background: '#fff',\r\n            border: '1px solid #666',\r\n            padding: 10,\r\n          }}\r\n          onOuterClick={handleCloseSlider}\r\n          onClick={handleOpenSlider}\r\n        >\r\n          Adjust Diameter\r\n        </OuterClickWrapper>\r\n      )}\r\n      {tooltipsState.type === 'open-slider' && (\r\n        <OuterClickWrapper\r\n          key=\"open-slider\"\r\n          style={{\r\n            position: 'absolute',\r\n            left: tooltipsState.pageX,\r\n            top: tooltipsState.pageY,\r\n            background: '#fff',\r\n            border: '1px solid #666',\r\n            zIndex: 100,\r\n            padding: 10,\r\n          }}\r\n          onOuterClick={handleCloseSlider}\r\n        >\r\n          <p>Adjust Diameter</p>\r\n          <div>\r\n            <input\r\n              type=\"range\"\r\n              value={selectedCircleInfo?.circle.diameter ?? ''}\r\n              min={1}\r\n              max={150}\r\n              onChange={handleAdust}\r\n            />\r\n          </div>\r\n        </OuterClickWrapper>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { Remesh } from 'remesh'\r\nimport { useRemeshDomain, useRemeshQuery } from 'remesh-react'\r\n\r\ntype CellContent =\r\n  | {\r\n      type: 'text'\r\n      text: string\r\n    }\r\n  | {\r\n      type: 'formula'\r\n      formula: string\r\n    }\r\n\r\ntype CellState = {\r\n  content: CellContent\r\n  isEditing: boolean\r\n}\r\n\r\nexport const Cells = Remesh.domain({\r\n  name: 'Cells',\r\n  inspectable: false,\r\n  impl: (domain) => {\r\n    const RowKeyListState = domain.state({\r\n      name: 'RowKeyListState',\r\n      default: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].map(String),\r\n    })\r\n\r\n    const ColumnKeyListState = domain.state({\r\n      name: 'ColumnKeyListState',\r\n      default: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'],\r\n    })\r\n\r\n    const CellState = domain.state({\r\n      name: 'CellState',\r\n      impl: (_: string): CellState => {\r\n        return {\r\n          content: {\r\n            type: 'text',\r\n            text: '',\r\n          },\r\n          isEditing: false,\r\n        }\r\n      },\r\n    })\r\n\r\n    const cell = domain.query({\r\n      name: 'CellQuery',\r\n      impl: ({ get }, key: string) => {\r\n        const state = get(CellState(key))\r\n\r\n        if (state.content.type === 'text') {\r\n          return {\r\n            type: 'text' as const,\r\n            isEditing: state.isEditing,\r\n            content: state.content.text,\r\n            displayContent: state.content.text,\r\n          }\r\n        }\r\n\r\n        if (state.content.type === 'formula') {\r\n          const evaluate = compile(state.content.formula)\r\n          const getCellValue = (cellKey: string) => {\r\n            return Number(get(cell(cellKey)).displayContent)\r\n          }\r\n\r\n          return {\r\n            type: 'formula' as const,\r\n            isEditing: state.isEditing,\r\n            content: state.content.formula,\r\n            displayContent: evaluate(getCellValue),\r\n          }\r\n        }\r\n\r\n        throw new Error('Unknown cell type')\r\n      },\r\n    })\r\n\r\n    const selectCell = domain.command({\r\n      name: 'selectCell',\r\n      impl: ({ get }, key: string) => {\r\n        const state = get(CellState(key))\r\n        return CellState(key).new({\r\n          content: state.content,\r\n          isEditing: true,\r\n        })\r\n      },\r\n    })\r\n\r\n    const unselectCell = domain.command({\r\n      name: 'unselectCell',\r\n      impl: ({ get }, key: string) => {\r\n        const state = get(CellState(key))\r\n        return CellState(key).new({\r\n          content: state.content,\r\n          isEditing: false,\r\n        })\r\n      },\r\n    })\r\n\r\n    const setCellContent = domain.command({\r\n      name: 'setCellContent',\r\n      impl: ({ get }, { key, input }: { key: string; input: string }) => {\r\n        const state = get(CellState(key))\r\n\r\n        if (input.startsWith('=')) {\r\n          return CellState(key).new({\r\n            content: {\r\n              type: 'formula',\r\n              formula: input,\r\n            },\r\n            isEditing: state.isEditing,\r\n          })\r\n        }\r\n\r\n        return CellState(key).new({\r\n          content: {\r\n            type: 'text',\r\n            text: input,\r\n          },\r\n          isEditing: state.isEditing,\r\n        })\r\n      },\r\n    })\r\n\r\n    return {\r\n      query: {\r\n        cell: cell,\r\n        columnKeyList: ColumnKeyListState.query,\r\n        rowKeyList: RowKeyListState.query,\r\n      },\r\n      command: {\r\n        selectCell,\r\n        unselectCell,\r\n        setCellContent,\r\n      },\r\n    }\r\n  },\r\n})\r\n\r\nexport const CellsApp = () => {\r\n  const cells = useRemeshDomain(Cells())\r\n  const columnKeyList = useRemeshQuery(cells.query.columnKeyList())\r\n  const rowKeyList = useRemeshQuery(cells.query.rowKeyList())\r\n\r\n  return (\r\n    <div>\r\n      <h2>Cells</h2>\r\n      <table\r\n        style={{\r\n          borderCollapse: 'collapse',\r\n          border: '1px solid #bbb',\r\n          textAlign: 'center',\r\n        }}\r\n      >\r\n        <thead>\r\n          <tr\r\n            style={{\r\n              backgroundColor: '#f6f6f6',\r\n            }}\r\n          >\r\n            <th style={{ width: 30, display: 'block' }}></th>\r\n            {columnKeyList.map((key) => (\r\n              <th\r\n                key={key}\r\n                style={{\r\n                  maxWidth: 80,\r\n                  border: '1px solid #bbb',\r\n                }}\r\n              >\r\n                {key}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {rowKeyList.map((rowKey) => {\r\n            return (\r\n              <tr key={rowKey}>\r\n                <RowView rowKey={rowKey} columnKeyList={columnKeyList} />\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n\r\ntype RowViewProps = {\r\n  rowKey: string\r\n  columnKeyList: string[]\r\n}\r\n\r\nconst RowView = ({ columnKeyList, rowKey }: RowViewProps) => {\r\n  const cells = useRemeshDomain(Cells())\r\n\r\n  return (\r\n    <>\r\n      <td\r\n        style={{\r\n          width: 30,\r\n          border: '1px solid #bbb',\r\n          backgroundColor: '#f6f6f6',\r\n        }}\r\n      >\r\n        {rowKey}\r\n      </td>\r\n      {columnKeyList.map((columnKey) => {\r\n        const cellKey = `${columnKey}${rowKey}`\r\n        return (\r\n          <td\r\n            key={cellKey}\r\n            style={{\r\n              maxWidth: 80,\r\n              minWidth: 80,\r\n              border: '1px solid #bbb',\r\n              overflow: 'hidden',\r\n            }}\r\n            onClick={(event) => {\r\n              if (event.target instanceof HTMLInputElement) {\r\n                return\r\n              }\r\n              cells.command.selectCell(cellKey)\r\n            }}\r\n          >\r\n            <CellView cellKey={cellKey} />\r\n          </td>\r\n        )\r\n      })}\r\n    </>\r\n  )\r\n}\r\n\r\nconst CellView = ({ cellKey }: { cellKey: string }) => {\r\n  const cells = useRemeshDomain(Cells())\r\n  const cell = useRemeshQuery(cells.query.cell(cellKey))\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    cells.command.setCellContent({ key: cellKey, input: e.target.value })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {cell.isEditing && (\r\n        <input\r\n          style={{\r\n            width: '100%',\r\n            height: '100%',\r\n            backgroundColor: 'transparent',\r\n            boxSizing: 'border-box',\r\n            textAlign: 'center',\r\n          }}\r\n          value={cell.content}\r\n          onChange={handleChange}\r\n          onBlur={() => {\r\n            if (cell.isEditing) {\r\n              cells.command.unselectCell(cellKey)\r\n            }\r\n          }}\r\n          autoFocus\r\n        />\r\n      )}\r\n\r\n      {!cell.isEditing && cell.displayContent}\r\n    </>\r\n  )\r\n}\r\n\r\nconst compile = (formula: string) => {\r\n  return (get: Function) => {\r\n    try {\r\n      const expression = formula.slice(1).replace(/\\w\\d+/g, (matched) => {\r\n        return `get('${matched}')`\r\n      })\r\n\r\n      const fn = new Function('get', `return (${expression}).toString()`)\r\n\r\n      return fn(get)\r\n    } catch {\r\n      return '-'\r\n    }\r\n  }\r\n}\r\n","import React, { StrictMode } from 'react'\r\nimport * as ReactDOMClient from 'react-dom/client'\r\n\r\nimport { Remesh } from 'remesh'\r\n\r\nimport { RemeshRoot } from 'remesh-react'\r\n\r\nimport { RemeshReduxDevtools } from 'remesh-redux-devtools'\r\nimport { RemeshLogger } from 'remesh-logger'\r\n\r\nimport { CounterApp } from './Counter'\r\nimport { TemperatureConverterApp } from './TemperatureConverter'\r\nimport { FlightBookerApp } from './FlightBooker'\r\nimport { TimerApp } from './Timer'\r\nimport { CRUDApp } from './CRUD'\r\nimport { CircleDrawerApp } from './CircleDrawer'\r\nimport { CellsApp } from './Cells'\r\n\r\nconst Root = () => {\r\n  return (\r\n    <div>\r\n      <h1>7GUIs in React/Remesh/TypeScript</h1>\r\n      <p>This is a live version of an implementation (source) of 7GUIs with React, TypeScript and Remesh.</p>\r\n      <hr />\r\n      <CounterApp />\r\n      <hr />\r\n      <TemperatureConverterApp />\r\n      <hr />\r\n      <FlightBookerApp />\r\n      <hr />\r\n      <TimerApp />\r\n      <hr />\r\n      <CRUDApp />\r\n      <hr />\r\n      <CircleDrawerApp />\r\n      <hr />\r\n      <CellsApp />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst container = document.getElementById('root')\r\n\r\nif (container) {\r\n  const root = ReactDOMClient.createRoot(container)\r\n  const store = Remesh.store({\r\n    inspectors: [RemeshReduxDevtools(), RemeshLogger()],\r\n  })\r\n\r\n  root.render(\r\n    <StrictMode>\r\n      <RemeshRoot store={store}>\r\n        <Root />\r\n      </RemeshRoot>\r\n    </StrictMode>,\r\n  )\r\n}\r\n"],"names":["useRef","useEffect","ReactDOMClient.createRoot","StrictMode"],"mappings":"s3BAQA,KAAM,IAAU,EAAO,OAAO,CAC5B,KAAM,UACN,KAAM,AAAC,GAAW,CACV,KAAA,GAAe,EAAO,MAAM,CAChC,KAAM,eACN,QAAS,CAAA,CACV,EAEK,EAAQ,EAAO,QAAQ,CAC3B,KAAM,eACN,KAAM,CAAC,CAAE,SAAU,CACX,KAAA,GAAQ,EAAI,EAAA,CAAc,EAChC,MAAO,GAAa,EAAE,IAAI,EAAQ,CAAC,CACrC,CAAA,CACD,EAEM,MAAA,CACL,MAAO,CACL,MAAO,EAAa,KACtB,EACA,QAAS,CACP,OACF,CAAA,CAEJ,CACF,CAAC,EAEY,GAAa,IAAM,CACxB,KAAA,GAAU,EAAgB,GAAA,CAAS,EACnC,EAAQ,EAAe,EAAQ,MAAM,MAAO,CAAA,EAE5C,EAAc,IAAM,CACxB,EAAQ,QAAQ,OAAM,EAGxB,MACG,GAAA,cAAA,MAAA,CACC,MAAO,CACL,MAAO,IACP,OAAQ,oBACR,UAAW,aACX,QAAS,EACX,CAAA,EAEC,EAAA,cAAA,KAAA,KAAG,SAAO,EACV,EAAA,cAAA,QAAA,CAAM,KAAK,SAAS,SAAQ,GAAC,MAAO,CAAA,CAAO,EAC3C,EAAA,cAAA,QAAA,KACE,EAAA,cAAA,SAAA,CAAO,QAAS,CAAA,EAAa,QAAM,EAAU,GAChD,CACF,CAEJ,ECtDM,GAAuB,EAAO,OAAO,CACzC,KAAM,uBACN,KAAM,AAAC,GAAW,CACV,KAAA,GAAe,EAAO,MAAM,CAChC,KAAM,eACN,QAAS,EAAA,CACV,EAEK,EAAkB,EAAO,MAAM,CACnC,KAAM,kBACN,QAAS,EAAA,CACV,EAEK,EAAY,EAAO,QAAQ,CAC/B,KAAM,YACN,KAAM,IACG,CAAC,IAAe,IAAI,EAAE,EAAG,IAAkB,IAAI,EAAE,CAAC,CAC3D,CACD,EAEK,EAAgB,EAAO,QAAQ,CACnC,KAAM,gBACN,KAAM,CAAC,GAAI,IAAkB,CAC3B,GAAI,IAAU,GACZ,MAAO,GAAU,EAGb,KAAA,GAAU,WAAW,CAAK,EAE5B,GAAA,OAAO,MAAM,CAAO,EACf,MAAA,GAAe,EAAA,IAAI,CAAK,EAG3B,KAAA,GAAa,EAAW,GAAI,GAAK,GAEhC,MAAA,CACL,EAAe,EAAA,IAAI,CAAK,EACxB,IAAkB,IAAI,EAAW,UAAU,CAAA,CAE/C,CAAA,CACD,EAEK,EAAmB,EAAO,QAAQ,CACtC,KAAM,mBACN,KAAM,CAAC,GAAI,IAAkB,CAC3B,GAAI,IAAU,GACZ,MAAO,GAAU,EAGb,KAAA,GAAa,WAAW,CAAK,EAE/B,GAAA,OAAO,MAAM,CAAU,EAClB,MAAA,GAAkB,EAAA,IAAI,CAAK,EAG9B,KAAA,GAAwB,GAAA,IAAW,GAAA,GAElC,MAAA,CACL,IAAe,IAAI,EAAQ,UAAU,EACrC,EAAkB,EAAA,IAAI,CAAK,CAAA,CAE/B,CAAA,CACD,EAEM,MAAA,CACL,MAAO,CACL,QAAS,EAAa,MACtB,WAAY,EAAgB,KAC9B,EACA,QAAS,CACP,gBACA,kBACF,CAAA,CAEJ,CACF,CAAC,EAEY,GAA0B,IAAM,CACrC,KAAA,GAAuB,EAAgB,GAAA,CAAsB,EAC7D,EAAU,EAAe,EAAqB,MAAM,QAAS,CAAA,EAC7D,EAAa,EACjB,EAAqB,MAAM,WAC7B,CAAA,EAEM,EAAgB,AAAC,GAA+C,CACpE,EAAqB,QAAQ,cAAc,EAAM,OAAO,KAAK,CAAA,EAGzD,EAAmB,AAAC,GAA+C,CACvE,EAAqB,QAAQ,iBAAiB,EAAM,OAAO,KAAK,CAAA,EAGlE,MACG,GAAA,cAAA,MAAA,CACC,MAAO,CACL,OAAQ,oBACR,UAAW,aACX,QAAS,EACX,CAAA,kBAEC,KAAG,KAAA,uBAAqB,EACzB,EAAA,cAAC,WACE,EAAA,cAAA,QAAA,CAAM,KAAK,OAAO,MAAO,EAAS,SAAU,CAAA,CAAe,EAC3D,EAAA,cAAA,QAAA,CAAM,QAAQ,EAAG,EAAA,SAAO,EAAQ,IAChC,EAAA,cAAA,QAAA,CAAM,KAAK,OAAO,MAAO,EAAY,SAAU,CAAA,CAAkB,EACjE,EAAA,cAAA,QAAA,CAAM,QAAQ,EAAA,EAAG,YAAU,CAC9B,CACF,CAEJ,ECrGM,EAAU,AAAC,GAAsB,CAC/B,KAAA,GAAO,EAAU,MAAM,GAAG,EAE5B,GAAA,EAAK,SAAW,EACX,MAAA,MAGH,KAAA,GAAO,GAAI,MAAK,GAAG,EAAK,MAAM,EAAK,MAAM,EAAK,IAAI,EAEpD,MAAA,GAAK,SAAS,IAAM,eACf,KAGF,CACT,EAEM,EAAc,AAAC,GAAe,CAClC,KAAM,GAAO,EAAK,mBAAmB,EAAE,MAAM,GAAG,EAEhD,MAAO,GAAG,EAAK,MAAM,EAAK,MAAM,EAAK,IACvC,EAEM,GAAc,CAAC,EAAa,IAC5B,EAAM,YAAA,IAAkB,EAAM,cACzB,EAAM,YAAA,EAAgB,EAAM,YAAY,EAG7C,EAAM,SAAA,IAAe,EAAM,WACtB,EAAM,SAAA,EAAa,EAAM,SAAS,EAGpC,EAAM,QAAA,EAAY,EAAM,QAAQ,EAGnC,GAAe,EAAO,OAAO,CACjC,KAAM,eACN,KAAM,AAAC,GAAW,CACV,KAAA,GAAc,EAAO,MAA0B,CACnD,KAAM,cACN,QAAS,SAAA,CACV,EAEK,EAAsB,EAAO,MAAM,CACvC,KAAM,sBACN,QAAS,EAAY,GAAI,KAAM,CAAA,CAChC,EAEK,EAAoB,EAAO,MAAM,CACrC,KAAM,oBACN,QAAS,EAAY,GAAI,KAAM,CAAA,CAChC,EAEK,EAAiB,EAAO,MAAM,CAClC,KAAM,iBACN,KAAM,CAAC,CAAE,SAAU,CACX,KAAA,GAAiB,EAAI,EAAA,CAAqB,EAChD,MAAO,GAAQ,CAAc,CAC/B,CAAA,CACD,EAEK,EAAe,EAAO,MAAM,CAChC,KAAM,eACN,KAAM,CAAC,CAAE,SAAU,CACX,KAAA,GAAe,EAAI,EAAA,CAAmB,EAC5C,MAAO,GAAQ,CAAY,CAC7B,CAAA,CACD,EAEK,EAAe,EAAO,QAAQ,CAClC,KAAM,eACN,KAAM,CAAC,GAAI,IACF,EAAc,EAAA,IAAI,CAAM,CACjC,CACD,EAEK,EAAkB,EAAO,QAAQ,CACrC,KAAM,kBACN,KAAM,CAAC,GAAI,IACF,EAAsB,EAAA,IAAI,CAAS,CAC5C,CACD,EAEK,EAAgB,EAAO,QAAQ,CACnC,KAAM,gBACN,KAAM,CAAC,GAAI,IACF,EAAoB,EAAA,IAAI,CAAS,CAC1C,CACD,EA6BM,MAAA,CACL,MAAO,CACL,OA7BW,EAAO,MAAM,CAC1B,KAAM,cACN,KAAM,CAAC,CAAE,SAA8B,CAC/B,KAAA,GAAS,EAAI,EAAA,CAAa,EAC1B,EAAY,EAAI,EAAA,CAAgB,EAChC,EAAU,EAAI,EAAA,CAAc,EAE5B,EAAkB,AAAE,EAAY,QAAU,UAC1C,EAAgB,IAAW,SAAY,AAAE,EAAU,QAAU,UAAa,WAE1E,EACJ,IAAW,UACP,AAAE,EACA,UACA,WACF,CAAC,CAAC,GAAa,CAAC,CAAC,GAAW,GAAY,EAAW,CAAO,GAAK,EAC/D,UACA,WAEC,MAAA,CACL,UAAW,EACX,QAAS,EACT,WAAY,CAAA,CAEhB,CAAA,CACD,EAKG,OAAQ,EAAY,MACpB,UAAW,EACX,QAAS,EACT,eAAgB,EAAoB,MACpC,aAAc,EAAkB,KAClC,EACA,QAAS,CACP,eACA,kBACA,eACF,CAAA,CAEJ,CACF,CAAC,EAEY,GAAkB,IAAM,CAC7B,KAAA,GAAe,EAAgB,GAAA,CAAc,EAC7C,EAAS,EAAe,EAAa,MAAM,OAAQ,CAAA,EACnD,EAAS,EAAe,EAAa,MAAM,OAAQ,CAAA,EAEnD,EAAiB,EAAe,EAAa,MAAM,eAAgB,CAAA,EACnE,EAAe,EAAe,EAAa,MAAM,aAAc,CAAA,EAE/D,EAAqB,AAAC,GAAgD,CAC1E,EAAa,QAAQ,aAAa,EAAM,OAAO,KAA2B,CAAA,EAGtE,EAAwB,AAAC,GAA+C,CAC5E,EAAa,QAAQ,gBAAgB,EAAM,OAAO,KAAK,CAAA,EAGnD,EAAsB,AAAC,GAA+C,CAC1E,EAAa,QAAQ,cAAc,EAAM,OAAO,KAAK,CAAA,EAGjD,EAAwB,IAAM,CAC9B,AAAA,EAAO,aAAe,WACxB,AACE,MADF,AAAI,IAAW,UACP,uCAAuC,IAEvC,sCAAsC,QAAqB,GAFJ,CAIjE,EAGF,MACG,GAAA,cAAA,MAAA,CACC,MAAO,CACL,MAAO,IACP,OAAQ,oBACR,UAAW,aACX,QAAS,EACX,CAAA,kBAEC,KAAG,KAAA,eAAa,EACjB,EAAA,cAAC,WACE,EAAA,cAAA,SAAA,CAAO,MAAO,EAAQ,SAAU,CAAA,EAC9B,EAAA,cAAA,SAAA,CAAO,MAAM,SAAU,EAAA,gBAAc,EACrC,EAAA,cAAA,SAAA,CAAO,MAAM,QAAA,EAAS,eAAa,CACtC,CACF,EACA,EAAA,cAAC,WACE,EAAA,cAAA,QAAA,CACC,KAAK,OACL,MAAO,CACL,gBAAiB,EAAO,YAAc,UAAY,MAAQ,EAC5D,EACA,MAAO,EACP,SAAU,CAAA,CACZ,CACF,EACC,EAAA,cAAA,MAAA,KACE,EAAA,cAAA,QAAA,CACC,KAAK,OACL,MAAO,CACL,gBAAiB,EAAO,UAAY,UAAY,MAAQ,EAC1D,EACA,SAAU,EAAO,UAAY,WAC7B,MAAO,EACP,SAAU,CAAA,CACZ,CACF,EACC,EAAA,cAAA,MAAA,KACE,EAAA,cAAA,SAAA,CAAO,SAAU,EAAO,aAAe,WAAY,QAAS,CAAA,EAAuB,MAEpF,CACF,CACF,CAEJ,EC3MM,GAAQ,EAAO,OAAO,CAC1B,KAAM,QACN,YAAa,GACb,KAAM,AAAC,GAAW,CACV,KAAA,GAAgB,EAAO,MAAM,CACjC,KAAM,WACN,QAAS,IAAA,CACV,EAEK,EAAe,EAAO,MAAM,CAChC,KAAM,UACN,QAAS,CAAA,CACV,EAEK,EAAa,EAAO,MAAM,CAC9B,KAAM,YAAA,CACP,EAEK,EAAY,EAAO,MAAM,CAC7B,KAAM,WAAA,CACP,EAEK,EAAgB,EAAO,QAAQ,CACnC,KAAM,gBACN,KAAM,CAAC,CAAE,OAAO,IAAsB,CAC9B,KAAA,GAAW,EAAI,EAAA,CAAe,EAC9B,EAAU,EAAI,EAAA,CAAc,EAElC,MAAI,GAAU,EACL,EAAU,EAGZ,EAAa,EAAE,IAAI,EAAU,CAAS,CAC/C,CAAA,CACD,EAEK,EAAiB,EAAO,QAAQ,CACpC,KAAM,iBACN,KAAM,CAAC,CAAE,OAAO,IAAwB,CAChC,KAAA,GAAU,EAAI,EAAA,CAAc,EAElC,MAAI,GAAc,EACT,CAAC,EAAc,EAAE,IAAI,CAAW,EAAG,GAAY,EAGjD,EAAgB,EAAA,IAAI,CAAW,CACxC,CAAA,CACD,EAEK,EAAe,EAAO,QAAQ,CAClC,KAAM,eACN,KAAM,CAAC,KACE,CAAC,EAAa,EAAE,IAAI,CAAC,EAAG,GAAY,CAC7C,CACD,EAED,SAAO,SAAS,CACd,KAAM,iBACN,KAAM,CAAC,CAAE,eAAgB,CAMvB,KAAM,GAAQ,AALC,EACb,EAAU,CAAU,EAAE,KAAK,EAAM,CAAC,CAAC,EACnC,EAAU,CAAS,EAAE,KAAK,EAAM,CAAC,CAAC,CACpC,EAAE,KAAK,EAAA,CAAsB,EAER,KACnB,EAAU,AAAC,GACL,IAAW,EACN,EAEF,EAAkB,EAAA,KACvB,IACA,EAAI,CAAC,CAAC,EAAG,KAAO,EAAE,QAAU,EAAE,OAAO,EACrC,EAAI,AAAC,GAAc,EAAc,CAAS,CAAC,EAC3C,EAAU,EAAU,CAAS,CAAC,CAChC,CACD,CACH,EAEA,MAAO,GAAM,EAAO,EAAG,EAAA,CAAY,CAAC,CACtC,CAAA,CACD,EAEM,CACL,MAAO,CACL,SAAU,EAAc,MACxB,QAAS,EAAa,KACxB,EACA,QAAS,CACP,eACA,gBACF,CAAA,CAEJ,CACF,CAAC,EAEY,GAAW,IAAM,CACtB,KAAA,GAAQ,EAAgB,GAAA,CAAO,EAC/B,EAAU,EAAe,EAAM,MAAM,QAAS,CAAA,EAC9C,EAAW,EAAe,EAAM,MAAM,SAAU,CAAA,EAEhD,EAAuB,AAAC,GAA+C,CAC3E,KAAM,GAAW,SAAS,EAAM,OAAO,MAAO,EAAE,EAC5C,AAAC,MAAM,CAAQ,GACX,EAAA,QAAQ,eAAe,CAAQ,CACvC,EAGI,EAAqB,IAAM,CAC/B,EAAM,QAAQ,cAAa,EAG7B,MACG,GAAA,cAAA,MAAA,CACC,MAAO,CACL,MAAO,IACP,OAAQ,oBACR,UAAW,aACX,QAAS,EACX,CAAA,EAEC,EAAA,cAAA,KAAA,KAAG,OAAK,EACR,EAAA,cAAA,MAAA,CAAI,MAAO,CAAE,QAAS,MAAO,CAAA,EAC3B,EAAA,cAAA,QAAA,CAAM,MAAO,CAAE,YAAa,GAAI,WAAY,QAAS,CAAG,EAAA,gBAEzD,EACC,EAAA,cAAA,MAAA,CAAI,MAAO,CAAE,MAAO,MAAO,CAAA,EACzB,EAAA,cAAA,OAAA,CACC,MAAO,CACL,QAAS,eACT,OAAQ,GACR,WAAY,QACZ,MAAO,GAAG,KAAK,IAAI,EAAU,EAAU,CAAC,EAAI,OAC5C,cAAe,SACf,aAAc,CAChB,CACD,CAAA,CACH,CACF,kBACC,MACE,KAAA,EAAU,EACK,GAAA,KAAM,QAAQ,CAAC,KAChB,KAAM,QAAQ,CAAC,EAAE,GAElC,EACC,EAAA,cAAA,MAAA,CAAI,MAAO,CAAE,QAAS,MAAO,CAAA,EAC3B,EAAA,cAAA,QAAA,CAAM,MAAO,CAAE,MAAO,IAAK,YAAa,EAAG,CAAG,EAAA,WAAS,EACvD,EAAA,cAAA,QAAA,CACC,MAAO,CAAE,MAAO,MAAO,EACvB,KAAK,QACL,IAAK,EACL,IAAK,IACL,MAAO,EACP,SAAU,CAAA,CACZ,CACF,EACC,EAAA,cAAA,MAAA,KACE,EAAA,cAAA,SAAA,CAAO,MAAO,CAAE,MAAO,OAAQ,EAAG,QAAS,CAAA,EAAoB,aAEhE,CACF,CACF,CAEJ,EClLa,EAAoB,AAAC,GAAkC,CAC5D,KAAiC,KAA/B,iBAA+B,EAAd,IAAc,EAAd,CAAjB,iBACF,EAAeA,iBAA8B,IAAI,EAEvDC,SAAAA,QAAAA,UAAU,IAAM,CACR,KAAA,GAAc,AAAC,GAAsB,OACrC,GAAA,CAAE,MAAM,SAAN,QAAuB,eAC3B,OAKF,AAAI,AAFiB,CAAC,CAAe,GAAA,SAAW,CAAC,EAAa,QAAQ,SAAS,EAAM,MAAc,IAGjG,YAAe,GACjB,EAGO,gBAAA,iBAAiB,QAAS,EAAa,EAAK,EAC9C,IAAM,CACF,SAAA,oBAAoB,QAAS,EAAa,EAAK,CAAA,CAE5D,EAAG,CAAE,CAAA,EAEG,EAAA,cAAA,MAAA,GAAI,IAAK,GAAkB,EAAW,CAChD,ECTa,GAAO,EAAO,OAAO,CAChC,KAAM,OACN,KAAM,AAAC,GAAW,CAChB,GAAI,GAAU,EAER,KAAA,GAAiB,GAAqB,EAAQ,CAClD,KAAM,OACN,IAAK,AAAC,GAAS,EAAK,EAAA,CACrB,EAEK,EAAoB,EAAO,MAAM,CACrC,KAAM,eACN,QAAS,EAAA,CACV,EAEK,EAAqB,EAAO,QAAQ,CACxC,KAAM,qBACN,KAAM,CAAC,GAAI,IACF,EAAoB,EAAA,IAAI,CAAM,CACvC,CACD,EAEK,EAAe,EAAO,MAAY,CACtC,KAAM,UACN,QAAS,CACP,KAAM,GACN,QAAS,EACX,CAAA,CACD,EAEK,EAAgB,EAAO,QAAQ,CACnC,KAAM,gBACN,KAAM,CAAC,CAAE,OAAO,IAAwB,CAChC,KAAA,GAAc,EAAI,EAAA,CAAc,EAC/B,MAAA,KAAe,IAAI,OACrB,GACA,EACJ,CACH,CAAA,CACD,EAEK,EAAgB,EAAO,MAAuB,CAClD,KAAM,WACN,QAAS,IAAA,CACV,EAEK,EAAa,EAAO,QAAQ,CAChC,KAAM,SACN,KAAM,CAAC,CAAE,OAAO,IAAgC,CACxC,KAAA,GAAkB,EAAI,EAAA,CAAe,EAE3C,GAAI,IAAiB,KACnB,MAAI,KAAoB,KACf,KAEA,EAAgB,EAAA,IAAI,IAAI,EAI/B,GAAA,GAAmB,EAAgB,KAAO,EACrC,MAAA,GAAgB,EAAA,IAAI,IAAI,EAGjC,KAAM,GAAa,EAAI,EAAe,MAAM,KAAK,CAAY,CAAC,EAEvD,MAAA,GAAgB,EAAA,IAAI,CAAU,CACvC,CAAA,CACD,EAEK,EAAqB,EAAO,QAAQ,CACxC,KAAM,qBACN,KAAM,CAAC,CAAE,OAAO,IAAwB,CAChC,KAAA,GAAW,EAAI,EAAA,CAAe,EAEpC,MAAI,KAAa,KACR,GAGF,IAAgB,IAAI,OACtB,GACA,EACJ,CACH,CAAA,CACD,EAEK,EAAe,EAAO,MAAM,CAChC,KAAM,oBACN,KAAM,CAAC,CAAE,SAAU,CACX,KAAA,GAAe,EAAI,EAAA,CAAmB,EACtC,EAAW,EAAI,EAAe,MAAM,SAAU,CAAA,EAEpD,MAAI,KAAiB,GACZ,EAGF,EAAS,OAAO,AAAC,GAAS,EAAK,QAAQ,WAAW,CAAY,CAAC,CACxE,CAAA,CACD,EAEK,EAAe,EAAO,QAAQ,CAClC,KAAM,eACN,KAAM,CAAC,CAAE,SAAU,CACX,KAAA,GAAW,EAAI,EAAA,CAAe,EAEpC,MAAI,KAAa,KACR,GAGF,EAAe,QAAQ,WAAW,CAAQ,CACnD,CAAA,CACD,EAEK,EAAiB,EAAO,QAAQ,CACpC,KAAM,iBACN,KAAM,CAAC,CAAE,SAAU,CACX,KAAA,GAAU,EAAI,EAAA,CAAc,EAC5B,EAAU,GACd,GAAI,GAAG,OACJ,GAGL,MAAO,CAAC,EAAe,QAAQ,QAAQ,CAAO,EAAG,EAAc,CAAE,KAAM,GAAI,QAAS,EAAA,CAAI,CAAC,CAC3F,CAAA,CACD,EAEM,MAAA,CACL,MAAO,OACF,EAAe,OADb,CAEL,eACA,SAAU,EAAc,MACxB,aAAc,EAAkB,MAChC,QAAS,EAAa,KACxB,GACA,QAAS,OACJ,EAAe,SADX,CAEP,qBACA,aACA,gBACA,qBACA,iBACA,cACF,EAAA,CAEJ,CACF,CAAC,EAEY,GAAU,IAAM,CACrB,KAAA,GAAS,EAAgB,GAAA,CAAM,EAC/B,EAAe,EAAe,EAAO,MAAM,aAAc,CAAA,EACzD,EAAS,EAAe,EAAO,MAAM,aAAc,CAAA,EACnD,EAAU,EAAe,EAAO,MAAM,QAAS,CAAA,EAC/C,EAAW,EAAe,EAAO,MAAM,SAAU,CAAA,EAEjD,EAAqB,AAAC,GAA2C,CACrE,EAAO,QAAQ,mBAAmB,EAAE,OAAO,KAAK,CAAA,EAG5C,EAAe,AAAC,GAA0B,CACvC,EAAA,QAAQ,WAAW,CAAM,CAAA,EAG5B,EAAmB,AAAC,GAA2C,CACnE,AAAI,EACF,EAAO,QAAQ,mBAAmB,CAChC,KAAM,EAAE,OAAO,KAAA,CAChB,EAED,EAAO,QAAQ,cAAc,CAAE,KAAM,EAAE,OAAO,MAAO,CACvD,EAGI,EAAsB,AAAC,GAA2C,CACtE,AAAI,EACF,EAAO,QAAQ,mBAAmB,CAChC,QAAS,EAAE,OAAO,KAAA,CACnB,EAED,EAAO,QAAQ,cAAc,CAAE,QAAS,EAAE,OAAO,MAAO,CAC1D,EAGI,EAAe,IAAM,CACzB,AAAI,IAAa,MACf,EAAO,QAAQ,gBACjB,EAGI,EAAa,IAAM,CACvB,AAAI,GACF,EAAO,QAAQ,cACjB,EAGI,EAAe,IAAM,CACzB,AAAI,GACK,GAAA,QAAQ,WAAW,EAAS,EAAE,EAC9B,EAAA,QAAQ,WAAW,IAAI,EAChC,EAGF,MACG,GAAA,cAAA,EAAA,CACC,MAAO,CACL,MAAO,IACP,OAAQ,oBACR,UAAW,aACX,QAAS,EACX,EACA,aAAc,IAAM,CAClB,EAAa,IAAI,CACnB,CAAA,kBAEC,KAAG,KAAA,MAAI,EACR,EAAA,cAAC,WACE,EAAA,cAAA,QAAA,CAAM,QAAQ,EAAG,EAAA,eAAa,EAC9B,EAAA,cAAA,QAAA,CAAM,KAAK,OAAO,MAAO,EAAQ,SAAU,CAAoB,CAAA,CAClE,EACC,EAAA,cAAA,MAAA,CACC,MAAO,CACL,QAAS,MACX,CAAA,EAEC,EAAA,cAAA,MAAA,CACC,MAAO,CACL,MAAO,MACP,OAAQ,IACR,OAAQ,oBACR,SAAU,QACZ,CAAA,EAEC,EAAa,IAAI,AAAC,GAAS,CAC1B,KAAM,GAAW,EAAK,KAAO,KAAO,EAAK,QAEzC,MACG,GAAA,cAAA,MAAA,CACC,IAAK,EAAK,GACV,MAAO,CACL,WAAY,kBAAU,MAAO,EAAK,GAAK,OAAS,GAChD,MAAO,kBAAU,MAAO,EAAK,GAAK,QAAU,EAC9C,EACA,QAAS,IAAM,CACb,EAAa,EAAK,EAAE,CACtB,CAAA,EAEC,CACH,CAEH,CAAA,CACH,EACC,EAAA,cAAA,MAAA,CAAI,MAAO,CAAE,MAAO,MAAO,QAAS,EAAG,CAAA,kBACrC,MACC,KAAA,EAAA,cAAC,QAAM,KAAA,OAAK,EACX,EAAA,cAAA,QAAA,CAAM,KAAK,OAAO,MAAO,EAAW,EAAS,KAAO,EAAQ,KAAM,SAAU,CAAkB,CAAA,CACjG,EACC,EAAA,cAAA,MAAA,qBACE,QAAM,KAAA,UAAQ,EACd,EAAA,cAAA,QAAA,CAAM,KAAK,OAAO,MAAO,EAAW,EAAS,QAAU,EAAQ,QAAS,SAAU,CAAA,CAAqB,CAC1G,CACF,EAEA,EAAA,cAAC,WACE,EAAA,cAAA,SAAA,CAAO,SAAU,IAAa,KAAM,MAAO,CAAE,YAAa,EAAG,EAAG,QAAS,CAAc,EAAA,QAExF,EACC,EAAA,cAAA,SAAA,CAAO,SAAU,IAAa,KAAM,MAAO,CAAE,YAAa,EAAG,EAAG,QAAS,CAAY,EAAA,QAEtF,EACC,EAAA,cAAA,SAAA,CAAO,SAAU,IAAa,KAAM,MAAO,CAAE,YAAa,EAAG,EAAG,QAAS,CAAA,EAAc,QAExF,CACF,CACF,CACF,CAEJ,ECpOM,GAAe,EAAO,OAAO,CACjC,KAAM,eACN,KAAM,AAAC,GAAW,CACV,KAAA,GAAe,EAAO,MAAoB,CAC9C,KAAM,eACN,QAAS,CACP,MAAO,CAAC,EACR,aAAc,EAChB,CAAA,CACD,EAEK,EAAqB,EAAO,QAAQ,CACxC,KAAM,qBACN,KAAM,CAAC,CAAE,OAAO,IAA4B,CACpC,KAAA,GAAU,EAAI,EAAA,CAAc,EAE5B,EAAgB,EAAQ,MAAM,MAAM,EAAG,EAAQ,aAAe,CAAC,EAYjE,GAAA,EAAM,SAAW,gBAAiB,CAC9B,KAAA,GAAY,EAAc,EAAc,OAAS,GACvD,AAAI,EAAU,SAAW,iBAAmB,EAAU,QAAU,EAAM,OACpE,EAAc,IAAI,CAEtB,CAEA,KAAM,GAAW,CAAC,GAAG,EAAe,CAAK,EACnC,EAAW,EAAS,OAAS,EAE5B,MAAA,KAAe,IAAI,CACxB,MAAO,EACP,aAAc,CAAA,CACf,CACH,CAAA,CACD,EAEK,EAAY,EAAO,MAAiB,CACxC,KAAM,YACN,QAAS,CACP,QAAS,CAAC,CACZ,CAAA,CACD,EAEK,EAAO,EAAO,QAAQ,CAC1B,KAAM,OACN,KAAM,CAAC,CAAE,SAAU,CACX,KAAA,GAAU,EAAI,EAAA,CAAc,EAC5B,EAAU,EAAI,EAAA,CAAc,EAC5B,EAAW,EAAQ,aAAe,EAEpC,MAAA,CAAC,GAAW,EAAW,EAClB,CACL,EAAA,EAAY,IAAI,CACd,QAAS,CAAC,CAAA,CACX,EACD,EAAA,EAAe,IAAI,CACjB,MAAO,EAAQ,MACf,aAAc,EAAA,CACf,CAAA,EAIE,CACL,IAAY,IAAI,EAAQ,MAAM,GAAU,KAAK,EAC7C,EAAA,EAAe,IAAI,CACjB,MAAO,EAAQ,MACf,aAAc,CAAA,CACf,CAAA,CAEL,CAAA,CACD,EAEK,EAAO,EAAO,QAAQ,CAC1B,KAAM,OACN,KAAM,CAAC,CAAE,SAAU,CACX,KAAA,GAAU,EAAI,EAAA,CAAc,EAGlC,GAAI,CAFY,EAAI,EAAA,CAAc,EAGhC,MAAO,GAGH,KAAA,GAAW,EAAQ,aAAe,EAEjC,MAAA,CACL,IAAY,IAAI,EAAQ,MAAM,GAAU,KAAK,EAC7C,EAAA,EAAe,IAAI,CACjB,MAAO,EAAQ,MACf,aAAc,CAAA,CACf,CAAA,CAEL,CAAA,CACD,EAEK,EAAe,EAAO,MAAM,CAChC,KAAM,eACN,KAAM,CAAC,CAAE,SAEA,AADS,EAAI,EAAA,CAAc,EACnB,cAAgB,CACjC,CACD,EAEK,EAAe,EAAO,MAAM,CAChC,KAAM,eACN,KAAM,CAAC,CAAE,SAAU,CACX,KAAA,GAAU,EAAI,EAAA,CAAc,EAClC,MAAO,GAAQ,aAAe,EAAQ,MAAM,OAAS,CACvD,CAAA,CACD,EAEK,EAAqB,EAAO,MAAc,CAC9C,KAAM,qBACN,QAAS,EAAA,CACV,EAEK,EAAmB,EAAO,QAAQ,CACtC,KAAM,mBACN,KAAM,CAAC,GAAI,IACF,EAAqB,EAAA,IAAI,CAAK,CACvC,CACD,EAEK,EAA0B,EAAO,MAAM,CAC3C,KAAM,0BACN,KAAM,CAAC,CAAE,SAAU,CACX,KAAA,GAAQ,EAAI,EAAA,CAAoB,EAChC,EAAU,EAAI,EAAW,CAAA,EAAE,QAEjC,MAAI,KAAU,GACL,KAGF,CACL,QACA,OAAQ,EAAQ,EAAA,CAEpB,CAAA,CACD,EAEK,EAAO,EAAO,QAAQ,CAC1B,KAAM,OACN,KAAM,CAAC,CAAE,OAAO,IAAuB,CAErC,KAAM,GAAW,CACf,QAAS,CAAC,GAAG,AAFD,EAAI,EAAA,CAAW,EAER,QAAS,CAAE,SAAU,EAAO,SAAU,SAAU,EAAO,QAAA,CAAU,CAAA,EAE/E,MAAA,CACL,EAAY,EAAA,IAAI,CAAQ,EACxB,EAAmB,CACjB,OAAQ,aACR,MAAO,CAAA,CACR,CAAA,CAEL,CAAA,CACD,EAEK,EAAS,EAAO,QAAQ,CAC5B,KAAM,SACN,KAAM,CAAC,CAAE,OAAO,IAAyB,CAYvC,KAAM,GAAW,CACf,QAXc,AADF,EAAI,EAAA,CAAW,EACP,QAAQ,IAAI,CAAC,EAAQ,IACrC,IAAU,EAAO,MACZ,CACL,SAAU,EAAO,SACjB,SAAU,EAAO,QAAA,EAGd,CACR,CAGC,EAGK,MAAA,CACL,EAAY,EAAA,IAAI,CAAQ,EACxB,EAAmB,CACjB,OAAQ,gBACR,MAAO,EAAO,MACd,MAAO,CAAA,CACR,CAAA,CAEL,CAAA,CACD,EAEK,EAAgB,EAAO,MAAqB,CAChD,KAAM,gBACN,QAAS,CACP,KAAM,SACR,CAAA,CACD,EAEK,EAAiB,EAAO,QAAQ,CACpC,KAAM,iBACN,KAAM,CAAC,GAAI,IACF,EAAgB,EAAA,IAAI,CAAQ,CACrC,CACD,EAEM,MAAA,CACL,MAAO,CACL,aAAc,EAAa,MAC3B,UAAW,EAAU,MACrB,cAAe,EAAc,MAC7B,cAAe,EAAmB,MAClC,mBAAoB,EACpB,QAAS,EACT,QAAS,CACX,EACA,QAAS,CACP,OACA,SACA,iBACA,OACA,OACA,kBACF,CAAA,CAEJ,CACF,CAAC,EAEK,GAAmB,CAAC,EAAoB,IAA4B,CAClE,KAAA,CAAE,IAAG,KAAM,EACX,CAAE,WAAU,SAAU,GAAmB,EACzC,CAAE,EAAG,EAAS,EAAG,GAAY,EAC7B,EAAS,EAAW,EACpB,EAAK,EAAI,EACT,EAAK,EAAI,EAEf,MAAO,GAAK,EAAK,EAAK,EAAK,EAAS,CACtC,EAEa,GAAkB,IAAM,OAC7B,KAAA,GAAS,EAAgB,GAAA,CAAc,EACvC,EAAY,EAAe,EAAO,MAAM,UAAW,CAAA,EACnD,EAAgB,EAAe,EAAO,MAAM,cAAe,CAAA,EAC3D,EAAqB,EAAe,EAAO,MAAM,mBAAoB,CAAA,EACrE,EAAU,EAAe,EAAO,MAAM,QAAS,CAAA,EAC/C,EAAU,EAAe,EAAO,MAAM,QAAS,CAAA,EAE/C,EAAgB,AAAC,GAAuB,CAC5C,KAAM,GAAS,EAAU,QAAQ,KAAK,AAAC,GAC9B,GAAiB,EAAU,CAAM,CACzC,EAED,MAAK,GAME,CACL,MAHY,EAAU,QAAQ,QAAQ,CAAM,EAI5C,QAAA,EAPO,IAQT,EAGI,EAAmB,AAAC,GAAoD,CAC5E,EAAE,eAAe,EACjB,KAAM,GAAW,CAAE,EAAG,EAAE,MAAO,EAAG,EAAE,OAE9B,EAAa,EAAc,CAAQ,EAEzC,AAAI,GACK,GAAA,QAAQ,iBAAiB,EAAW,KAAK,EAChD,EAAO,QAAQ,eAAe,CAC5B,KAAM,YACN,MAAO,EAAW,MAClB,OAAQ,EAAW,OACnB,MAAO,EAAE,MACT,MAAO,EAAE,KAAA,CACV,EACH,EAGI,EAAkB,AAAC,GAAoD,CACvE,GAAA,EAAc,OAAS,UACzB,OAGF,KAAM,GAAW,CAAE,EAAG,EAAE,MAAO,EAAG,EAAE,OAGpC,AAAK,AAFc,EAAc,CAAQ,GAGvC,EAAO,QAAQ,KAAK,CAAE,WAAU,SAAU,GAAI,CAChD,EAGI,EAAkB,AAAC,GAAoD,CACvE,GAAA,EAAc,OAAS,UACzB,OAGF,KAAM,GAAW,CAAE,EAAG,EAAE,MAAO,EAAG,EAAE,OAC9B,EAAa,EAAc,CAAQ,EAEzC,AAAI,EACK,EAAA,QAAQ,iBAAiB,EAAW,KAAK,EAEzC,EAAA,QAAQ,iBAAiB,EAAE,CACpC,EAGI,EAAmB,IAAM,CACzB,AAAA,EAAc,OAAS,aACzB,EAAO,QAAQ,eAAe,CAC5B,KAAM,cACN,MAAO,EAAc,MACrB,OAAQ,EAAc,OACtB,MAAO,EAAc,MACrB,MAAO,EAAc,KAAA,CACtB,CACH,EAGI,EAAoB,IAAM,CAC9B,QAAQ,IAAI,mBAAmB,EAC/B,EAAO,QAAQ,eAAe,CAC5B,KAAM,SAAA,CACP,CAAA,EAGG,EAAc,AAAC,GAA+C,CAClE,KAAM,GAAQ,SAAS,EAAM,OAAO,MAAO,EAAE,EAE7C,AAAI,GAAsB,CAAC,MAAM,CAAK,GACpC,EAAO,QAAQ,OAAO,CACpB,MAAO,EAAmB,MAC1B,SAAU,CAAA,CACX,CACH,EAGM,eAAA,IAAI,gBAAiB,CAAa,EAGvC,EAAA,cAAA,MAAA,CACC,MAAO,CACL,OAAQ,oBACR,UAAW,aACX,QAAS,EACX,CAAA,EAEC,EAAA,cAAA,KAAA,KAAG,eAAa,EAChB,EAAA,cAAA,MAAA,CACC,MAAO,CACL,MAAO,IACP,UAAW,SACX,QAAS,EACX,CAAA,EAEC,EAAA,cAAA,SAAA,CACC,QAAS,IAAM,EAAO,QAAQ,KAAK,EACnC,MAAO,CACL,OAAQ,QACV,EACA,SAAU,CAAC,CACZ,EAAA,MAED,EACC,EAAA,cAAA,SAAA,CACC,QAAS,IAAM,EAAO,QAAQ,KAAK,EACnC,MAAO,CACL,OAAQ,QACV,EACA,SAAU,CAAC,CACZ,EAAA,MAED,CACF,EACC,EAAA,cAAA,MAAA,CACC,MAAO,CACL,MAAO,IACP,OAAQ,IACR,OAAQ,oBACR,UAAW,aACX,SAAU,QACZ,EACA,QAAS,EACT,YAAa,CAAA,EAEZ,EAAU,QAAQ,IAAI,CAAC,EAAQ,IAE3B,EAAA,cAAA,MAAA,CACC,IAAK,EAAO,SAAS,EAAI,IAAM,EAAO,SAAS,EAAI,IAAM,EAAO,SAChE,MAAO,CACL,SAAU,WACV,KAAM,EAAO,SAAS,EAAI,EAAO,SAAW,EAC5C,IAAK,EAAO,SAAS,EAAI,EAAO,SAAW,EAC3C,MAAO,EAAO,SACd,OAAQ,EAAO,SACf,aAAc,EAAO,SAAW,EAChC,OAAQ,iBACR,gBAAiB,kBAAoB,SAAU,EAAQ,UAAY,EACrE,EACA,cAAe,CAAA,CAChB,CAEJ,CACH,EACC,EAAc,OAAS,aACrB,EAAA,cAAA,EAAA,CACC,IAAI,YACJ,MAAO,CACL,SAAU,WACV,KAAM,EAAc,MACpB,IAAK,EAAc,MACnB,OAAQ,IACR,WAAY,OACZ,OAAQ,iBACR,QAAS,EACX,EACA,aAAc,EACd,QAAS,CAAA,EACV,iBAED,EAED,EAAc,OAAS,eACrB,EAAA,cAAA,EAAA,CACC,IAAI,cACJ,MAAO,CACL,SAAU,WACV,KAAM,EAAc,MACpB,IAAK,EAAc,MACnB,WAAY,OACZ,OAAQ,iBACR,OAAQ,IACR,QAAS,EACX,EACA,aAAc,CAAA,kBAEb,IAAE,KAAA,iBAAe,EAClB,EAAA,cAAC,WACE,EAAA,cAAA,QAAA,CACC,KAAK,QACL,MAAO,oBAAoB,OAAO,WAA3B,OAAuC,GAC9C,IAAK,EACL,IAAK,IACL,SAAU,CAAA,CACZ,CACF,CACF,CAEJ,CAEJ,EClfa,EAAQ,EAAO,OAAO,CACjC,KAAM,QACN,YAAa,GACb,KAAM,AAAC,GAAW,CACV,KAAA,GAAkB,EAAO,MAAM,CACnC,KAAM,kBACN,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CAAC,EAAE,IAAI,MAAM,CAAA,CACnD,EAEK,EAAqB,EAAO,MAAM,CACtC,KAAM,qBACN,QAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,CAAA,CAC3D,EAEK,EAAY,EAAO,MAAM,CAC7B,KAAM,YACN,KAAM,AAAC,GACE,EACL,QAAS,CACP,KAAM,OACN,KAAM,EACR,EACA,UAAW,EAAA,EAEf,CACD,EAEK,EAAO,EAAO,MAAM,CACxB,KAAM,YACN,KAAM,CAAC,CAAE,OAAO,IAAgB,CAC9B,KAAM,GAAQ,EAAI,EAAU,CAAG,CAAC,EAE5B,GAAA,EAAM,QAAQ,OAAS,OAClB,MAAA,CACL,KAAM,OACN,UAAW,EAAM,UACjB,QAAS,EAAM,QAAQ,KACvB,eAAgB,EAAM,QAAQ,IAAA,EAI9B,GAAA,EAAM,QAAQ,OAAS,UAAW,CACpC,KAAM,GAAW,GAAQ,EAAM,QAAQ,OAAO,EACxC,EAAe,AAAC,GACb,OAAO,EAAI,EAAK,CAAO,CAAC,EAAE,cAAc,EAG1C,MAAA,CACL,KAAM,UACN,UAAW,EAAM,UACjB,QAAS,EAAM,QAAQ,QACvB,eAAgB,EAAS,CAAY,CAAA,CAEzC,CAEM,KAAA,IAAI,OAAM,mBAAmB,CACrC,CAAA,CACD,EAEK,EAAa,EAAO,QAAQ,CAChC,KAAM,aACN,KAAM,CAAC,CAAE,OAAO,IAAgB,CAC9B,KAAM,GAAQ,EAAI,EAAU,CAAG,CAAC,EACzB,MAAA,GAAU,CAAG,EAAE,IAAI,CACxB,QAAS,EAAM,QACf,UAAW,EAAA,CACZ,CACH,CAAA,CACD,EAEK,EAAe,EAAO,QAAQ,CAClC,KAAM,eACN,KAAM,CAAC,CAAE,OAAO,IAAgB,CAC9B,KAAM,GAAQ,EAAI,EAAU,CAAG,CAAC,EACzB,MAAA,GAAU,CAAG,EAAE,IAAI,CACxB,QAAS,EAAM,QACf,UAAW,EAAA,CACZ,CACH,CAAA,CACD,EAEK,EAAiB,EAAO,QAAQ,CACpC,KAAM,iBACN,KAAM,CAAC,CAAE,OAAO,CAAE,MAAK,WAA4C,CACjE,KAAM,GAAQ,EAAI,EAAU,CAAG,CAAC,EAE5B,MAAA,GAAM,WAAW,GAAG,EACf,EAAU,CAAG,EAAE,IAAI,CACxB,QAAS,CACP,KAAM,UACN,QAAS,CACX,EACA,UAAW,EAAM,SAAA,CAClB,EAGI,EAAU,CAAG,EAAE,IAAI,CACxB,QAAS,CACP,KAAM,OACN,KAAM,CACR,EACA,UAAW,EAAM,SAAA,CAClB,CACH,CAAA,CACD,EAEM,MAAA,CACL,MAAO,CACL,OACA,cAAe,EAAmB,MAClC,WAAY,EAAgB,KAC9B,EACA,QAAS,CACP,aACA,eACA,gBACF,CAAA,CAEJ,CACF,CAAC,EAEY,GAAW,IAAM,CACtB,KAAA,GAAQ,EAAgB,EAAA,CAAO,EAC/B,EAAgB,EAAe,EAAM,MAAM,cAAe,CAAA,EAC1D,EAAa,EAAe,EAAM,MAAM,WAAY,CAAA,EAE1D,uBACG,MACC,KAAA,EAAA,cAAC,KAAG,KAAA,OAAK,EACR,EAAA,cAAA,QAAA,CACC,MAAO,CACL,eAAgB,WAChB,OAAQ,iBACR,UAAW,QACb,CAAA,EAEA,EAAA,cAAC,aACE,EAAA,cAAA,KAAA,CACC,MAAO,CACL,gBAAiB,SACnB,CAAA,EAEC,EAAA,cAAA,KAAA,CAAG,MAAO,CAAE,MAAO,GAAI,QAAS,OAAQ,CAAA,CAAG,EAC3C,EAAc,IAAI,AAAC,GACjB,EAAA,cAAA,KAAA,CACC,MACA,MAAO,CACL,SAAU,GACV,OAAQ,gBACV,CAEC,EAAA,CACH,CACD,CACH,CACF,kBACC,QACE,KAAA,EAAW,IAAI,AAAC,GAEZ,EAAA,cAAA,KAAA,CAAG,IAAK,CAAA,EACN,EAAA,cAAA,GAAA,CAAQ,SAAgB,eAA8B,CAAA,CACzD,CAEH,CACH,CACF,CACF,CAEJ,EAOM,GAAU,CAAC,CAAE,gBAAe,YAA2B,CACrD,KAAA,GAAQ,EAAgB,EAAA,CAAO,EAErC,uCAEK,EAAA,cAAA,KAAA,CACC,MAAO,CACL,MAAO,GACP,OAAQ,iBACR,gBAAiB,SACnB,CAAA,EAEC,CACH,EACC,EAAc,IAAI,AAAC,GAAc,CAC1B,KAAA,GAAU,GAAG,IAAY,IAC/B,MACG,GAAA,cAAA,KAAA,CACC,IAAK,EACL,MAAO,CACL,SAAU,GACV,SAAU,GACV,OAAQ,iBACR,SAAU,QACZ,EACA,QAAS,AAAC,GAAU,CACd,AAAA,EAAM,iBAAkB,mBAGtB,EAAA,QAAQ,WAAW,CAAO,CAClC,CAAA,EAEC,EAAA,cAAA,GAAA,CAAS,SAAkB,CAAA,CAC9B,CAEH,CAAA,CACH,CAEJ,EAEM,GAAW,CAAC,CAAE,aAAmC,CAC/C,KAAA,GAAQ,EAAgB,EAAA,CAAO,EAC/B,EAAO,EAAe,EAAM,MAAM,KAAK,CAAO,CAAC,EAE/C,EAAe,AAAC,GAA2C,CACzD,EAAA,QAAQ,eAAe,CAAE,IAAK,EAAS,MAAO,EAAE,OAAO,KAAA,CAAO,CAAA,EAIpE,MAAA,GAAA,cAAA,EAAA,SAAA,KACG,EAAK,WACH,EAAA,cAAA,QAAA,CACC,MAAO,CACL,MAAO,OACP,OAAQ,OACR,gBAAiB,cACjB,UAAW,aACX,UAAW,QACb,EACA,MAAO,EAAK,QACZ,SAAU,EACV,OAAQ,IAAM,CACZ,AAAI,EAAK,WACD,EAAA,QAAQ,aAAa,CAAO,CAEtC,EACA,UAAS,EACX,CAAA,EAGD,CAAC,EAAK,WAAa,EAAK,cAC3B,CAEJ,EAEM,GAAU,AAAC,GACR,AAAC,GAAkB,CACpB,GAAA,CACI,KAAA,GAAa,EAAQ,MAAM,CAAC,EAAE,QAAQ,SAAU,AAAC,GAC9C,QAAQ,KAChB,EAID,MAAO,AAFI,IAAI,UAAS,MAAO,WAAW,eAAwB,EAExD,CAAG,CAAA,MACb,CACO,MAAA,GACT,CAAA,ECxQE,GAAO,IAET,EAAA,cAAC,WACE,EAAA,cAAA,KAAA,KAAG,kCAAgC,EACpC,EAAA,cAAC,IAAE,KAAA,kGAAgG,EACnG,EAAA,cAAC,SAAG,EACJ,EAAA,cAAC,GAAW,IAAA,EACX,EAAA,cAAA,KAAA,IAAG,EACH,EAAA,cAAA,GAAA,IAAwB,EACzB,EAAA,cAAC,KAAG,IAAA,kBACH,GAAgB,IAAA,EAChB,EAAA,cAAA,KAAA,IAAG,EACJ,EAAA,cAAC,OAAS,EACV,EAAA,cAAC,KAAG,IAAA,EACH,EAAA,cAAA,GAAA,IAAQ,EACR,EAAA,cAAA,KAAA,IAAG,EACJ,EAAA,cAAC,GAAgB,IAAA,kBAChB,KAAG,IAAA,EACH,EAAA,cAAA,GAAA,IAAS,CACZ,EAIE,EAAY,SAAS,eAAe,MAAM,EAEhD,GAAI,EAAW,CACP,KAAA,GAAOC,EAA0B,CAAS,EAC1C,EAAQ,EAAO,MAAM,CACzB,WAAY,CAAC,IAAuB,IAAc,CAAA,CACnD,EAEI,EAAA,OACF,EAAA,cAAAC,EAAA,QAAA,WAAA,KACE,EAAA,cAAA,GAAA,CAAW,OAAA,EACT,EAAA,cAAA,GAAA,IAAK,CACR,CACF,CACF,CACF"}