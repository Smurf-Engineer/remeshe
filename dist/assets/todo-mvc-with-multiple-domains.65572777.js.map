{"version":3,"file":"todo-mvc-with-multiple-domains.65572777.js","sources":["../../projects/remesh-example/src/todo-mvc-with-multiple-domains/domain-externs/storage.ts","../../projects/remesh-example/src/todo-mvc-with-multiple-domains/domain-externs-impl/storage.ts","../../packages/remesh/src/modules/text.ts","../../projects/remesh-example/src/todo-mvc-with-multiple-domains/domain-modules/sync-storage.ts","../../projects/remesh-example/src/todo-mvc-with-multiple-domains/domains/TodoInput.ts","../../projects/remesh-example/src/todo-mvc-with-multiple-domains/utils/uuid.ts","../../projects/remesh-example/src/todo-mvc-with-multiple-domains/domains/TodoList.ts","../../projects/remesh-example/src/todo-mvc-with-multiple-domains/hooks/useKeyPressHandler.ts","../../projects/remesh-example/src/todo-mvc-with-multiple-domains/components/TodoHeader.tsx","../../packages/remesh/src/modules/switch.ts","../../projects/remesh-example/src/todo-mvc-with-multiple-domains/domains/TodoFilter.ts","../../projects/remesh-example/src/todo-mvc-with-multiple-domains/domains/TodoApp.ts","../../projects/remesh-example/src/todo-mvc-with-multiple-domains/hooks/useInputHandler.ts","../../projects/remesh-example/src/todo-mvc-with-multiple-domains/components/TodoItem.tsx","../../projects/remesh-example/src/todo-mvc-with-multiple-domains/components/TodoList.tsx","../../projects/remesh-example/src/todo-mvc-with-multiple-domains/components/TodoFooter.tsx","../../projects/remesh-example/src/todo-mvc-with-multiple-domains/components/TodoApp.tsx","../../projects/remesh-example/src/todo-mvc-with-multiple-domains/index.tsx"],"sourcesContent":["import { Remesh } from 'remesh'\n\nexport type Storage = {\n  get: <T>(key: string) => Promise<T | null>\n  set: <T>(key: string, value: T) => Promise<void>\n  clear: (key: string) => Promise<void>\n}\n\nexport const Storage = Remesh.extern<Storage>({\n  name: 'Storage',\n  default: {\n    get: () => {\n      throw new Error('Not implemented')\n    },\n    set: () => {\n      throw new Error('Not implemented')\n    },\n    clear: () => {\n      throw new Error('Not implemented')\n    },\n  },\n})\n","import localforage from 'localforage'\nimport { Storage } from '../domain-externs/storage'\n\nexport const StorageImpl = Storage({\n  get: (key) => {\n    return localforage.getItem(key)\n  },\n  set: async (key, value) => {\n    await localforage.setItem(key, value)\n  },\n  clear: (key) => {\n    return localforage.removeItem(key)\n  },\n})\n","import { RemeshDomainContext } from '../index'\n\nexport type TextModuleOptions = {\n  name: string\n  default?: string\n}\n\nexport type TextChangedEventData = {\n  previous: string\n  current: string\n}\n\nexport type TextClearedEventData = {\n  previous: string\n}\n\nexport const TextModule = (domain: RemeshDomainContext, options: TextModuleOptions) => {\n  const TextState = domain.state({\n    name: `${options.name}.TextState`,\n    default: options.default ?? '',\n  })\n\n  const TextQuery = domain.query({\n    name: `${options.name}.InputQuery`,\n    impl: ({ get }) => get(TextState()),\n  })\n\n  const TextChangedEvent = domain.event<TextChangedEventData>({\n    name: `${options.name}.TextChangedEvent`,\n  })\n\n  const setText = domain.command({\n    name: `${options.name}.setText`,\n    impl: ({ get }, current: string) => {\n      const previous = get(TextState())\n\n      const result = [TextState().new(current), TextChangedEvent({ previous, current })]\n\n      if (current === '') {\n        return [...result, TextClearedEvent({ previous })]\n      }\n\n      return result\n    },\n  })\n\n  const TextClearedEvent = domain.event<TextClearedEventData>({\n    name: `${options.name}.InputClearedEvent`,\n  })\n\n  const clearText = domain.command({\n    name: `${options.name}.clearText`,\n    impl: () => {\n      return setText('')\n    },\n  })\n\n  return {\n    query: {\n      TextQuery,\n    },\n    command: {\n      setText,\n      clearText,\n    },\n    event: {\n      TextChangedEvent,\n      TextClearedEvent,\n    },\n  }\n}\n","import { RemeshDomainContext, RemeshCommandOutput, RemeshEvent } from 'remesh'\n\nimport { from } from 'rxjs'\nimport { filter, map, tap } from 'rxjs/operators'\n\nimport { Storage } from '../domain-externs/storage'\n\nexport type SyncStorageOptions<T, U = T> = {\n  storageKey: string\n  TriggerEvent: RemeshEvent<any, T>\n  saveData: (event: T) => U\n  readData: (value: U) => RemeshCommandOutput\n}\n\nconst createOptions = <R>(storageKey: string, callback: <T, U>(options: SyncStorageOptions<T, U>) => R) => {\n  return {\n    listenTo: <T>(TriggerEvent: RemeshEvent<any, T>) => {\n      return {\n        saveData: <U>(saveData: (event: T) => U) => {\n          return {\n            readData: (readData: (value: U) => RemeshCommandOutput) => {\n              return callback({\n                storageKey,\n                TriggerEvent,\n                saveData: saveData,\n                readData: readData,\n              })\n            },\n          }\n        },\n        readData: (readData: (value: T) => RemeshCommandOutput) => {\n          return callback({\n            storageKey,\n            TriggerEvent,\n            saveData: (event: T) => event,\n            readData: readData,\n          })\n        },\n      }\n    },\n  }\n}\n\nconst createSyncStorage = <T, U = T>(domain: RemeshDomainContext, options: SyncStorageOptions<T, U>) => {\n  const storage = domain.getExtern(Storage)\n\n  domain.command$({\n    name: 'readStorage',\n    impl: () => {\n      return from(storage.get<U>(options.storageKey)).pipe(\n        filter((value): value is U => !!value),\n        map((value) => options.readData(value)),\n      )\n    },\n  })\n\n  domain.command$({\n    name: 'writeStorage',\n    impl: ({ fromEvent }) => {\n      return fromEvent(options.TriggerEvent).pipe(\n        tap((value) => storage.set(options.storageKey, options.saveData(value))),\n        map(() => null),\n      )\n    },\n  })\n}\n\nexport const syncStorage = (domain: RemeshDomainContext, storageKey: string) => {\n  return createOptions(storageKey, (options) => createSyncStorage(domain, options))\n}\n","import { Remesh } from 'remesh'\nimport { TextModule } from 'remesh/modules/text'\n\nimport { syncStorage } from '../domain-modules/sync-storage'\n\nexport const TODO_INPUT_STORAGE_KEY = 'remesh-example/todo-input'\n\nexport const TodoInputDomain = Remesh.domain({\n  name: 'TodoInput',\n  impl: (domain) => {\n    const todoInputModule = TextModule(domain, {\n      name: 'TodoInput',\n    })\n\n    const TodoInputQuery = todoInputModule.query.TextQuery\n\n    const TodoInputChangedEvent = todoInputModule.event.TextChangedEvent\n\n    const TodoInputClearedEvent = todoInputModule.event.TextClearedEvent\n\n    const setTodoInput = todoInputModule.command.setText\n\n    const clearTodoInput = todoInputModule.command.clearText\n\n    syncStorage(domain, TODO_INPUT_STORAGE_KEY)\n      .listenTo(TodoInputChangedEvent)\n      .saveData((event) => event.current)\n      .readData((value) => setTodoInput(value))\n\n    return {\n      query: {\n        TodoInputQuery,\n      },\n      command: {\n        setTodoInput,\n        clearTodoInput,\n      },\n      event: {\n        TodoInputChangedEvent,\n        TodoInputClearedEvent,\n      },\n    }\n  },\n})\n","export const uuid = () =>\r\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n    var r = (Math.random() * 16) | 0,\r\n      v = c == 'x' ? r : (r & 0x3) | 0x8\r\n    return v.toString(16)\r\n  })\r\n","import { Remesh } from 'remesh'\nimport { ListModule } from 'remesh/modules/list'\n\nimport { uuid } from '../utils/uuid'\nimport { syncStorage } from '../domain-modules/sync-storage'\n\nexport const TODO_LIST_STORAGE_KEY = 'remesh-example/todo-list'\n\nexport type Todo = {\n  id: string\n  title: string\n  completed: boolean\n}\n\nexport type Todos = Todo[]\n\nexport const getTodoId = (todo: Todo) => todo.id\n\nexport const TodoListDomain = Remesh.domain({\n  name: 'TodoList',\n  impl: (domain) => {\n    const todoListModule = ListModule<Todo>(domain, {\n      name: 'TodoList',\n      key: getTodoId,\n    })\n\n    const TodoListQuery = todoListModule.query.ItemListQuery\n\n    const TodoQuery = todoListModule.query.ItemQuery\n\n    const TodoKeyListQuery = todoListModule.query.KeyListQuery\n\n    const TodoListChangedEvent = todoListModule.event.ListChangedEvent\n\n    const TodoItemAddedEvent = todoListModule.event.ItemAddedEvent\n\n    const TodoItemUpdatedEvent = todoListModule.event.ItemUpdatedEvent\n\n    const TodoItemDeletedEvent = todoListModule.event.ItemDeletedEvent\n\n    const FailedToAddTodoEvent = todoListModule.event.FailedToAddItemEvent\n\n    const FailedToUpdateTodoEvent = todoListModule.event.FailedToUpdateItemEvent\n\n    const setTodoList = todoListModule.command.setList\n\n    const addTodo = domain.command({\n      name: 'TodoList.addTodo',\n      impl: (_, title: string) => {\n        if (title === '') {\n          return FailedToAddTodoEvent({\n            reason: 'Title cannot be empty',\n          })\n        }\n\n        const todo: Todo = {\n          id: uuid(),\n          title: title,\n          completed: false,\n        }\n\n        return todoListModule.command.addItem(todo)\n      },\n    })\n\n    const updateTodo = domain.command({\n      name: 'TodoList.updateTodo',\n      impl: (_, todo: Todo) => {\n        if (todo.title === '') {\n          return deleteTodo(todo.id)\n        }\n        return todoListModule.command.updateItem(todo)\n      }\n    })\n\n    const deleteTodo = todoListModule.command.deleteItem\n\n    const ActiveTodoListQuery = domain.query({\n      name: 'ActiveTodoListQuery',\n      impl: ({ get }) => {\n        const todos = get(TodoListQuery())\n        return todos.filter((todo) => !todo.completed)\n      },\n    })\n\n    const CompletedTodoListQuery = domain.query({\n      name: 'CompletedTodoListQuery',\n      impl: ({ get }) => {\n        const todos = get(TodoListQuery())\n        return todos.filter((todo) => todo.completed)\n      },\n    })\n\n    const ActiveTodoCountQuery = domain.query({\n      name: 'ActiveTodoCountQuery',\n      impl: ({ get }) => {\n        const todos = get(ActiveTodoListQuery())\n        return todos.length\n      },\n    })\n\n    const CompletedTodoCountQuery = domain.query({\n      name: 'CompletedTodoCountQuery',\n      impl: ({ get }) => {\n        const todos = get(CompletedTodoListQuery())\n        return todos.length\n      },\n    })\n\n    const IsAllCompletedQuery = domain.query({\n      name: 'IsAllCompletedQuery',\n      impl: ({ get }) => {\n        const todos = get(TodoListQuery())\n\n        if (todos.length === 0) {\n          return false\n        }\n\n        const completedTodoCount = get(CompletedTodoCountQuery())\n\n        return completedTodoCount === todos.length\n      },\n    })\n\n    const toggleTodo = domain.command({\n      name: 'toggleTodo',\n      impl: ({ get }, id: Todo['id']) => {\n        const todo = get(TodoQuery(id))\n        const newTodo: Todo = {\n          ...todo,\n          completed: !todo.completed,\n        }\n\n        return todoListModule.command.updateItem(newTodo)\n      },\n    })\n\n    const toggleAllTodos = domain.command({\n      name: 'toggleAllTodos',\n      impl: ({ get }) => {\n        const todoList = get(TodoListQuery())\n\n        if (todoList.length === 0) {\n          return null\n        }\n\n        const activeCount = get(ActiveTodoCountQuery())\n        const completed = activeCount > 0\n        const newTodoList = todoList.map((todo) => ({\n          ...todo,\n          completed,\n        }))\n\n        return setTodoList(newTodoList)\n      },\n    })\n\n    const clearAllCompletedTodos = domain.command({\n      name: 'clearAllCompletedTodos',\n      impl: ({ get }) => {\n        const todoList = get(TodoListQuery())\n\n        if (todoList.length === 0) {\n          return null\n        }\n\n        const newTodoList = todoList.filter((todo) => !todo.completed)\n\n        return setTodoList(newTodoList)\n      },\n    })\n\n    syncStorage(domain, TODO_LIST_STORAGE_KEY)\n      .listenTo(TodoListChangedEvent)\n      .saveData((event) => event.current)\n      .readData((todos) => setTodoList(todos))\n\n    return {\n      query: {\n        TodoQuery,\n        TodoKeyListQuery,\n        TodoListQuery,\n        ActiveTodoListQuery,\n        CompletedTodoListQuery,\n        ActiveTodoCountQuery,\n        CompletedTodoCountQuery,\n        IsAllCompletedQuery\n      },\n      command: {\n        setTodoList,\n        addTodo,\n        updateTodo,\n        deleteTodo,\n        toggleTodo,\n        toggleAllTodos,\n        clearAllCompletedTodos,\n      },\n      event: {\n        TodoItemAddedEvent,\n        TodoItemUpdatedEvent,\n        TodoItemDeletedEvent,\n        FailedToAddTodoEvent,\n        FailedToUpdateTodoEvent,\n        TodoListChangedEvent,\n      },\n    }\n  },\n})\n","import React from 'react'\r\n\r\nexport function useKeyPressHandler(\r\n  keys: string | string[],\r\n  callback: (event: React.KeyboardEvent<HTMLInputElement>, key: string) => void,\r\n) {\r\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    const keyList = Array.isArray(keys) ? keys : [keys]\r\n    for (const key of keyList) {\r\n      if (event.key.toLowerCase() === key.toLowerCase()) {\r\n        event.preventDefault()\r\n        callback(event, key)\r\n      }\r\n    }\r\n  }\r\n\r\n  return handleKeyPress\r\n}\r\n","import React from 'react'\n\nimport { useRemeshDomain, useRemeshEvent, useRemeshQuery } from 'remesh-react'\n\nimport { TodoInputDomain } from '../domains/TodoInput'\nimport { TodoListDomain } from '../domains/TodoList'\n\nimport { useKeyPressHandler } from '../hooks/useKeyPressHandler'\n\nexport const TodoHeader = () => {\n  const todoInputDomain = useRemeshDomain(TodoInputDomain())\n  const todoListDomain = useRemeshDomain(TodoListDomain())\n\n  const todoInput = useRemeshQuery(todoInputDomain.query.TodoInputQuery())\n\n  const handleTodoInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    todoInputDomain.command.setTodoInput(event.target.value)\n  }\n\n  const handlePressEnter = useKeyPressHandler('Enter', () => {\n    todoListDomain.command.addTodo(todoInput)\n  })\n\n  useRemeshEvent(todoListDomain.event.FailedToAddTodoEvent, (event) => {\n    alert(event.reason)\n  })\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n      <input\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        value={todoInput}\n        onChange={handleTodoInputChange}\n        onKeyDown={handlePressEnter}\n      />\n    </header>\n  )\n}\n","import { RemeshDomainContext } from '../index'\n\nexport type SwitchModuleOptions<T> = {\n  name: string\n  default: T\n}\n\nexport type SwitchedEventData<T> = {\n  previous: T\n  current: T\n}\n\nexport const SwitchModule = <T>(domain: RemeshDomainContext, options: SwitchModuleOptions<T>) => {\n  const SwitchState = domain.state({\n    name: `${options.name}.SwitchState`,\n    default: options.default,\n  })\n\n  const SwitchQuery = domain.query({\n    name: `${options.name}.SwitchQuery`,\n    impl: ({ get }) => get(SwitchState()),\n  })\n\n  const SwitchedEvent = domain.event<SwitchedEventData<T>>({\n    name: `${options.name}.SwitchedEvent`,\n  })\n\n  const switchTo = domain.command({\n    name: `${options.name}.switchTo`,\n    impl: ({ get }, current: T) => {\n      const previous = get(SwitchState())\n\n      const result = [SwitchState().new(current), SwitchedEvent({ previous, current })]\n\n      return result\n    },\n  })\n\n  return {\n    query: {\n      SwitchQuery,\n    },\n    command: {\n      switchTo,\n    },\n    event: {\n      SwitchedEvent,\n    },\n  }\n}\n","import { Remesh } from 'remesh'\nimport { SwitchModule } from 'remesh/modules/switch'\n\nimport { syncStorage } from '../domain-modules/sync-storage'\n\nexport const TODO_FILTER_STORAGE_KEY = 'remesh-example/todo-filter'\n\nexport type TodoFilter = 'all' | 'active' | 'completed'\n\nexport const getValidTodoFilter = (input: string | undefined): TodoFilter => {\n  if (input === undefined) {\n    return 'all'\n  }\n\n  switch (input) {\n    case 'all':\n    case 'active':\n    case 'completed':\n      return input\n    default:\n      return 'all'\n  }\n}\n\nexport const TodoFilterDomain = Remesh.domain({\n  name: 'TodoFilter',\n  impl: (domain) => {\n    const todoFilterModule = SwitchModule<TodoFilter>(domain, {\n      name: 'TodoFilter',\n      default: 'all',\n    })\n\n    const TodoFilterQuery = todoFilterModule.query.SwitchQuery\n\n    const TodoFilterChangedEvent = todoFilterModule.event.SwitchedEvent\n    \n    const switchFilter = todoFilterModule.command.switchTo\n\n    const setFilter = domain.command({\n      name: 'TodoFilter.setFilter',\n      impl: (_, input: string) => {\n        const filter = getValidTodoFilter(input)\n        return switchFilter(filter)\n      },\n    })\n\n\n    syncStorage(domain, TODO_FILTER_STORAGE_KEY)\n      .listenTo(TodoFilterChangedEvent)\n      .saveData((event) => event.current)\n      .readData((value) => setFilter(value))\n\n    return {\n      query: {\n        TodoFilterQuery,\n      },\n      command: {\n        setFilter,\n        switchFilter\n      },\n      event: {\n        TodoFilterChangedEvent,\n      },\n    }\n  },\n})\n","import { Remesh } from 'remesh'\n\nimport { filter, map } from 'rxjs/operators'\n\nimport { TodoInputDomain } from './TodoInput'\nimport { TodoListDomain, getTodoId } from './TodoList'\nimport { TodoFilterDomain } from './TodoFilter'\n\nexport const TodoAppDomain = Remesh.domain({\n  name: 'TodoApp',\n  impl: (domain) => {\n    const todoHeader = domain.getDomain(TodoInputDomain())\n    const todoList = domain.getDomain(TodoListDomain())\n    const todoFooter = domain.getDomain(TodoFilterDomain())\n\n    const FilteredTodoKeyListQuery = domain.query({\n      name: 'FilteredTodoList',\n      impl: ({ get }) => {\n        const filter = get(todoFooter.query.TodoFilterQuery())\n\n        if (filter === 'all') {\n          return get(todoList.query.TodoListQuery()).map(getTodoId)\n        }\n\n        if (filter === 'active') {\n          return get(todoList.query.ActiveTodoListQuery()).map(getTodoId)\n        }\n\n        if (filter === 'completed') {\n          return get(todoList.query.CompletedTodoListQuery()).map(getTodoId)\n        }\n\n        throw new Error(`Unknown filter: ${filter}`)\n      },\n    })\n\n    domain.command$({\n      name: 'clearTodoInputWhenSubmit',\n      impl: ({ fromEvent, get }) => {\n        return fromEvent(todoList.event.TodoItemAddedEvent).pipe(\n          filter((event) => {\n            const todoInput = get(todoHeader.query.TodoInputQuery())\n            return todoInput === event.item.title\n          }),\n          map(() => todoHeader.command.clearTodoInput()),\n        )\n      },\n    })\n\n    return {\n      query: {\n        FilteredTodoKeyListQuery,\n      },\n      command: {},\n      event: {},\n    }\n  },\n})\n","import React, { useCallback, useState } from 'react'\n\nexport function useInputHandler(defaultValue: string) {\n  const [value, setValue] = useState(defaultValue)\n\n  const onChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value)\n  }, [])\n\n  return [value, onChange, setValue] as const\n}\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useRemeshDomain, useRemeshQuery } from 'remesh-react'\r\n\r\nimport { Todo, TodoListDomain } from '../domains/TodoList'\r\n\r\nimport { useKeyPressHandler } from '../hooks/useKeyPressHandler'\r\nimport { useInputHandler } from '../hooks/useInputHandler'\r\n\r\nexport type TodoItemProps = {\r\n  id: Todo['id']\r\n}\r\n\r\nexport function TodoItem(props: TodoItemProps) {\r\n  const todoListDomain = useRemeshDomain(TodoListDomain())\r\n\r\n  const todo = useRemeshQuery(todoListDomain.query.TodoQuery(props.id))\r\n\r\n  const [editing, setEditing] = useState(false)\r\n\r\n  const [title, handleTitleChange] = useInputHandler(todo.title)\r\n\r\n  const save = () => {\r\n    todoListDomain.command.updateTodo({ ...todo, title })\r\n    setEditing(false)\r\n  }\r\n\r\n  const handlePress = useKeyPressHandler(['Enter', 'Escape'], () => {\r\n    save()\r\n  })\r\n\r\n  const handleEnableEdit = () => {\r\n    setEditing(true)\r\n  }\r\n\r\n  const handleSave = () => {\r\n    todoListDomain.command.toggleTodo(todo.id)\r\n  }\r\n\r\n  const handleDelete = () => {\r\n    todoListDomain.command.deleteTodo(todo.id)\r\n  }\r\n\r\n  const handleBlur = () => {\r\n    save()\r\n  }\r\n\r\n  const inputRef = useRef<HTMLInputElement>(null)\r\n\r\n  useEffect(() => {\r\n    if (editing) {\r\n      inputRef.current?.focus()\r\n    }\r\n  }, [editing])\r\n\r\n  return (\r\n    <li className={`${editing && 'editing'} ${todo.completed && 'completed'}`}>\r\n      <div className=\"view\">\r\n        <input type=\"checkbox\" className=\"toggle\" checked={todo.completed} onChange={handleSave} />\r\n        <label onDoubleClick={handleEnableEdit}>{todo.title}</label>\r\n        <button className=\"destroy\" onClick={handleDelete} />\r\n      </div>\r\n      {editing && (\r\n        <input\r\n          ref={inputRef}\r\n          className=\"edit\"\r\n          value={title}\r\n          onChange={handleTitleChange}\r\n          onKeyDown={handlePress}\r\n          onBlur={handleBlur}\r\n        />\r\n      )}\r\n    </li>\r\n  )\r\n}\r\n","import React from 'react'\n\nimport { useRemeshDomain, useRemeshQuery } from 'remesh-react'\n\nimport { TodoAppDomain } from '../domains/TodoApp'\nimport { TodoListDomain } from '../domains/TodoList'\n\nimport { TodoItem } from './TodoItem'\n\nexport const TodoList = () => {\n  const todoAppDomain = useRemeshDomain(TodoAppDomain())\n  const filteredTodoKeyList = useRemeshQuery(todoAppDomain.query.FilteredTodoKeyListQuery())\n\n  console.log('render list')\n\n  return (\n    <section className=\"main\">\n      <ToggleAllInput />\n      <ul className=\"todo-list\">\n        {filteredTodoKeyList.map((todoId) => (\n          <TodoItem key={todoId} id={todoId} />\n        ))}\n      </ul>\n    </section>\n  )\n}\n\nconst ToggleAllInput = () => {\n  const todoListDomain = useRemeshDomain(TodoListDomain())\n  const isAllCompleted = useRemeshQuery(todoListDomain.query.IsAllCompletedQuery())\n\n  const handleToggleAll = () => {\n    todoListDomain.command.toggleAllTodos()\n  }\n  return (\n    <>\n      <input\n        id=\"toggle-all\"\n        type=\"checkbox\"\n        className=\"toggle-all\"\n        checked={isAllCompleted}\n        onChange={handleToggleAll}\n      />\n      <label htmlFor=\"toggle-all\" />\n    </>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { NavLink, useParams } from 'react-router-dom'\n\nimport { useRemeshDomain, useRemeshQuery } from 'remesh-react'\n\nimport { TodoListDomain } from '../domains/TodoList'\nimport { TodoFilterDomain } from '../domains/TodoFilter'\n\nexport const TodoFooter = () => {\n  const todoListDomain = useRemeshDomain(TodoListDomain())\n  const todoFilterDomain = useRemeshDomain(TodoFilterDomain())\n\n  const todoFilter = useRemeshQuery(todoFilterDomain.query.TodoFilterQuery())\n  const activeTodoCount = useRemeshQuery(todoListDomain.query.ActiveTodoCountQuery())\n  const completedTodoCount = useRemeshQuery(todoListDomain.query.CompletedTodoCountQuery())\n\n  const hasCompleted = completedTodoCount > 0\n\n  const handleClearCompleted = () => {\n    todoListDomain.command.clearAllCompletedTodos()\n  }\n\n  const getClassName = (navData: { isActive: boolean }) => {\n    return navData.isActive ? 'selected' : ''\n  }\n\n  const params = useParams<{ filter: string }>()\n\n  useEffect(() => {\n    const filter = params.filter ?? 'all'\n    if (filter !== todoFilter) {\n      todoFilterDomain.command.setFilter(filter)\n    }\n  }, [params, todoFilter])\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        <strong>{activeTodoCount}</strong> item{activeTodoCount !== 1 && 's'} left\n      </span>\n      <ul className=\"filters\">\n        <li>\n          <NavLink to=\"/\" className={getClassName}>\n            All\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/active\" className={getClassName}>\n            Active\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/completed\" className={getClassName}>\n            Completed\n          </NavLink>\n        </li>\n      </ul>\n      {hasCompleted && (\n        <button className=\"clear-completed\" onClick={handleClearCompleted}>\n          Clear completed\n        </button>\n      )}\n    </footer>\n  )\n}\n","import React from 'react'\r\n\r\nimport { TodoHeader } from './TodoHeader'\r\nimport { TodoList } from './TodoList'\r\nimport { TodoFooter } from './TodoFooter'\r\n\r\nexport const TodoApp = () => {\r\n  return (\r\n    <div className=\"todoapp\">\r\n      <TodoHeader />\r\n      <TodoList />\r\n      <TodoFooter />\r\n    </div>\r\n  )\r\n}\r\n","import React, { StrictMode } from 'react'\r\nimport * as ReactDOMClient from 'react-dom/client'\r\n\r\nimport { HashRouter, Routes, Route } from 'react-router-dom'\r\n\r\nimport { Remesh } from 'remesh'\r\nimport { RemeshRoot } from 'remesh-react'\r\nimport { RemeshReduxDevtools } from 'remesh-redux-devtools'\r\nimport { RemeshLogger } from 'remesh-logger'\r\n\r\nimport { StorageImpl } from './domain-externs-impl/storage'\r\nimport { TodoApp } from './components/TodoApp'\r\n\r\nconst container = document.getElementById('root')\r\n\r\nif (container) {\r\n  const root = ReactDOMClient.createRoot(container)\r\n  const store = Remesh.store({\r\n    externs: [StorageImpl],\r\n    inspectors: [RemeshReduxDevtools(), RemeshLogger()],\r\n  })\r\n\r\n  root.render(\r\n    <StrictMode>\r\n      <RemeshRoot store={store}>\r\n        <HashRouter basename=\"/\">\r\n          <Routes>\r\n            <Route path=\"/\" element={<TodoApp />} />\r\n            <Route path=\"/:filter\" element={<TodoApp />} />\r\n          </Routes>\r\n        </HashRouter>\r\n      </RemeshRoot>\r\n    </StrictMode>,\r\n  )\r\n}\r\n"],"names":["useState","useCallback","useRef","useEffect","ReactDOMClient.createRoot","StrictMode"],"mappings":"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"}