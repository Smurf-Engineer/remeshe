{"version":3,"file":"counter.2c90e657.js","sources":["../../packages/remesh/src/schedulers/debounce.ts","../../projects/remesh-example/src/others/counter.tsx"],"sourcesContent":["import { debounceTime as debounceTimeOperator, tap } from 'rxjs/operators'\n\nimport { RemeshScheduler } from '../remesh'\n\nexport const debounce = <T = unknown>(...args: Parameters<typeof debounceTimeOperator>): RemeshScheduler<T> => {\n  return (_, value$) => {\n    return value$.pipe(debounceTimeOperator(...args))\n  }\n}\n","import React, { Suspense } from 'react'\n\nimport { Remesh } from 'remesh'\nimport { debounce } from 'remesh/schedulers/debounce'\nimport { useRemeshAsyncQuery, useRemeshDomain, useRemeshQuery, useRemeshSuspenseQuery } from 'remesh-react'\n\nconst delay = (ms: number) => new Promise<void>((resolve) => setTimeout(resolve, ms))\n\nconst CounterDomain = Remesh.domain({\n  name: 'counter',\n  impl: (domain) => {\n    const CountState = domain.state({\n      name: 'CountState',\n      default: 0,\n    })\n\n    const CountIncreQuery = domain.query({\n      name: 'CountIncreQuery',\n      impl: async ({ get }) => {\n        const count = get(CountState())\n        await delay(200)\n        return count + 1\n      },\n    })\n\n    const CountDecreQuery = domain.query({\n      name: 'CountDecreQuery',\n      impl: async ({ get }) => {\n        const count = get(CountState())\n        await delay(200)\n        return count - 1\n      },\n    })\n\n    const CountDoubleQuery = domain.query({\n      name: 'CountDoubleQuery',\n      impl: async ({ get }) => {\n        const count = await get(CountState())\n        await delay(200)\n        return count * 2\n      },\n    })\n\n    const CountQuery = domain.query({\n      name: 'CountQuery',\n      scheduler: debounce(0),\n      impl: async ({ get }) => {\n        const [incre, decre, double] = await Promise.all([\n          get(CountIncreQuery()),\n          get(CountDecreQuery()),\n          get(CountDoubleQuery()),\n        ])\n        return { incre, decre, double }\n      },\n    })\n\n    const UnwrappedCountQuery = domain.query({\n      name: 'UnwrappedCountQuery',\n      impl: ({ unwrap }) => {\n        const data = unwrap(CountQuery())\n        return data\n      },\n    })\n\n    const incre = domain.command({\n      name: 'incre',\n      impl: ({ get }) => {\n        const count = get(CountState())\n        return CountState().new(count + 1)\n      },\n    })\n\n    const decre = domain.command({\n      name: 'decre',\n      impl: ({ get }) => {\n        const count = get(CountState())\n        return CountState().new(count - 1)\n      },\n    })\n\n    return {\n      query: {\n        CountQuery,\n        UnwrappedCountQuery,\n      },\n      command: {\n        incre,\n        decre,\n      },\n    }\n  },\n})\n\nexport default () => {\n  const counterDomain = useRemeshDomain(CounterDomain())\n\n  const count = useRemeshAsyncQuery(counterDomain.query.CountQuery())\n  const unwrappedCount = useRemeshQuery(counterDomain.query.UnwrappedCountQuery())\n\n  return (\n    <div>\n      <h2>Counter</h2>\n      <button onClick={() => counterDomain.command.incre()}>Increment</button>{' '}\n      <button onClick={() => counterDomain.command.decre()}>Decrement</button>\n      <div>\n        <h3>Async Query</h3>\n        <pre>{JSON.stringify(count, null, 2)}</pre>\n      </div>\n      <div>\n        <h3>Unwrapped Query</h3>\n        <pre>{JSON.stringify(unwrappedCount, null, 2)}</pre>\n      </div>\n      <div>\n        <h3>Suspense Query</h3>\n        <Suspense fallback=\"loading...\">\n          <Count />\n        </Suspense>\n      </div>\n    </div>\n  )\n}\n\nconst Count = () => {\n  const counterDomain = useRemeshDomain(CounterDomain())\n\n  const count = useRemeshSuspenseQuery(counterDomain.query.CountQuery())\n\n  return <pre>{JSON.stringify(count, null, 2)}</pre>\n}\n"],"names":["debounceTimeOperator","Suspense"],"mappings":"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"}