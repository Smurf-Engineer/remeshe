{"version":3,"file":"index.f80b6770.js","sources":["../../projects/remesh-example/src/chess/context/game.ts","../../projects/remesh-example/src/chess/components/Board.tsx","../../projects/remesh-example/src/chess/models/game.ts","../../projects/remesh-example/src/chess/components/Chess.tsx","../../projects/remesh-example/src/chess/components/Marker.tsx","../../projects/remesh-example/src/chess/ChessGame.tsx","../../projects/remesh-example/src/chess/index.tsx"],"sourcesContent":["import React from 'react'\r\n\r\ntype GameConfigContextValue = {\r\n  left: number\r\n  top: number\r\n  gridSize: number\r\n  chessSize: number\r\n}\r\n\r\nexport const GameConfigContext = React.createContext<GameConfigContextValue>({\r\n  left: 0,\r\n  top: 0,\r\n  gridSize: 60,\r\n  chessSize: 40,\r\n})\r\n","import React, { useContext } from 'react'\r\nimport { GameConfigContext } from '../context/game'\r\n\r\n// 棋盘画线辅助计算\r\nconst createPathArr = (config: { left: number; top: number; gridSize: number }) => {\r\n  const { left: baseLeft, top: baseTop, gridSize } = config\r\n\r\n  const left = baseLeft + gridSize / 2\r\n  const top = baseTop + gridSize / 2\r\n\r\n  // 生成线的路径\r\n  const line = (x1: number, y1: number, x2: number, y2: number) => {\r\n    return `M${left + x1 * gridSize},${top + y1 * gridSize} L${left + x2 * gridSize},${top + y2 * gridSize}`\r\n  }\r\n\r\n  // 生成十字花\r\n  const star = (x: number, y: number) => {\r\n    const arr = []\r\n    const distance = 1 / 10\r\n    const length = 1 / 4\r\n\r\n    let startX, startY, endX, endY\r\n\r\n    // 左边画一半\r\n    if (x != 0) {\r\n      startX = x - distance\r\n      startY = y - distance - length\r\n      endX = x - distance - length\r\n      endY = y - distance\r\n\r\n      arr.push(line(startX, startY, startX, endY))\r\n      arr.push(line(startX, endY, endX, endY))\r\n\r\n      startY = y + distance + length\r\n      endY = y + distance\r\n\r\n      arr.push(line(startX, startY, startX, endY))\r\n      arr.push(line(startX, endY, endX, endY))\r\n    }\r\n\r\n    // 右边画一半\r\n    if (x != 8) {\r\n      startX = x + distance\r\n      startY = y - distance - length\r\n      endX = x + distance + length\r\n      endY = y - distance\r\n\r\n      arr.push(line(startX, startY, startX, endY))\r\n      arr.push(line(startX, endY, endX, endY))\r\n\r\n      startY = y + distance + length\r\n      endY = y + distance\r\n\r\n      arr.push(line(startX, startY, startX, endY))\r\n      arr.push(line(startX, endY, endX, endY))\r\n    }\r\n\r\n    return arr\r\n  }\r\n\r\n  const arr: string[] = [\r\n    // 炮位\r\n    [1, 2],\r\n    [7, 2],\r\n    [1, 7],\r\n    [7, 7],\r\n    // 兵位\r\n    [0, 3],\r\n    [2, 3],\r\n    [4, 3],\r\n    [6, 3],\r\n    [8, 3],\r\n    [0, 6],\r\n    [2, 6],\r\n    [4, 6],\r\n    [6, 6],\r\n    [8, 6],\r\n  ]\r\n    .map(([x, y]) => star(x, y))\r\n    .reduce((acc, cur) => acc.concat(cur), [])\r\n    // 横线\r\n    .concat(new Array(8).fill(0).map((_, i) => line(0, i + 1, 8, i + 1)))\r\n    // 竖线，被楚河汉界分成两段\r\n    .concat(new Array(7).fill(0).map((_, i) => line(i + 1, 0, i + 1, 4)))\r\n    .concat(new Array(7).fill(0).map((_, i) => line(i + 1, 5, i + 1, 9)))\r\n    // 九宫格的线\r\n    .concat([line(3, 0, 5, 2), line(5, 0, 3, 2), line(3, 7, 5, 9), line(3, 9, 5, 7)])\r\n\r\n  return arr\r\n}\r\n\r\nexport const BoardRender = () => {\r\n  const config = useContext(GameConfigContext)\r\n\r\n  const { left: baseLeft, top: baseTop, gridSize, chessSize } = config\r\n\r\n  const left = baseLeft + gridSize / 2\r\n  const top = baseTop + gridSize / 2\r\n  const width = gridSize * 8\r\n  const height = gridSize * 9\r\n\r\n  const pathArr = createPathArr(config)\r\n\r\n  const svgStyle: React.SVGAttributes<SVGSVGElement>['style'] = {\r\n    position: 'absolute',\r\n    left: 0,\r\n    top: 0,\r\n    width: width + chessSize,\r\n    height: height + chessSize,\r\n  }\r\n\r\n  return (\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" style={svgStyle}>\r\n      <g>\r\n        <rect x={left} y={top} width={width} height={height} fill=\"none\" stroke=\"#000000\" strokeWidth=\"3\"></rect>\r\n        {pathArr.map((path, i) => (\r\n          <path key={i} fill=\"none\" stroke=\"#000000\" d={path}></path>\r\n        ))}\r\n      </g>\r\n    </svg>\r\n  )\r\n}\r\n","import { Remesh } from 'remesh'\r\nimport { delay, filter, map } from 'rxjs/operators'\r\n\r\nexport enum ChessValue {\r\n  General = 100,\r\n  Chariot = 50,\r\n  Cannon = 30,\r\n  Horse = 29,\r\n  Elephant = 16,\r\n  Guard = 10,\r\n  Soldier = 1,\r\n}\r\n\r\nexport enum ChessColor {\r\n  Red = 1,\r\n  Black = -1,\r\n}\r\n\r\nexport type Position = {\r\n  x: number\r\n  y: number\r\n}\r\n\r\nexport type Chess = {\r\n  color: ChessColor // 棋子什么颜色\r\n  value: ChessValue // 是哪种棋子\r\n  selected?: boolean // 是否被选中\r\n  marked?: boolean // 是否被标记为可攻击\r\n  position: Position // 当前位置\r\n}\r\n\r\nexport type Marker = Position\r\n\r\nexport type Game = {\r\n  currentPlayer: ChessColor\r\n  selectedChess?: Chess\r\n  situation: Chess[]\r\n  markers: Marker[]\r\n}\r\n\r\nexport type GameStatus = 'red-win' | 'black-win' | 'playing'\r\n\r\n/**\r\n * 帮助函数\r\n */\r\n/**\r\n * 判断两个位置是否相同\r\n * @param pos1 第一个位置\r\n * @param pos2 第二个位置\r\n * @returns boolean，是否相同\r\n */\r\nconst isSamePosition = (pos1: Position, pos2: Position) => {\r\n  return pos1.x === pos2.x && pos1.y === pos2.y\r\n}\r\n\r\n/**\r\n * 将的位置是否合法\r\n * @param color 颜色\r\n * @param position 位置\r\n */\r\nconst isGeneralValid = (color: ChessColor, { x, y }: Position) => {\r\n  switch (color) {\r\n    case ChessColor.Black:\r\n      return !(x < 3 || x > 5 || (y > 2 && y < 7))\r\n    case ChessColor.Red:\r\n      return !(x < 3 || x > 5 || (y > 2 && y < 7))\r\n  }\r\n}\r\n\r\n/**\r\n * 士的位置是否合法\r\n * @param color 颜色\r\n * @param position 位置\r\n */\r\nconst isGuardValid = (color: ChessColor, { x, y }: Position) => {\r\n  switch (color) {\r\n    case ChessColor.Black:\r\n      return [\r\n        [3, 0],\r\n        [3, 2],\r\n        [5, 0],\r\n        [5, 2],\r\n        [4, 1],\r\n      ].find(([x1, y1]) => x1 === x && y1 === y)\r\n    case ChessColor.Red:\r\n      return [\r\n        [3, 7],\r\n        [3, 9],\r\n        [5, 7],\r\n        [5, 9],\r\n        [4, 8],\r\n      ].find(([x1, y1]) => x1 === x && y1 === y)\r\n  }\r\n}\r\n\r\n/**\r\n * 象的位置是否合法\r\n * @param color 颜色\r\n * @param position 位置\r\n */\r\nconst isElephantValid = (color: ChessColor, { x, y }: Position) => {\r\n  switch (color) {\r\n    case ChessColor.Black:\r\n      return [\r\n        [0, 2],\r\n        [2, 0],\r\n        [2, 4],\r\n        [4, 2],\r\n        [6, 0],\r\n        [6, 4],\r\n        [8, 2],\r\n      ].find(([x1, y1]) => x1 === x && y1 === y)\r\n    case ChessColor.Red:\r\n      return [\r\n        [0, 7],\r\n        [2, 5],\r\n        [2, 9],\r\n        [4, 7],\r\n        [6, 5],\r\n        [6, 9],\r\n        [8, 7],\r\n      ].find(([x1, y1]) => x1 === x && y1 === y)\r\n  }\r\n}\r\n\r\n/**\r\n * 兵的位置是否合法\r\n * @param color 颜色\r\n * @param position 位置\r\n */\r\nconst isSoldierValid = (color: ChessColor, { x, y }: Position) => {\r\n  switch (color) {\r\n    case ChessColor.Black:\r\n      return !(y < 3 || (y < 5 && x % 2 === 1))\r\n    case ChessColor.Red:\r\n      return !(y > 6 || (y > 4 && x % 2 === 1))\r\n  }\r\n}\r\n\r\nconst canCannonAttack =\r\n  (game: Game) =>\r\n  ({ position: source }: Chess, { x, y }: Position) => {\r\n    // 不在一条直线上，不能走\r\n    if (source.x !== x && source.y !== y) {\r\n      return false\r\n    }\r\n\r\n    // 先检测目标位置有无棋子\r\n    if (game.situation.find((chess) => chess.position.x === x && chess.position.y === y)) {\r\n      // 目标位置非空，吃子的逻辑，检测中间时候有且仅有一个棋子\r\n      // 同一水平线\r\n      if (source.y === y) {\r\n        return (\r\n          game.situation.filter(\r\n            (chess) => chess.position.y === y && (chess.position.x - x) * (chess.position.x - source.x) < 0,\r\n          ).length === 1\r\n        )\r\n      }\r\n\r\n      // 同一竖直线\r\n      if (source.x === x) {\r\n        return (\r\n          game.situation.filter(\r\n            (chess) => chess.position.x === x && (chess.position.y - y) * (chess.position.y - source.y) < 0,\r\n          ).length === 1\r\n        )\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n// 将可以去哪里吗\r\nconst canGeneralMove =\r\n  () =>\r\n  ({ position: source }: Chess, { x, y }: Position) => {\r\n    return Math.abs(source.y - y) + Math.abs(source.x - x) === 1\r\n  }\r\n\r\n// 士可以去哪里吗\r\nconst canGuardMove =\r\n  () =>\r\n  ({ position: source }: Chess, { x, y }: Position) => {\r\n    const square = (a: number) => a * a\r\n\r\n    return square(source.x - x) + square(source.y - y) === 2\r\n  }\r\n\r\n// 象可以去哪里吗\r\nconst canElephantMove =\r\n  (game: Game) =>\r\n  ({ position: source }: Chess, { x, y }: Position) => {\r\n    if (Math.abs(source.x - x) !== 2 || Math.abs(source.y - y) !== 2) {\r\n      return false\r\n    } else {\r\n      // 象眼位置没有棋子\r\n      return !game.situation.find(\r\n        (chess) => chess.position.x === (source.x + x) / 2 && chess.position.y === (source.y + y) / 2,\r\n      )\r\n    }\r\n  }\r\n\r\n// 马可以去哪里吗\r\nconst canHorseMove =\r\n  (game: Game) =>\r\n  ({ position: source }: Chess, { x, y }: Position) => {\r\n    const dx = source.x - x\r\n    const dy = source.y - y\r\n\r\n    // 马走日，并且马腿的位置没有棋子\r\n    return (\r\n      dx * dx + dy * dy === 5 &&\r\n      !game.situation.find(\r\n        (chess) =>\r\n          chess.position.x === Math.round((2 * source.x + x) / 3) &&\r\n          chess.position.y === Math.round((2 * source.y + y) / 3),\r\n      )\r\n    )\r\n  }\r\n\r\n// 能走直线吗\r\nconst canMoveStraightly =\r\n  (game: Game) =>\r\n  ({ position: source }: Chess, { x, y }: Position) => {\r\n    // 不在一条直线上，不能走\r\n    if (source.x !== x && source.y !== y) {\r\n      return false\r\n    }\r\n\r\n    // 同一条水平线，中间无棋子\r\n    if (source.y === y) {\r\n      return !game.situation.find(\r\n        (chess) => chess.position.y === y && (chess.position.x - x) * (chess.position.x - source.x) < 0,\r\n      )\r\n    }\r\n\r\n    // 同一竖直线，中间无棋子\r\n    if (source.x === x) {\r\n      return !game.situation.find(\r\n        (chess) => chess.position.x === x && (chess.position.y - y) * (chess.position.y - source.y) < 0,\r\n      )\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n// 兵可以去哪里吗\r\nconst canSoldierMove =\r\n  () =>\r\n  ({ position: source, color }: Chess, { x, y }: Position) => {\r\n    switch (color) {\r\n      case ChessColor.Black:\r\n        return y >= source.y && Math.abs(x - source.x) + Math.abs(y - source.y) === 1\r\n      case ChessColor.Red:\r\n        return y <= source.y && Math.abs(x - source.x) + Math.abs(y - source.y) === 1\r\n    }\r\n  }\r\n\r\n/**\r\n * 判断在当前棋局下，某个棋子能否移动到目的位置，有些棋子的移动需要结合棋盘状态，此处不检测目标位置是否有棋子\r\n * @param game 棋盘状态\r\n */\r\nconst canMove = (game: Game) => (chess: Chess, position: Position) => {\r\n  const { color, value } = chess\r\n  switch (value) {\r\n    case ChessValue.General:\r\n      return isGeneralValid(color, position) && canGeneralMove()(chess, position)\r\n    case ChessValue.Guard:\r\n      return isGuardValid(color, position) && canGuardMove()(chess, position)\r\n    case ChessValue.Elephant:\r\n      return isElephantValid(color, position) && canElephantMove(game)(chess, position)\r\n    case ChessValue.Horse:\r\n      return canHorseMove(game)(chess, position)\r\n    case ChessValue.Chariot:\r\n      return canMoveStraightly(game)(chess, position)\r\n    case ChessValue.Cannon:\r\n      return canMoveStraightly(game)(chess, position)\r\n    case ChessValue.Soldier:\r\n      return isSoldierValid(color, position) && canSoldierMove()(chess, position)\r\n  }\r\n}\r\n\r\n/**\r\n * 判断在当前棋局下，某个棋子能否攻击目标位置\r\n * @param game 棋盘状态\r\n */\r\nconst canAttack = (game: Game) => (chess: Chess, dest: Chess) => {\r\n  if (chess.color === dest.color) {\r\n    // 不能吃自己的棋子\r\n    return false\r\n  }\r\n\r\n  if (chess.value === ChessValue.Cannon) {\r\n    return canCannonAttack(game)(chess, dest.position)\r\n  } else {\r\n    return (\r\n      game.situation.find((chess) => isSamePosition(chess.position, dest.position)) &&\r\n      canMove(game)(chess, dest.position)\r\n    )\r\n  }\r\n}\r\n\r\n// 标记某个棋子为选中\r\nconst select = (chess: Chess) => {\r\n  return {\r\n    ...chess,\r\n    selected: true,\r\n  }\r\n}\r\n\r\n// 取消某个棋子的选中状态\r\nconst unselect = (chess: Chess) => {\r\n  return {\r\n    ...chess,\r\n    selected: false,\r\n  }\r\n}\r\n\r\n// 标记为可被攻击\r\nconst mark = (chess: Chess) => {\r\n  return {\r\n    ...chess,\r\n    marked: true,\r\n  }\r\n}\r\n\r\n// 取消可攻击状态\r\nconst unmark = (chess: Chess) => {\r\n  return {\r\n    ...chess,\r\n    marked: false,\r\n  }\r\n}\r\n\r\n/**\r\n * 移动棋子到指定位置\r\n * @param chess 待移动的棋子状态\r\n * @param position 位置\r\n */\r\nconst move = (position: Position) => {\r\n  return (chess: Chess) => {\r\n    return {\r\n      ...chess,\r\n      position,\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 在当前棋局中选中指定位置的棋子\r\n * @param position 目标位置\r\n */\r\nconst selectChessInGame =\r\n  (position: Position) =>\r\n  (game: Game): Game => {\r\n    const { currentPlayer, situation } = game\r\n    const { x, y } = position\r\n\r\n    let newSelectedChess: Chess | undefined\r\n    const newSituation = situation\r\n      .map((chess) => unmark(unselect(chess)))\r\n      .map((chess) => {\r\n        if (chess.position.x === x && chess.position.y === y) {\r\n          newSelectedChess = select(chess)\r\n          return newSelectedChess\r\n        } else {\r\n          return chess\r\n        }\r\n      })\r\n      .map((chess) => {\r\n        if (canAttack(game)(newSelectedChess!, chess)) {\r\n          return mark(chess)\r\n        } else {\r\n          return chess\r\n        }\r\n      })\r\n\r\n    const markers: Marker[] = new Array(90)\r\n      .fill(null)\r\n      .map((v, index) => {\r\n        const x = index % 9\r\n        const y = (index - x) / 9\r\n        return { x, y }\r\n      })\r\n      .filter((v) => canMove(game)(newSelectedChess!, v))\r\n\r\n    return {\r\n      currentPlayer,\r\n      selectedChess: newSelectedChess,\r\n      situation: newSituation,\r\n      markers,\r\n    }\r\n  }\r\n\r\n/**\r\n * 在当前棋局中，把选中的棋子移动到指定位置\r\n * @param position 目标位置\r\n */\r\nconst moveChessInGame =\r\n  (position: Position) =>\r\n  (game: Game): Game => {\r\n    const { currentPlayer, situation, selectedChess } = game\r\n\r\n    if (selectedChess && canMove(game)(selectedChess, position)) {\r\n      const { x, y } = selectedChess.position\r\n      const newSituation = situation\r\n        .map((chess) => {\r\n          if (chess.position.x === x && chess.position.y === y) {\r\n            return move(position)(chess)\r\n          } else {\r\n            return chess\r\n          }\r\n        })\r\n        // 走完之后，去掉棋子的选中和标记状态\r\n        .map((chess) => unmark(unselect(chess)))\r\n\r\n      return {\r\n        currentPlayer: -currentPlayer,\r\n        selectedChess: undefined,\r\n        situation: newSituation,\r\n        markers: [],\r\n      }\r\n    }\r\n    return game\r\n  }\r\n\r\n/**\r\n * 在当前棋局中，用选中的棋子攻击指定位置\r\n * @param position 目标位置\r\n */\r\nconst attack =\r\n  (position: Position) =>\r\n  (game: Game): Game => {\r\n    const { currentPlayer, situation, selectedChess } = game\r\n\r\n    // 要攻击的棋子\r\n    const dest = situation.find((chess) => chess.position.x === position.x && chess.position.y === position.y)\r\n\r\n    if (selectedChess && dest && canAttack(game)(selectedChess, dest)) {\r\n      const { x, y } = selectedChess.position\r\n      const newSituation = situation\r\n        .map((chess) => {\r\n          // 吃别人的，自己移动到对方位置\r\n          if (chess.position.x === x && chess.position.y === y) {\r\n            return move(position)(chess)\r\n          }\r\n\r\n          // 被吃的，拿掉\r\n          if (chess.position.x === position.x && chess.position.y === position.y) {\r\n            return null\r\n          }\r\n\r\n          // 其他保持原样\r\n          return chess\r\n        })\r\n        .filter((chess) => !!chess)\r\n        // 走完之后，去掉棋子的选中和标记状态\r\n        .map((chess) => unmark(unselect(chess as Chess)))\r\n\r\n      return {\r\n        currentPlayer: -currentPlayer,\r\n        selectedChess: undefined,\r\n        situation: newSituation,\r\n        markers: [],\r\n      }\r\n    }\r\n    return game\r\n  }\r\n\r\nconst getGameStatus = (situation: Game['situation']): GameStatus => {\r\n  const blackWin = !situation.some((chess) => {\r\n    return chess.color === ChessColor.Red && chess.value === ChessValue.General\r\n  })\r\n\r\n  if (blackWin) {\r\n    return 'black-win'\r\n  }\r\n\r\n  const redWin = !situation.some((chess) => {\r\n    return chess.color === ChessColor.Black && chess.value === ChessValue.General\r\n  })\r\n\r\n  if (redWin) {\r\n    return 'red-win'\r\n  }\r\n\r\n  return 'playing'\r\n}\r\n\r\nconst defaultSituation: Chess[] = [\r\n  { color: ChessColor.Black, value: ChessValue.Chariot, position: { x: 0, y: 0 } },\r\n  { color: ChessColor.Black, value: ChessValue.Horse, position: { x: 1, y: 0 } },\r\n  { color: ChessColor.Black, value: ChessValue.Elephant, position: { x: 2, y: 0 } },\r\n  { color: ChessColor.Black, value: ChessValue.Guard, position: { x: 3, y: 0 } },\r\n  { color: ChessColor.Black, value: ChessValue.General, position: { x: 4, y: 0 } },\r\n  { color: ChessColor.Black, value: ChessValue.Guard, position: { x: 5, y: 0 } },\r\n  { color: ChessColor.Black, value: ChessValue.Elephant, position: { x: 6, y: 0 } },\r\n  { color: ChessColor.Black, value: ChessValue.Horse, position: { x: 7, y: 0 } },\r\n  { color: ChessColor.Black, value: ChessValue.Chariot, position: { x: 8, y: 0 } },\r\n\r\n  { color: ChessColor.Black, value: ChessValue.Cannon, position: { x: 1, y: 2 } },\r\n  { color: ChessColor.Black, value: ChessValue.Cannon, position: { x: 7, y: 2 } },\r\n\r\n  { color: ChessColor.Black, value: ChessValue.Soldier, position: { x: 0, y: 3 } },\r\n  { color: ChessColor.Black, value: ChessValue.Soldier, position: { x: 2, y: 3 } },\r\n  { color: ChessColor.Black, value: ChessValue.Soldier, position: { x: 4, y: 3 } },\r\n  { color: ChessColor.Black, value: ChessValue.Soldier, position: { x: 6, y: 3 } },\r\n  { color: ChessColor.Black, value: ChessValue.Soldier, position: { x: 8, y: 3 } },\r\n\r\n  { color: ChessColor.Red, value: ChessValue.Soldier, position: { x: 0, y: 6 } },\r\n  { color: ChessColor.Red, value: ChessValue.Soldier, position: { x: 2, y: 6 } },\r\n  { color: ChessColor.Red, value: ChessValue.Soldier, position: { x: 4, y: 6 } },\r\n  { color: ChessColor.Red, value: ChessValue.Soldier, position: { x: 6, y: 6 } },\r\n  { color: ChessColor.Red, value: ChessValue.Soldier, position: { x: 8, y: 6 } },\r\n\r\n  { color: ChessColor.Red, value: ChessValue.Cannon, position: { x: 1, y: 7 } },\r\n  { color: ChessColor.Red, value: ChessValue.Cannon, position: { x: 7, y: 7 } },\r\n\r\n  { color: ChessColor.Red, value: ChessValue.Chariot, position: { x: 0, y: 9 } },\r\n  { color: ChessColor.Red, value: ChessValue.Horse, position: { x: 1, y: 9 } },\r\n  { color: ChessColor.Red, value: ChessValue.Elephant, position: { x: 2, y: 9 } },\r\n  { color: ChessColor.Red, value: ChessValue.Guard, position: { x: 3, y: 9 } },\r\n  { color: ChessColor.Red, value: ChessValue.General, position: { x: 4, y: 9 } },\r\n  { color: ChessColor.Red, value: ChessValue.Guard, position: { x: 5, y: 9 } },\r\n  { color: ChessColor.Red, value: ChessValue.Elephant, position: { x: 6, y: 9 } },\r\n  { color: ChessColor.Red, value: ChessValue.Horse, position: { x: 7, y: 9 } },\r\n  { color: ChessColor.Red, value: ChessValue.Chariot, position: { x: 8, y: 9 } },\r\n]\r\n\r\nexport const GameDomain = Remesh.domain({\r\n  name: 'GameDomain',\r\n  impl: (domain) => {\r\n    const defaultGameState = {\r\n      currentPlayer: ChessColor.Red,\r\n      selectedChess: undefined,\r\n      situation: defaultSituation,\r\n      markers: [],\r\n    }\r\n\r\n    const GameState = domain.state<Game>({\r\n      name: 'Game',\r\n      default: defaultGameState,\r\n    })\r\n\r\n    // 不需要筛选过滤了，直接返回\r\n    const gameQuery = GameState.Query\r\n\r\n    const gameStatusQuery = domain.query({\r\n      name: 'gameStatus',\r\n      impl: ({ get }): GameStatus => {\r\n        const { situation } = get(gameQuery())\r\n        return getGameStatus(situation)\r\n      },\r\n    })\r\n\r\n    const gameOverEvent = domain.event({\r\n      name: 'gameOverEvent',\r\n    })\r\n\r\n    // 不需要区分前因后果，知道他不能走就可以了，所以参数跟返回值都不用了\r\n    const notYourMoveEvent = domain.event({\r\n      name: 'notYourMoveEvent',\r\n    })\r\n\r\n    const resetGameState = domain.command({\r\n      name: 'resetGameState',\r\n      impl: () => {\r\n        return GameState().new(defaultGameState)\r\n      },\r\n    })\r\n\r\n    const selectChess = domain.command({\r\n      name: 'selectChess',\r\n      impl({ get }, chess: Chess) {\r\n        const gameStatus = get(gameStatusQuery())\r\n\r\n        if (gameStatus !== 'playing') {\r\n          return gameOverEvent()\r\n        }\r\n\r\n        const game = get(GameState())\r\n        const { currentPlayer, selectedChess } = game\r\n\r\n        if (chess.color === currentPlayer) {\r\n          return [GameState().new(selectChessInGame(chess.position)(game))]\r\n        } else {\r\n          if (selectedChess) {\r\n            return [GameState().new(attack(chess.position)(game))]\r\n          } else {\r\n            return [notYourMoveEvent()]\r\n          }\r\n        }\r\n      },\r\n    })\r\n\r\n    const moveChess = domain.command({\r\n      name: 'moveChess',\r\n      impl({ get }, position: Marker) {\r\n        const gameStatus = get(gameStatusQuery())\r\n\r\n        if (gameStatus !== 'playing') {\r\n          return gameOverEvent()\r\n        }\r\n\r\n        const game = get(GameState())\r\n\r\n        const { selectedChess } = game\r\n\r\n        if (selectedChess) {\r\n          return [GameState().new(moveChessInGame(position)(game))]\r\n        } else {\r\n          return [notYourMoveEvent()]\r\n        }\r\n      },\r\n    })\r\n\r\n    domain.command$({\r\n      name: 'checkGameStatus',\r\n      impl: ({ fromQuery }) => {\r\n        return fromQuery(gameStatusQuery()).pipe(\r\n          filter((gameStatus) => gameStatus !== 'playing'),\r\n          delay(100),\r\n          map(() => gameOverEvent()),\r\n        )\r\n      },\r\n    })\r\n\r\n    return {\r\n      query: {\r\n        gameQuery,\r\n        gameStatusQuery,\r\n      },\r\n      command: {\r\n        selectChess,\r\n        moveChess,\r\n        resetGameState,\r\n      },\r\n      event: {\r\n        notYourMoveEvent,\r\n        gameOverEvent,\r\n      },\r\n    }\r\n  },\r\n})\r\n","import React, { useContext } from 'react'\r\nimport { GameConfigContext } from '../context/game'\r\nimport { Chess, ChessColor, ChessValue } from '../models/game'\r\n\r\nconst formatChessColor = (color: ChessColor) => {\r\n  return { [ChessColor.Red]: 'red', [ChessColor.Black]: 'black' }[color]\r\n}\r\n\r\nconst formatChessValue = (color: ChessColor, value: ChessValue) => {\r\n  return {\r\n    [ChessColor.Red]: {\r\n      [ChessValue.General]: '帅',\r\n      [ChessValue.Guard]: '仕',\r\n      [ChessValue.Elephant]: '相',\r\n      [ChessValue.Horse]: '馬',\r\n      [ChessValue.Chariot]: '車',\r\n      [ChessValue.Cannon]: '炮',\r\n      [ChessValue.Soldier]: '兵',\r\n    },\r\n    [ChessColor.Black]: {\r\n      [ChessValue.General]: '将',\r\n      [ChessValue.Guard]: '士',\r\n      [ChessValue.Elephant]: '象',\r\n      [ChessValue.Horse]: '马',\r\n      [ChessValue.Chariot]: '车',\r\n      [ChessValue.Cannon]: '砲',\r\n      [ChessValue.Soldier]: '卒',\r\n    },\r\n  }[color][value]\r\n}\r\n\r\ntype ChessProps = {\r\n  chess: Chess\r\n  onClick: (chess: Chess) => void\r\n}\r\n\r\nexport const ChessRender = (props: ChessProps) => {\r\n  const { chess, onClick } = props\r\n\r\n  const {\r\n    color,\r\n    value,\r\n    position: { x, y },\r\n    selected,\r\n    marked,\r\n  } = chess\r\n\r\n  const { chessSize, gridSize, left, top } = useContext(GameConfigContext)\r\n\r\n  const style: React.HTMLAttributes<HTMLDivElement>['style'] = {\r\n    position: 'absolute',\r\n    zIndex: 10,\r\n    backgroundColor: 'white',\r\n    fontSize: 26,\r\n    textAlign: 'center',\r\n    borderWidth: 2,\r\n    width: chessSize,\r\n    height: chessSize,\r\n    left: left + x * gridSize + (gridSize - chessSize) / 2 - 2,\r\n    top: top + y * gridSize + (gridSize - chessSize) / 2 - 2,\r\n    borderStyle: selected ? 'dashed' : 'solid',\r\n    borderColor: marked ? 'aqua' : formatChessColor(color),\r\n    borderRadius: chessSize / 2 + 1,\r\n    color: formatChessColor(color),\r\n  }\r\n\r\n  return (\r\n    <div onClick={() => onClick(chess)} style={style}>\r\n      {formatChessValue(color, value)}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { GameConfigContext } from '../context/game'\r\nimport { Marker } from '../models/game'\r\n\r\ntype MarkerProps = {\r\n  marker: Marker\r\n  onClick: (marker: Marker) => void\r\n}\r\n\r\nexport const MarkerRender = (props: MarkerProps) => {\r\n  const { marker, onClick } = props\r\n  const { x, y } = marker\r\n\r\n  const { chessSize, gridSize, left, top } = useContext(GameConfigContext)\r\n\r\n  const style: React.HTMLAttributes<HTMLDivElement>['style'] = {\r\n    position: 'absolute',\r\n    borderWidth: 2,\r\n    borderStyle: 'dashed',\r\n    borderColor: 'green',\r\n    backgroundColor: 'white',\r\n    width: chessSize / 2,\r\n    height: chessSize / 2,\r\n    left: left + x * gridSize + chessSize / 4 + (gridSize - chessSize) / 2 - 2,\r\n    top: top + y * gridSize + chessSize / 4 + (gridSize - chessSize) / 2 - 2,\r\n  }\r\n\r\n  return <div onClick={() => onClick(marker)} style={style} />\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { useRemeshDomain, useRemeshEvent, useRemeshQuery } from 'remesh-react'\r\nimport { BoardRender } from './components/Board'\r\nimport { ChessRender } from './components/Chess'\r\nimport { MarkerRender } from './components/Marker'\r\nimport { GameConfigContext } from './context/game'\r\n\r\nimport { GameDomain } from './models/game'\r\n\r\nexport const ChessGame = () => {\r\n  const { left, top, gridSize } = useContext(GameConfigContext)\r\n\r\n  const domain = useRemeshDomain(GameDomain())\r\n  const gameState = useRemeshQuery(domain.query.gameQuery())\r\n\r\n  useRemeshEvent(domain.event.notYourMoveEvent, () => {\r\n    alert('不该你走')\r\n  })\r\n\r\n  useRemeshEvent(domain.event.gameOverEvent, () => {\r\n    const shouldRestart = window.confirm('游戏结束，是否重新开始？')\r\n    if (shouldRestart) {\r\n      domain.command.resetGameState()\r\n    }\r\n  })\r\n\r\n  const style: React.HTMLAttributes<HTMLDivElement>['style'] = {\r\n    width: left + 9 * gridSize,\r\n    height: top + 10 * gridSize,\r\n  }\r\n\r\n  const { situation, markers } = gameState\r\n\r\n  return (\r\n    <div style={style}>\r\n      <BoardRender />\r\n\r\n      {situation.map((chess, i) => (\r\n        <ChessRender key={i} chess={chess} onClick={() => domain.command.selectChess(chess)} />\r\n      ))}\r\n\r\n      {markers.map((marker, i) => (\r\n        <MarkerRender key={i} marker={marker} onClick={() => domain.command.moveChess(marker)} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","import React, { StrictMode } from 'react'\r\nimport * as ReactDOMClient from 'react-dom/client'\r\n\r\nimport { Remesh } from 'remesh'\r\n\r\nimport { RemeshRoot } from 'remesh-react'\r\nimport { RemeshReduxDevtools } from 'remesh-redux-devtools'\r\nimport { RemeshLogger } from 'remesh-logger'\r\n\r\nimport { ChessGame } from './ChessGame'\r\nimport { GameConfigContext } from './context/game'\r\n\r\nconst container = document.getElementById('root')\r\n\r\nif (container) {\r\n  const root = ReactDOMClient.createRoot(container)\r\n  const store = Remesh.store({\r\n    inspectors: [\r\n      RemeshReduxDevtools(),\r\n      RemeshLogger({\r\n        include: ['command', 'query', 'event', 'domain', 'command$', 'state'],\r\n      }),\r\n    ],\r\n  })\r\n\r\n  root.render(\r\n    <StrictMode>\r\n      <RemeshRoot store={store}>\r\n        <GameConfigContext.Provider\r\n          value={{\r\n            left: 0,\r\n            top: 0,\r\n            gridSize: 60,\r\n            chessSize: 40,\r\n          }}\r\n        >\r\n          <ChessGame />\r\n        </GameConfigContext.Provider>\r\n      </RemeshRoot>\r\n    </StrictMode>,\r\n  )\r\n}\r\n"],"names":["useContext","ReactDOMClient.createRoot","StrictMode"],"mappings":"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"}